1
00:00:00,000 --> 00:00:06,000
Sometimes once you install all your microservices with the help of helm chart, you may want to roll

2
00:00:06,000 --> 00:00:13,000
out new changes of your microservices or you may want to update your microservices deployment with

3
00:00:13,000 --> 00:00:14,000
a new values.

4
00:00:14,000 --> 00:00:20,000
Like maybe you want to increase the replicas from 1 to 2 or 2 to 5 based upon your requirements.

5
00:00:20,000 --> 00:00:25,000
Or you may want to deploy a new Docker image into your Kubernetes cluster.

6
00:00:25,000 --> 00:00:33,000
So previously we saw how to roll out and roll back changes with the help of Kubernetes and Kubectl Command.

7
00:00:33,000 --> 00:00:38,000
So now let me show you how to do the same with the help of Helm commands as well.

8
00:00:38,000 --> 00:00:42,000
For the same first, let me go to the folder location inside my helm folder location.

9
00:00:42,000 --> 00:00:49,000
I need to go into the environments folder inside this, I'm going to go inside the prod env folder because

10
00:00:49,000 --> 00:00:55,000
right now we install the chart of production environment only. Here inside my helm folder,

11
00:00:55,000 --> 00:00:58,000
I'm going to make a small change.

12
00:00:58,000 --> 00:01:00,000
The change is inside the gateway server.

13
00:01:00,000 --> 00:01:04,000
So let me go to the gateway server and open the values.yaml.

14
00:01:04,000 --> 00:01:09,000
So as of now, the tag that we have deployed for Gateway Server is s14.

15
00:01:09,000 --> 00:01:15,000
I will change this to s12 so that no authentication information are no authorization

16
00:01:15,000 --> 00:01:18,000
information will be required by my gateway server.

17
00:01:18,000 --> 00:01:23,000
I should be able to access any API with the help of my gateway server.

18
00:01:23,000 --> 00:01:29,000
So let me save this change and post that I need to recompile my production environment helm chart because

19
00:01:29,000 --> 00:01:34,000
my production environment helm chart has a dependency on the Gateway Server helm chart.

20
00:01:34,000 --> 00:01:40,000
For that reason, I need to go to the folder which is prod env and here I need to run the command which

21
00:01:40,000 --> 00:01:43,000
is helm dependencies build.

22
00:01:43,000 --> 00:01:50,000
Once the build is completed we can run a command which is helm upgrade and what is the release name

23
00:01:50,000 --> 00:01:51,000
that we have given.

24
00:01:51,000 --> 00:01:57,000
The release name that we have given is easybank after the release name, we need to provide the helm

25
00:01:57,000 --> 00:02:04,000
chart details, but since I'm into the wrong location so let me go back to the parent folder which is

26
00:02:04,000 --> 00:02:06,000
into the environments from this location,

27
00:02:06,000 --> 00:02:11,000
I'm going to run the command helm upgrade easy bank and post that

28
00:02:11,000 --> 00:02:15,000
what is a helm chart name the helm chart name is prod-env.

29
00:02:15,000 --> 00:02:20,000
So if I try to execute this, my helm is smart enough to identify what are the changes and deploy the

30
00:02:20,000 --> 00:02:23,000
same changes into the Kubernetes cluster.

31
00:02:23,000 --> 00:02:26,000
And it is also going to give the revision number as two.

32
00:02:26,000 --> 00:02:28,000
Now I'll go to the Kubernetes dashboard.

33
00:02:28,000 --> 00:02:30,000
Inside my Kubernetes dashboard,

34
00:02:30,000 --> 00:02:36,000
I'll go to the pods and I will look for the pod, which has a name Gateway Server.

35
00:02:36,000 --> 00:02:38,000
I'm trying to open that and look for the logs.

36
00:02:38,000 --> 00:02:45,000
And here my gateway server is starting, so I'm going to wait for a few more seconds so that my gateway

37
00:02:45,000 --> 00:02:49,000
server deployment will complete. After few seconds

38
00:02:49,000 --> 00:02:54,000
my Gateway server application started successfully. To validate if my changes are really deployed or

39
00:02:54,000 --> 00:02:55,000
not.

40
00:02:55,000 --> 00:02:59,000
I can try to invoke one of the post API without any security.

41
00:02:59,000 --> 00:03:03,000
So inside our postman we have an API with the name Accounts_Post_Noauth

42
00:03:03,000 --> 00:03:04,000
.

43
00:03:04,000 --> 00:03:12,000
This API I'm going to invoke and I should not get 401 error, but here I'm getting 401 unauthorized

44
00:03:12,000 --> 00:03:13,000
error only.

45
00:03:13,000 --> 00:03:15,000
I made a very dumb mistake.

46
00:03:15,000 --> 00:03:20,000
The tag name that we should update is not s12, it should be S11.

47
00:03:20,000 --> 00:03:26,000
If you see here, section 12 has changes related to Oauth2, whereas section 11 does not have any security

48
00:03:26,000 --> 00:03:27,000
related changes.

49
00:03:27,000 --> 00:03:29,000
So this is a very dumb mistake.

50
00:03:29,000 --> 00:03:30,000
Let me correct this.

51
00:03:30,000 --> 00:03:38,000
So first inside my values.yaml, I'm going to update the tag name to s11 and post that I'm going to

52
00:03:38,000 --> 00:03:42,000
navigate into the prod env folder and run the helm

53
00:03:42,000 --> 00:03:43,000
dependencies build.

54
00:03:43,000 --> 00:03:49,000
Once the build is completed, I will navigate back to the parent folder and run the helm upgrade command.

55
00:03:49,000 --> 00:03:52,000
So this time I'll get the revision as three.

56
00:03:52,000 --> 00:03:54,000
So let's wait for my deployment to complete.

57
00:03:54,000 --> 00:03:59,000
Inside the pods, a new gateway server pod is trying to create.

58
00:03:59,000 --> 00:04:00,000
You can see the age of the pod.

59
00:04:00,000 --> 00:04:05,000
I'll go to the logs and I will wait here for my gateway server to completely start.

60
00:04:05,000 --> 00:04:09,000
After few seconds, my gateway server started successfully.

61
00:04:09,000 --> 00:04:10,000
Let me go to the postman.

62
00:04:10,000 --> 00:04:15,000
Here this time they should not be any surprises and you should get a successful response.

63
00:04:15,000 --> 00:04:22,000
You can see here I got a successful response even though I have not sent any authentication information.

64
00:04:22,000 --> 00:04:29,000
So this confirms the helm upgrade command is working fine, so this way we can make any number of changes

65
00:04:29,000 --> 00:04:35,000
inside our helm charts and run the helm upgrade command and your helm is going to take care of deploying

66
00:04:35,000 --> 00:04:39,000
only the changes related to the new changes that you have done.

67
00:04:39,000 --> 00:04:44,000
Similarly, if you want, you can change the replica count from 1 to 5 or 1 to 3.

68
00:04:44,000 --> 00:04:46,000
So it's up to you what change you want to do.

69
00:04:46,000 --> 00:04:52,000
I'm not doing any change related to replica count because inside my local system my laptop is already

70
00:04:52,000 --> 00:04:59,000
cursing me a lot, saying that how much weight I need to bear it is eagerly looking towards me to uninstall

71
00:04:59,000 --> 00:05:06,000
all these components from Kubernetes cluster so that it will get free from all the burden it is right

72
00:05:06,000 --> 00:05:07,000
now carrying.

73
00:05:07,000 --> 00:05:08,000
So jokes apart.

74
00:05:08,000 --> 00:05:13,000
As of now, we saw how to roll out the new changes with the help of Helm Upgrade Command.

75
00:05:13,000 --> 00:05:19,000
Very similarly, we need to know how to roll back the changes if needed, with the help of Helm Command.

76
00:05:19,000 --> 00:05:22,000
So let's try to explore the same in the next lecture.

77
00:05:22,000 --> 00:05:23,000
Thank you.

78
00:05:23,000 --> 00:05:24,000
Bye.

