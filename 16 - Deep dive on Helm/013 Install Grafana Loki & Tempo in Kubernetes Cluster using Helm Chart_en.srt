1
00:00:00,000 --> 00:00:07,000
As a next step, we are interested to set up Grafana related components inside our Kubernetes cluster.

2
00:00:07,000 --> 00:00:12,000
So inside our microservice network we use loki tempo and grafana.

3
00:00:12,000 --> 00:00:16,000
So these three components we need to set up with the help of helm chart.

4
00:00:16,000 --> 00:00:22,000
So before we try to set up the actual Grafana, first we need to make sure we set up the loki and

5
00:00:22,000 --> 00:00:23,000
tempo. For the same,

6
00:00:23,000 --> 00:00:30,000
I'm going to copy these folders of Grafana loki and Grafana tempo into the helm folder and here I'm going

7
00:00:30,000 --> 00:00:31,000
to paste them.

8
00:00:31,000 --> 00:00:37,000
First, let me try to set up grafana-loki because loki is responsible to aggregate all the logs

9
00:00:37,000 --> 00:00:41,000
that are generated by my individual microservices.

10
00:00:41,000 --> 00:00:46,000
So to install loki, we don't have to make any changes inside the values.yaml.

11
00:00:46,000 --> 00:00:52,000
We should be fine with all the default values available inside this chart. So I can straight away compile

12
00:00:52,000 --> 00:00:57,000
this chart and install inside my local Kubernetes cluster.

13
00:00:57,000 --> 00:01:04,000
So here, let me navigate into my grafana-loki folder and post that I'm going to run the command,

14
00:01:04,000 --> 00:01:06,000
which is helm dependencies build.

15
00:01:06,000 --> 00:01:11,000
So here you can see my loki has dependency on other charts like Memcached.

16
00:01:11,000 --> 00:01:14,000
That's why it is trying to download all those dependencies.

17
00:01:14,000 --> 00:01:16,000
So now my compilation is successful.

18
00:01:16,000 --> 00:01:23,000
I can try to install the loki helm chart with the help of helm install command post that I'm going

19
00:01:23,000 --> 00:01:24,000
to give a name to my release.

20
00:01:24,000 --> 00:01:29,000
The name is going to be loki, but the chart name is going to be grafana-loki.

21
00:01:29,000 --> 00:01:36,000
But since I'm in the wrong location, so let me go back to the parent location and here I'm going to

22
00:01:36,000 --> 00:01:41,000
run the command, which is helm install and the release name is going to be loki.

23
00:01:41,000 --> 00:01:48,000
And inside this folder we have a chart with the name grafana-loki, the same I want to install inside

24
00:01:48,000 --> 00:01:49,000
my Kubernetes cluster.

25
00:01:49,000 --> 00:01:56,000
So this will install many components inside my Kubernetes cluster like ingested, distributor, querier,

26
00:01:56,000 --> 00:01:59,000
promtail, compactor, gateway.

27
00:01:59,000 --> 00:02:02,000
Can you imagine setting up all these without helm chart?

28
00:02:02,000 --> 00:02:09,000
Your Kubernetes administrator will need a lot of help from the developers and the Grafana admin to set

29
00:02:09,000 --> 00:02:14,000
up these and it may need months of effort to have a proper setup, whereas with Helm it is super,

30
00:02:14,000 --> 00:02:15,000
super easy.

31
00:02:15,000 --> 00:02:18,000
As a next step we can set up the tempo as well. For the same,

32
00:02:18,000 --> 00:02:21,000
let me go to the folder location.

33
00:02:21,000 --> 00:02:24,000
Here we have a chart with the name Grafana Tempo.

34
00:02:24,000 --> 00:02:27,000
So let me open the same inside this tempo chart,

35
00:02:27,000 --> 00:02:32,000
we need to change few values inside the values.yaml. So let me open this.

36
00:02:32,000 --> 00:02:35,000
Inside this file I'm going to search for otlp.

37
00:02:36,000 --> 00:02:39,000
So these are related to open telemetry configurations.

38
00:02:39,000 --> 00:02:46,000
So as of now you can see the open telemetry communication with the help of Http protocol and gRPC protocol

39
00:02:46,000 --> 00:02:48,000
is disabled.

40
00:02:48,000 --> 00:02:50,000
We need to enable both of them.

41
00:02:50,000 --> 00:02:56,000
Then only the open telemetry Java agent that we have inside our individual microservices.

42
00:02:56,000 --> 00:03:03,000
It can send the tracing details to the tempo. By default  otlp is disabled inside this helm chart.

43
00:03:03,000 --> 00:03:08,000
So that's why we need to enable them by overriding these values from false to true.

44
00:03:08,000 --> 00:03:15,000
So let me save this file post that I'm going to compile the helm chart, which is grafana tempo.

45
00:03:15,000 --> 00:03:19,000
So here, let me execute the command, which is helm dependencies build.

46
00:03:19,000 --> 00:03:23,000
So this will download all the dependencies of tempo.

47
00:03:23,000 --> 00:03:28,000
Once the build is completed, I will navigate back to the parent folder, from the parent folder,

48
00:03:28,000 --> 00:03:33,000
I'm going to run the command which is helm install and the name of the release I want to give here is

49
00:03:33,000 --> 00:03:35,000
tempo. And post that

50
00:03:35,000 --> 00:03:39,000
what is a helm chart name, the helm chart name is grafana-tempo.

51
00:03:39,000 --> 00:03:41,000
So let me try to execute this.

52
00:03:41,000 --> 00:03:48,000
So this will give some instructions like all these components are installed like ingested, distributor,

53
00:03:48,000 --> 00:03:51,000
querier, query-frontend and compactor and vulture.

54
00:03:51,000 --> 00:03:59,000
But here we have a problem, which is our individual microservices need a tempo url to which my open telemetry

55
00:03:59,000 --> 00:04:02,000
is going to send the details of tracing details.

56
00:04:02,000 --> 00:04:07,000
So here inside the output, we don't have the any information about the URL that we need to use.

57
00:04:07,000 --> 00:04:15,000
So to overcome this challenge, we can try to run the command, which is kubectl get services and this

58
00:04:15,000 --> 00:04:19,000
command is going to list all the services installed inside your Kubernetes cluster.

59
00:04:19,000 --> 00:04:26,000
So as of now, you can see we have installed so many services related to loki, prometheus and similarly

60
00:04:26,000 --> 00:04:28,000
related to keycloak, Kafka.

61
00:04:28,000 --> 00:04:34,000
So if you can scroll down, there are some information related to tempo, so there are many tempo related services.

62
00:04:34,000 --> 00:04:40,000
Like there is a tempo related service with the name gossip-ring, ingester, generator, querier,

63
00:04:40,000 --> 00:04:43,000
vulture, compactor, distributor.

64
00:04:43,000 --> 00:04:48,000
So the service that our open telemetry should connect is these distributor.

65
00:04:48,000 --> 00:04:53,000
So that's why take the service name and we need to make sure we are mentioning the same inside the config

66
00:04:53,000 --> 00:04:54,000
map values.

67
00:04:54,000 --> 00:04:59,000
So here I have mentioned the same here and the port number has to be 4317.

68
00:04:59,000 --> 00:05:06,000
So this is how we are establishing a link between our individual microservice open telemetry with the

69
00:05:06,000 --> 00:05:07,000
grafana tempo.

70
00:05:07,000 --> 00:05:13,000
So you may have question like how do I know that I need to use only distributor but not the other service?

71
00:05:13,000 --> 00:05:20,000
So based upon my experience and official documentation information, I'm able to identify this information

72
00:05:20,000 --> 00:05:22,000
and I'm trying to spoonfeed you this information.

73
00:05:22,000 --> 00:05:28,000
So whenever you have such challenges or questions, always go to the official documentation and you

74
00:05:28,000 --> 00:05:31,000
should be able to get this information.

75
00:05:31,000 --> 00:05:37,000
With this, we successfully installed Grafana Tempo and Loki as well as the last step we need to set

76
00:05:37,000 --> 00:05:38,000
up the Grafana.

77
00:05:38,000 --> 00:05:41,000
So let's try to do the same in the next lecture.

78
00:05:41,000 --> 00:05:44,000
Thank you and I'll catch you in the next lecture bye.

