1
00:00:00,000 --> 00:00:06,000
Just like how we can install an entire microservice setup with a single command of helm.

2
00:00:06,000 --> 00:00:13,000
Very similarly, we can also uninstall all our microservices with a single command of helm.

3
00:00:13,000 --> 00:00:18,000
So inside this lecture I'm going to show you a demo of Helm Uninstall Command.

4
00:00:18,000 --> 00:00:24,000
So using Helm Uninstall Command, we can uninstall all our microservices from a Kubernetes cluster.

5
00:00:24,000 --> 00:00:30,000
So this command is going to be super, super helpful whenever you want to shut down your entire Kubernetes

6
00:00:30,000 --> 00:00:31,000
cluster.

7
00:00:31,000 --> 00:00:37,000
This is especially is going to be helpful inside the lower environments. Before I try to run the helm

8
00:00:37,000 --> 00:00:38,000
uninstall command,

9
00:00:38,000 --> 00:00:44,000
first, let me show you the what are all the installations that we have done with the help of helm.

10
00:00:44,000 --> 00:00:50,000
For the same, we can run this command helm ls and this is going to show you all the releases that we have

11
00:00:50,000 --> 00:00:52,000
installed with the help of Helm.

12
00:00:52,000 --> 00:00:58,000
First, I will try to uninstall Easy Bank and with that, all the microservices that we have deployed

13
00:00:58,000 --> 00:01:01,000
with the help of easy bank will get deleted.

14
00:01:01,000 --> 00:01:08,000
So the command, like I said, is helm uninstall And what is the name of your helm release?

15
00:01:08,000 --> 00:01:15,000
So the name is Easy Bank and as soon as I execute the Uninstallation process will get started behind

16
00:01:15,000 --> 00:01:15,000
the scenes.

17
00:01:15,000 --> 00:01:20,000
So very similarly, let me try to uninstall the remaining components.

18
00:01:20,000 --> 00:01:23,000
For example, I'm going to uninstall this time Grafana.

19
00:01:23,000 --> 00:01:30,000
Once the Uninstallation of Grafana is completed, I will do the uninstallation of tempo followed by

20
00:01:30,000 --> 00:01:31,000
loki.

21
00:01:31,000 --> 00:01:39,000
After low key, I will uninstall Prometheus and after Prometheus I'm going to uninstall Kafka followed

22
00:01:39,000 --> 00:01:40,000
by Keycloak.

23
00:01:40,000 --> 00:01:44,000
So with this we have uninstalled all the releases.

24
00:01:44,000 --> 00:01:49,000
Now if I try to run the command helm ls, you can see I got an empty result.

25
00:01:49,000 --> 00:01:53,000
We can also validate these inside the Kubernetes dashboard.

26
00:01:53,000 --> 00:01:58,000
Inside my Kubernetes dashboard, I got an output saying that there is nothing to display here.

27
00:01:58,000 --> 00:02:06,000
That means all my pods, all my deployments, services, config maps, secrets, everything got deleted

28
00:02:06,000 --> 00:02:08,000
except persistent volume claims.

29
00:02:08,000 --> 00:02:13,000
So please make sure you are deleting all these persistent volume claims.

30
00:02:13,000 --> 00:02:20,000
Otherwise next time when we try to install Keycloak, Kafka and other helm charts, it is going to create

31
00:02:20,000 --> 00:02:20,000
some issues.

32
00:02:20,000 --> 00:02:25,000
I'm not sure if this is a bug on the helm or if they are doing this intentionally, but I faced many

33
00:02:25,000 --> 00:02:31,000
issues due to these persistent volume claims being not deleted whenever we try to do an installation

34
00:02:31,000 --> 00:02:32,000
of helm chart.

35
00:02:32,000 --> 00:02:37,000
So to delete these persistent volume claims, you can select these and click on this delete button.

36
00:02:37,000 --> 00:02:43,000
So let me do the same for all the remaining PVS that I have here. With this

37
00:02:43,000 --> 00:02:49,000
our Kubernetes cluster right now will be empty and my laptop also is going to be super happy because

38
00:02:49,000 --> 00:02:54,000
I reduce all the load that it is bearing from last few hours.

39
00:02:54,000 --> 00:02:59,000
So with this, I'm assuming you are super, super clear about Helm.

40
00:02:59,000 --> 00:03:00,000
What is the purpose of Helm?

41
00:03:00,000 --> 00:03:02,000
What is the features provided by the helm?

42
00:03:02,000 --> 00:03:06,000
And here you may have a question like is helm is the only option I have.

43
00:03:06,000 --> 00:03:08,000
Off course there are other products also.

44
00:03:08,000 --> 00:03:13,000
One of the famous product, which is a competitor for Helm is customize.

45
00:03:13,000 --> 00:03:20,000
So if you go to the customize.io, this is also going to solve all the problems that Helm is solving.

46
00:03:20,000 --> 00:03:26,000
Customize also has a different approach and a lot many people, they also use customize because customize

47
00:03:26,000 --> 00:03:28,000
is very easy to learn.

48
00:03:28,000 --> 00:03:30,000
It has very less learning curve compared to hell.

49
00:03:30,000 --> 00:03:36,000
But the reason I choose Helm to introduce you is Helm has a very good ecosystem.

50
00:03:36,000 --> 00:03:39,000
Like with the helm, we can solve our own deployment challenges.

51
00:03:39,000 --> 00:03:46,000
And apart from that, there are many Bitnami charts or other community charts available for us to install

52
00:03:46,000 --> 00:03:53,000
many components or many products inside our Kubernetes cluster, whereas this community is missing for

53
00:03:53,000 --> 00:03:54,000
the customize.

54
00:03:54,000 --> 00:04:00,000
That's why many projects who started with customize later on they will realize the benefit of Helm community

55
00:04:00,000 --> 00:04:04,000
and they will end up using both customize and helm charts.

56
00:04:04,000 --> 00:04:09,000
So instead my recommendation is to go with the helm charts because helm chart is more complex product,

57
00:04:09,000 --> 00:04:13,000
it has more capabilities compared to the customize.

58
00:04:13,000 --> 00:04:14,000
So this is my personal opinion.

59
00:04:14,000 --> 00:04:19,000
But for some reason if you feel like customize is good enough for your project, feel free to use the

60
00:04:19,000 --> 00:04:20,000
same.

61
00:04:20,000 --> 00:04:25,000
You can read more details about this Customize in the official documentation present in this website.

62
00:04:25,000 --> 00:04:27,000
I hope you are clear about the discussion.

63
00:04:27,000 --> 00:04:30,000
Thank you and I'll catch you in the next lecture bye.

