1
00:00:00,000 --> 00:00:05,000
One of the great advantages of Helm is it has a very good community.

2
00:00:05,000 --> 00:00:11,000
With that reason, you should be able to easily find the helm charts to install any product inside the

3
00:00:11,000 --> 00:00:12,000
software industry.

4
00:00:12,000 --> 00:00:17,000
For example, if you want to install Kafka inside your Kubernetes cluster, you don't have to prepare

5
00:00:17,000 --> 00:00:19,000
the Kubernetes manifest files manually.

6
00:00:19,000 --> 00:00:24,000
Instead, you can rely on the helm charts available inside the web.

7
00:00:24,000 --> 00:00:29,000
So one such company are community, which always maintain these helm charts with a great production

8
00:00:29,000 --> 00:00:36,000
standards is Bitnami. So bitnami make it easy to get your favorite open source softwares up and running

9
00:00:36,000 --> 00:00:42,000
on any platform, including your laptop, Kubernetes or all the major clouds.

10
00:00:42,000 --> 00:00:44,000
So this bitnami is supported by VMware.

11
00:00:44,000 --> 00:00:50,000
So inside this course we are going to leverage the Bitnami Helm charts to install all the products like

12
00:00:50,000 --> 00:00:55,000
Kafka, Grafana, Prometheus, Keycloak inside our Kubernetes cluster.

13
00:00:55,000 --> 00:01:01,000
For the same inside the Google, you can search for bitnami helm charts gitHub.

14
00:01:01,000 --> 00:01:06,000
This will show us the GitHub repo where Bitnami is maintaining all the helm charts.

15
00:01:06,000 --> 00:01:11,000
You can see here I have a first link inside my Google search results with the name Bitnami Helm chart.

16
00:01:11,000 --> 00:01:13,000
So let me click on that.

17
00:01:13,000 --> 00:01:17,000
I'm also going to mention this GitHub URL inside our course GitHub repo.

18
00:01:17,000 --> 00:01:24,000
Inside this repo, if you can open this Bitnami folder, you should be able to identify the helm charts

19
00:01:24,000 --> 00:01:27,000
for the majority of the products that any organization needs.

20
00:01:27,000 --> 00:01:35,000
So here we have products like Argo CD, Cassandra Console, followed by Drupal, Elasticsearch.

21
00:01:35,000 --> 00:01:41,000
Similarly, all Grafana related helm charts are also available here like Grafana Loki Grafana Tempo,

22
00:01:41,000 --> 00:01:42,000
Grafana.

23
00:01:42,000 --> 00:01:48,000
If you can scroll down, you'll be able to see many other products like Kafka, Keycloak, Kibana,

24
00:01:48,000 --> 00:01:50,000
Cube prometheus, MongoDB,

25
00:01:51,000 --> 00:01:52,000
logstash.

26
00:01:52,000 --> 00:01:52,000
Mariadb.

27
00:01:52,000 --> 00:01:59,000
Similarly, you should be able to identify some helm charts related to MySQL, Nginx, Postgres database,

28
00:01:59,000 --> 00:02:00,000
Rabbitmq,

29
00:02:00,000 --> 00:02:01,000
Redis.

30
00:02:01,000 --> 00:02:04,000
So there are good amount of helm charts available.

31
00:02:04,000 --> 00:02:09,000
So based upon your requirements you can always leverage these Bitnami helm charts.

32
00:02:09,000 --> 00:02:15,000
As of now we leverage one of the helm chart which is wordpress while seeing demo of helm charts

33
00:02:15,000 --> 00:02:16,000
in the previous lectures.

34
00:02:16,000 --> 00:02:22,000
So in the same location we have many other helm charts and we are going to leverage them to set up required

35
00:02:22,000 --> 00:02:24,000
components inside our Kubernetes cluster.

36
00:02:24,000 --> 00:02:31,000
So to download these helm charts, what I can do is, I can go to the charts folder and here we have an

37
00:02:31,000 --> 00:02:34,000
option to download all these helm charts into local system.

38
00:02:34,000 --> 00:02:40,000
So I'm going to click on this download Zip option and this will download all the helm charts that are

39
00:02:40,000 --> 00:02:41,000
provided by the Bitnami.

40
00:02:41,000 --> 00:02:47,000
I can choose whatever I required and leverage them to install the components inside my Kubernetes cluster.

41
00:02:47,000 --> 00:02:53,000
Let me go to the downloads folder and look for the helm charts that we have downloaded. Inside my downloads

42
00:02:53,000 --> 00:02:53,000
folder,

43
00:02:53,000 --> 00:02:57,000
like you can see I have a folder with the name Bitnami.

44
00:02:57,000 --> 00:03:03,000
If I can open inside this, I have all the helm charts that are provided by the Bitnami.

45
00:03:03,000 --> 00:03:07,000
As a first step, I'm going to use the Keycloak Helm chart. For the same,

46
00:03:07,000 --> 00:03:12,000
let me search for Keycloak and here I have the helm charts related to Keycloak.

47
00:03:12,000 --> 00:03:17,000
Let me copy this and go to the location where we are mentioning all helm charts.

48
00:03:17,000 --> 00:03:23,000
So inside this folder only I'm going to paste the folder related to Keycloak Helm chart.

49
00:03:23,000 --> 00:03:29,000
Inside this Keycloak Helm chart we have all the required files like chart.yaml templates and values.yaml.

50
00:03:30,000 --> 00:03:36,000
If I try to run this Keycloak helm chart into my local Kubernetes cluster by default it is going to

51
00:03:36,000 --> 00:03:39,000
deploy my keycloak service with a cluster IP.

52
00:03:39,000 --> 00:03:46,000
But since I want to access my keyclock to create the client details and roles information, I'm going

53
00:03:46,000 --> 00:03:49,000
to expose my key clock service as a load balancer.

54
00:03:49,000 --> 00:03:55,000
So to change this behavior, we need to open the values.yaml present inside the keycloak helm chart.

55
00:03:55,000 --> 00:03:57,000
So let me open this file.

56
00:03:57,000 --> 00:04:00,000
Inside this file, like you can see, we have lot, many variables.

57
00:04:00,000 --> 00:04:07,000
So let me search for cluster IP because this is a default service type that keycloak helm chart is

58
00:04:07,000 --> 00:04:08,000
going to have.

59
00:04:08,000 --> 00:04:15,000
So here instead of cluster IP, I'm going to mention as LoadBalancer, once you have defined the service

60
00:04:15,000 --> 00:04:20,000
type as LoadBalancer, you can look for a variable with the name admin password.

61
00:04:20,000 --> 00:04:27,000
So as of now you can see my keycloak helm chart is going to create the admin credentials with the admin

62
00:04:27,000 --> 00:04:29,000
user as user and the admin password

63
00:04:29,000 --> 00:04:32,000
here it is mentioned as empty value.

64
00:04:32,000 --> 00:04:38,000
So whenever my admin password is empty behind the scenes, my keycloak helm chart is going to create

65
00:04:38,000 --> 00:04:41,000
a secret which will have some random password.

66
00:04:41,000 --> 00:04:44,000
So instead of that, what I can do here is, I can give my own password.

67
00:04:44,000 --> 00:04:51,000
So here I'm going to give the password as password itself so that we can login into the keycloak admin

68
00:04:51,000 --> 00:04:54,000
with the username as user and the password as password.

69
00:04:54,000 --> 00:04:57,000
So once we make these changes, we should be good.

70
00:04:57,000 --> 00:05:00,000
Let me go to that terminal. Inside my terminal,

71
00:05:00,000 --> 00:05:04,000
I'm going to install the helm chart of keycloak.For the same,

72
00:05:04,000 --> 00:05:09,000
let me go to the location where my key clock helm chart is available.

73
00:05:09,000 --> 00:05:11,000
So let me go back and inside the helm.

74
00:05:11,000 --> 00:05:14,000
I should have the keycloak folder from this folder location,

75
00:05:14,000 --> 00:05:21,000
I'm going to run a helm command, which is helm install and what is the name that you want to give for

76
00:05:21,000 --> 00:05:23,000
your keycloak installation.

77
00:05:23,000 --> 00:05:25,000
So I'll give the name as keycloak itself.

78
00:05:25,000 --> 00:05:31,000
So this is going to be the name of my release that I'm trying to install into my Kubernetes cluster

79
00:05:31,000 --> 00:05:33,000
with the help of keyclock helm chart.

80
00:05:33,000 --> 00:05:39,000
So once you have given some name to your release, you can mention what is the chart name or what is

81
00:05:39,000 --> 00:05:41,000
the folder name where your chart is present.

82
00:05:41,000 --> 00:05:44,000
So the folder name or the chart name is going to be keycloak itself.

83
00:05:44,000 --> 00:05:47,000
So let me try to execute this command.

84
00:05:47,000 --> 00:05:53,000
So if I try to run this command, it is saying my keycloak helm chart has some dependencies missing.

85
00:05:53,000 --> 00:05:54,000
So how to fix this,

86
00:05:54,000 --> 00:05:59,000
we need to run the helm dependencies, build a command inside my keycloak helm chart.

87
00:05:59,000 --> 00:06:01,000
So let me go to the keycloak helm chart.

88
00:06:01,000 --> 00:06:06,000
And inside this I'm going to run the command which is helm dependencies build.

89
00:06:06,000 --> 00:06:13,000
So this will compile all the dependencies and make sure they are available in a packaged format inside

90
00:06:13,000 --> 00:06:14,000
my keyclock helm chart.

91
00:06:14,000 --> 00:06:17,000
So finally the build is completed.

92
00:06:17,000 --> 00:06:23,000
I can now go back to the previous folder and from the helm folder I'm going to run the same command

93
00:06:23,000 --> 00:06:25,000
which is helm install keycloak, keycloak.

94
00:06:25,000 --> 00:06:27,000
So let me try to execute this.

95
00:06:27,000 --> 00:06:30,000
And behind the scenes you can see the installation is completed.

96
00:06:30,000 --> 00:06:36,000
And I also got an output saying that what are the steps that I can follow to access my keyclock URL?

97
00:06:36,000 --> 00:06:42,000
So if I try to run these commands, I should be able to get the URL using which I can access my keycloak

98
00:06:42,000 --> 00:06:43,000
URL.

99
00:06:43,000 --> 00:06:47,000
So let me copy this value and post that I can execute these commands.

100
00:06:47,000 --> 00:06:54,000
Here you can see I got an output saying that I can able to access my keycloak at the URL http and hostname.

101
00:06:54,000 --> 00:06:58,000
Since it is empty we can use localhost and the port is 80.

102
00:06:58,000 --> 00:07:02,000
And similarly, if we want to know what is the username and password, there is also instructions on

103
00:07:02,000 --> 00:07:04,000
how to know the username and password.

104
00:07:05,000 --> 00:07:06,000
You can try to take these commands.

105
00:07:07,000 --> 00:07:10,000
Let me try to clean the console and run the commands again.

106
00:07:10,000 --> 00:07:15,000
So the username is user and the password is going to be the password because inside the values.yaml

107
00:07:15,000 --> 00:07:18,000
we have provided the password as password itself.

108
00:07:18,000 --> 00:07:25,000
Please wait for 1 to 2 minutes for the LoadBalancer to get successfully created inside your local system.

109
00:07:25,000 --> 00:07:28,000
It is going to take easily 1 to 2 minutes at least. Post that

110
00:07:28,000 --> 00:07:33,000
you should be able to access the keycloak at the URL localhost 80.

111
00:07:33,000 --> 00:07:35,000
So let me try to access the same.

112
00:07:35,000 --> 00:07:37,000
So here I'm trying to access the URL.

113
00:07:37,000 --> 00:07:40,000
You can see I'm able to access my administration console.

114
00:07:40,000 --> 00:07:45,000
So let me click on that post that the username I'm going to enter as user and the password is going

115
00:07:45,000 --> 00:07:46,000
to be password.

116
00:07:46,000 --> 00:07:49,000
After entering the credentials, I'm clicking on the sign in button.

117
00:07:49,000 --> 00:07:52,000
I'll go to clients and here I'll try to create a new client.

118
00:07:52,000 --> 00:07:54,000
The client ID is going to be easybank-callcenter-cc

119
00:07:54,000 --> 00:07:56,000
.

120
00:07:56,000 --> 00:08:02,000
So let me click on this next post that I'll enable the client authentication and disable the standard

121
00:08:02,000 --> 00:08:06,000
flow and direct access grants and enable the service account roles.

122
00:08:06,000 --> 00:08:13,000
Let me click on this next save and I'll go to credentials, copy the secret value and I'll paste the

123
00:08:13,000 --> 00:08:15,000
same inside these postman.

124
00:08:15,000 --> 00:08:24,000
And also we should change this access token URL from 7080 port 280 because right now our health chart

125
00:08:24,000 --> 00:08:27,000
expose the keyclock service at the port 80.

126
00:08:27,000 --> 00:08:29,000
If I try to get an access token, it should work

127
00:08:29,000 --> 00:08:35,000
you can see I'm able to get an access token, but we cannot use this because as of now we have not created

128
00:08:35,000 --> 00:08:35,000
any roles.

129
00:08:35,000 --> 00:08:36,000
So that's why

130
00:08:36,000 --> 00:08:38,000
let me try to create some roles here.

131
00:08:38,000 --> 00:08:44,000
The first role I want to create is accounts post that I will create a role related to cards followed

132
00:08:44,000 --> 00:08:46,000
by loans.

133
00:08:46,000 --> 00:08:51,000
With this, I have created required roles, so let me go back to clients and open these easybank-callcenter-cc

134
00:08:51,000 --> 00:08:54,000
and go to the service account roles.

135
00:08:54,000 --> 00:09:00,000
And here I'm going to click on this assign role and assign all the required roles to my client application.

136
00:09:00,000 --> 00:09:07,000
Did you see how easy it is to set up a Keycloak server with the production standards by using Helm Chat?

137
00:09:07,000 --> 00:09:08,000
That's a power of helm chats.

138
00:09:08,000 --> 00:09:12,000
If you don't have helm charts, then definitely you need to prepare a lot

139
00:09:12,000 --> 00:09:14,000
many Kubernetes manifest files.

140
00:09:14,000 --> 00:09:19,000
I can also show you the template files, and with that you should be able to understand how complex

141
00:09:19,000 --> 00:09:23,000
to create and install Keycloak inside a production Kubernetes cluster.

142
00:09:23,000 --> 00:09:29,000
So here under the templates, you should be able to see lot many templates related to Kubernetes objects.

143
00:09:29,000 --> 00:09:33,000
So all these to create manually is going to be a super cumbersome process.

144
00:09:33,000 --> 00:09:39,000
On top of that, my keycloak also has dependency on other helm charts like Postgres because behind the

145
00:09:39,000 --> 00:09:44,000
scenes my keycloak is going to use Postgres database. As a next step,

146
00:09:44,000 --> 00:09:51,000
I want you to explain how we can derive the keycloak endpoint URL that we can feed to the other microservices.

147
00:09:51,000 --> 00:09:56,000
If you see here inside the values.yaml of all the environments we have mentioned, the keycloak URL

148
00:09:56,000 --> 00:09:59,000
as this is the host name, this is the port number.

149
00:09:59,000 --> 00:09:59,000
So

150
00:09:59,000 --> 00:10:03,000
how I know what is a hostname that I want to provide. For the same,

151
00:10:03,000 --> 00:10:09,000
if you try to look at the output console that we received from the helm installation command here,

152
00:10:09,000 --> 00:10:16,000
there is a important information saying that keycloak can be accessed to the following DNS name from

153
00:10:16,000 --> 00:10:17,000
within your cluster.

154
00:10:17,000 --> 00:10:24,000
So this is the DNS name that they have provided the same name I have mentioned inside the values.yaml

155
00:10:24,000 --> 00:10:26,000
of Environment helm chart.

156
00:10:26,000 --> 00:10:32,000
So when we try to give these URL details to Gateway Server, it should be able to easily connect because

157
00:10:32,000 --> 00:10:36,000
my gateway server also is going to be deployed in the same Kubernetes cluster.

158
00:10:36,000 --> 00:10:40,000
With this, we have successfully installed Keycloak with the helm charts.

159
00:10:40,000 --> 00:10:46,000
Similarly, we need to set up other components like Kafka and Grafana, Prometheus components.

160
00:10:46,000 --> 00:10:52,000
But before you try to do that, since we are going to do lot many installations into your Kubernetes

161
00:10:52,000 --> 00:10:58,000
cluster, it may not work inside your local system because you will have very less memory inside your

162
00:10:58,000 --> 00:10:59,000
local system.

163
00:10:59,000 --> 00:11:05,000
So to some extent we can try to overcome this challenge by changing some settings.

164
00:11:05,000 --> 00:11:10,000
For the same, we can go to the Docker desktop dashboard here, I can click on this settings.

165
00:11:10,000 --> 00:11:17,000
After that, I'll click on this resources Under this resources, try to increase the memory that you

166
00:11:17,000 --> 00:11:20,000
are trying to allocate to that Docker desktop. By default

167
00:11:20,000 --> 00:11:25,000
inside my system previously it was CPUs as 4 and memory as GB.8

168
00:11:25,000 --> 00:11:31,000
But with that default values I faced a lot many issues because the installations are very slow and the

169
00:11:31,000 --> 00:11:33,000
response from the microservices are also very slow.

170
00:11:33,000 --> 00:11:39,000
So to overcome this challenge I have increased the number of CPUs to 6 and the memory from 8GB

171
00:11:39,000 --> 00:11:40,000
to 12GB.

172
00:11:40,000 --> 00:11:45,000
So if there is a feasibility inside your local system, please do the same so that your installations

173
00:11:45,000 --> 00:11:46,000
will be fast.

174
00:11:46,000 --> 00:11:52,000
But inside production, this should not be a problem because inside cloud you will have some good amount

175
00:11:52,000 --> 00:11:54,000
of memory and CPUs for some reason.

176
00:11:54,000 --> 00:11:59,000
If your laptop is not cooperating, don't worry, we are going to do the same exercise in the cloud

177
00:11:59,000 --> 00:12:05,000
and during that time you can follow my instructions and do the deployment into the cloud environment.

178
00:12:05,000 --> 00:12:07,000
I hope this is clear.

179
00:12:07,000 --> 00:12:10,000
Thank you and I'll catch you in the next lecture bye.

