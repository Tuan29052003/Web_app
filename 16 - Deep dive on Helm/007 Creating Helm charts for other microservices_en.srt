1
00:00:00,000 --> 00:00:04,000
As of now, we created Helm Chat for Accounts Microservice only.

2
00:00:04,000 --> 00:00:10,000
As a next step, let's try to create the helm chat for the remaining microservices as well.

3
00:00:10,000 --> 00:00:10,000
For the same,

4
00:00:10,000 --> 00:00:16,000
this time I'm not going to follow the all the steps that we have followed in the previous lecture,

5
00:00:16,000 --> 00:00:22,000
but this time simply I will take the accounts helm chat and paste the same inside the same folder,

6
00:00:22,000 --> 00:00:30,000
and I will rename this to cards so that this helm chat is going to act as a helm chat for Cards Microservice.

7
00:00:30,000 --> 00:00:30,000
.

8
00:00:30,000 --> 00:00:35,000
So let me open this folder and inside this we'll have a chat.yaml file.

9
00:00:35,000 --> 00:00:37,000
So let's open the same.

10
00:00:37,000 --> 00:00:43,000
Here I want to change the name from accounts to cards and post that we don't need to make any other changes.

11
00:00:43,000 --> 00:00:45,000
we should be good. As a next step,

12
00:00:45,000 --> 00:00:52,000
let me open the values.yaml because templates we don't want to touch because those are generic and chats.

13
00:00:52,000 --> 00:00:57,000
Also we have the compiled version of Easy comman, so we should be good with that.

14
00:00:57,000 --> 00:01:04,000
Also, the chat dot log will be generated by the helm whenever you try to compile your helm chart.

15
00:01:04,000 --> 00:01:09,000
So for some reason, if you are getting some issues during the compilation, you can always remove these

16
00:01:09,000 --> 00:01:11,000
chat.log and try again.

17
00:01:11,000 --> 00:01:16,000
For now, we don't have to compile this cards microservice again because we already have the dependent

18
00:01:16,000 --> 00:01:20,000
charts available in the compressed format inside the chart folder.

19
00:01:20,000 --> 00:01:24,000
So as a next step, let me go and open the values.yaml.

20
00:01:24,000 --> 00:01:26,000
Here I'm going to change few values instead of accounts

21
00:01:26,000 --> 00:01:32,000
I'll just mention cards in all the places the same name is going to be referred by the template Yaml

22
00:01:32,000 --> 00:01:33,000
files.

23
00:01:33,000 --> 00:01:35,000
So replica account I'll keep it as one.

24
00:01:35,000 --> 00:01:41,000
Now coming to the image value, I'll just mention as easybytes cards and after the image name we should

25
00:01:41,000 --> 00:01:42,000
be fine with the tag value.

26
00:01:42,000 --> 00:01:44,000
Now coming to the container port

27
00:01:44,000 --> 00:01:47,000
we can mention this in all the places.

28
00:01:47,000 --> 00:01:51,000
So let me mention under the port target, port and service type

29
00:01:51,000 --> 00:01:54,000
I'm fine with the cluster IP. Now coming to the boolean values.

30
00:01:54,000 --> 00:01:59,000
We should be fine with all these boolean values except Kafka enabled.

31
00:01:59,000 --> 00:02:06,000
So since my cards microservice is not going to connect with the Kafka, I can keep this as false.

32
00:02:06,000 --> 00:02:10,000
So with this we are good from the Cards microservice perspective.

33
00:02:10,000 --> 00:02:16,000
Very similarly, I'm going to create all the remaining microservices specific helm charts by following

34
00:02:16,000 --> 00:02:18,000
the same steps that we have discussed.

35
00:02:18,000 --> 00:02:21,000
So let me do this behind the scenes very quickly.

36
00:02:21,000 --> 00:02:26,000
So here you can see I have created the helm charts related to all the remaining microservices.

37
00:02:26,000 --> 00:02:30,000
We know most of the stuff is same except the values.yaml.

38
00:02:30,000 --> 00:02:36,000
So let's try to understand what is present inside the values.yaml of all these microservices.

39
00:02:36,000 --> 00:02:40,000
So first I'll go to the config server and open the values.yaml.

40
00:02:40,000 --> 00:02:46,000
Here the deployment name is configserver-deployment and this is the service names app label app name

41
00:02:46,000 --> 00:02:47,000
and this is the image name.

42
00:02:47,000 --> 00:02:53,000
The port is going to be 8071 service type is going to be ClusterI,  coming to the Boolean values

43
00:02:53,000 --> 00:02:59,000
we don't need to provide any profile details to the config server because it is going to load the properties

44
00:02:59,000 --> 00:03:01,000
of all the profiles.

45
00:03:01,000 --> 00:03:06,000
The individual micro services need this property because based upon the activated profile they need

46
00:03:06,000 --> 00:03:10,000
to fetch the properties from the spring cloud config server.

47
00:03:10,000 --> 00:03:16,000
So config enabled also should be false because my config server does not need any URL details of config

48
00:03:16,000 --> 00:03:17,000
server.

49
00:03:17,000 --> 00:03:23,000
And very similarly eureka enabled also is going to be false, resource enabled as false, hotel enabled

50
00:03:23,000 --> 00:03:25,000
as true and Kafka enabled as false.

51
00:03:25,000 --> 00:03:31,000
As a next step, let me open the values.yaml present inside the Eureka Server helm chart.

52
00:03:31,000 --> 00:03:32,000
Here Also the story is same,

53
00:03:32,000 --> 00:03:36,000
you are going to mention all the values which are specific to the Eureka Server.

54
00:03:36,000 --> 00:03:40,000
So the container port is going to be 8070.

55
00:03:40,000 --> 00:03:43,000
Now coming to the Boolean values app name is going to be true,

56
00:03:43,000 --> 00:03:45,000
profile enabled is going to be false,

57
00:03:45,000 --> 00:03:50,000
Config enabled is going to be true, Eureka enabled is going to be false

58
00:03:50,000 --> 00:03:53,000
and similarly resource server enabled is going to be false,

59
00:03:53,000 --> 00:03:57,000
otel enabled is going to be true and Kafka enabled is going to be false.

60
00:03:57,000 --> 00:04:01,000
Now let me open the values.yaml of Gateway Server.

61
00:04:01,000 --> 00:04:07,000
So under the Gateway server this time we can directly check what are there present inside this boolean

62
00:04:07,000 --> 00:04:13,000
values you will be able to see for Gateway server Resource server enabled is going to be true because

63
00:04:13,000 --> 00:04:18,000
this is the only microservice which is going to act as a resource server inside our microservice.

64
00:04:18,000 --> 00:04:24,000
And at the same time, since we want these to be exposed to the outside client applications, I have

65
00:04:24,000 --> 00:04:27,000
mentioned the service type as LoadBalancer.

66
00:04:27,000 --> 00:04:28,000
I hope this is clear.

67
00:04:28,000 --> 00:04:34,000
Now let me open the value.yaml of loans microservice inside the loans microservice.

68
00:04:34,000 --> 00:04:40,000
This is going to be very similar to cards and accounts microservice except the port number which is

69
00:04:40,000 --> 00:04:43,000
8090 and the image name which is loans itself.

70
00:04:43,000 --> 00:04:50,000
And at last we can also open the values.yaml present inside the message microservice.

71
00:04:50,000 --> 00:04:55,000
My message, microservice is built based upon the spring cloud functions and spring cloud stream.

72
00:04:55,000 --> 00:05:00,000
For that reason we don't have to pass profile details, config server details, Eureka server details

73
00:05:00,000 --> 00:05:06,000
and that's why I have mentioned these values as false and otel enabled also false

74
00:05:06,000 --> 00:05:09,000
but Kafka enabled is going to be true.

75
00:05:09,000 --> 00:05:15,000
The port number where we are going to start these message microservices is at the value 9010.

76
00:05:15,000 --> 00:05:16,000
So I hope you are clear with this.

77
00:05:16,000 --> 00:05:22,000
This way we have created helm chart for all the remaining microservices and we don't have to compile

78
00:05:22,000 --> 00:05:26,000
them again because the Dependent Charts folder are already available.

79
00:05:26,000 --> 00:05:32,000
If you try to recompile again, the recompilation will happen and you will get the same compressed file

80
00:05:32,000 --> 00:05:34,000
by replacing the older one.

81
00:05:34,000 --> 00:05:37,000
We can try the same for one of the microservice helm chart.

82
00:05:37,000 --> 00:05:43,000
So let me go to the microservice helm chart and inside this I'm going to run the command helm dependencies

83
00:05:43,000 --> 00:05:49,000
build and here you can see I got an successful message saying that it deleted the outdated charts and

84
00:05:49,000 --> 00:05:51,000
replaced with a new one.

85
00:05:51,000 --> 00:05:56,000
But like I said, there is no need of recompiling again because we are going to use the same easybank

86
00:05:56,000 --> 00:06:01,000
common helm chart which we have compiled inside the accounts Microservice.

87
00:06:01,000 --> 00:06:06,000
Here you may have a question like we are doing a lot of manual efforts to creating these helm charts,

88
00:06:06,000 --> 00:06:09,000
but you said this is going to make our life easy.

89
00:06:09,000 --> 00:06:13,000
So please note that that this is a one time activity

90
00:06:13,000 --> 00:06:19,000
only once you set up your helm ecosystem, this is going to make your life super, super easy.

91
00:06:19,000 --> 00:06:23,000
As of now, you can see we have created the required helm chart for our microservices.

92
00:06:23,000 --> 00:06:29,000
But if I go with this setup, I need to install all these helm charts manually one by one, like accounts,

93
00:06:29,000 --> 00:06:31,000
cards, config server.

94
00:06:31,000 --> 00:06:32,000
I don't want to do that.

95
00:06:32,000 --> 00:06:39,000
That's why I'm going to create one more helm chart specific to an environment and inside that environment

96
00:06:39,000 --> 00:06:45,000
specific helm chart, I'm going to define all the config map related values along with the dependencies

97
00:06:45,000 --> 00:06:49,000
on these microservice helm charts that we have created inside this lecture.

98
00:06:49,000 --> 00:06:54,000
So don't worry if something is not clear how all these helm charts are going to be interlinked.

99
00:06:54,000 --> 00:06:58,000
When we see the demo, then it is going to make more sense to you.

100
00:06:58,000 --> 00:07:00,000
Thank you and I'll catch you in the next lecture bye.

