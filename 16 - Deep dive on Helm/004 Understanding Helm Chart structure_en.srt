1
00:00:00,000 --> 00:00:05,000
Inside this lecture, let's try to understand what is the helm chart structure.

2
00:00:05,000 --> 00:00:11,000
Any time you try to create your own helm chart or you try to use the third party helm chart, it is

3
00:00:11,000 --> 00:00:14,000
going to follow the predefined structure.

4
00:00:14,000 --> 00:00:16,000
So let's try to understand the same.

5
00:00:16,000 --> 00:00:18,000
Like you can see here on the left hand side.

6
00:00:18,000 --> 00:00:22,000
First we'll be having the folder with the name of the helm chart.

7
00:00:22,000 --> 00:00:26,000
In the previous lecture we installed the chart with the name wordpress.

8
00:00:26,000 --> 00:00:32,000
Using the same name, a parent folder will be created inside this parent folder

9
00:00:32,000 --> 00:00:33,000
wordpress.

10
00:00:33,000 --> 00:00:37,000
We are going to have two Yaml files and two different sub folders.

11
00:00:37,000 --> 00:00:40,000
So let's try to understand about each of them.

12
00:00:40,000 --> 00:00:46,000
The very first Yaml file we are going to have inside the wordpress folder is chart.yaml.

13
00:00:46,000 --> 00:00:51,000
So this chart.yaml file is going to have meta information about the helm chart.

14
00:00:51,000 --> 00:00:53,000
Like what is the chart version?

15
00:00:53,000 --> 00:01:00,000
So all such kind of meta information about the chart itself is going to be maintained inside this chart.yaml.

16
00:01:00,000 --> 00:01:00,000
.

17
00:01:00,000 --> 00:01:05,000
The next yaml file is values.yaml. Inside the values.yaml,

18
00:01:05,000 --> 00:01:12,000
we need to maintain all the dynamic values that we want to inject at runtime into the template files

19
00:01:12,000 --> 00:01:16,000
and after these files are going to have two subfolders.

20
00:01:16,000 --> 00:01:18,000
The very first sub folder is charts.

21
00:01:18,000 --> 00:01:25,000
So inside this charts folder we will have other helm charts which my current chart is dependent on and

22
00:01:25,000 --> 00:01:27,000
post that under the template sub folder.

23
00:01:27,000 --> 00:01:34,000
We are going to maintain all the required Kubernetes manifest template Yaml files so into this template

24
00:01:34,000 --> 00:01:36,000
Yaml files only at runtime

25
00:01:36,000 --> 00:01:43,000
my helm chart is going to inject all the dynamic values that we have mentioned inside the values.yaml.

26
00:01:43,000 --> 00:01:43,000
.

27
00:01:43,000 --> 00:01:49,000
So let's try to validate the same helm chart structure by exploring the wordpress helm chart that we

28
00:01:49,000 --> 00:01:51,000
have created in the previous lecture.

29
00:01:51,000 --> 00:01:58,000
So here, like you can see the parent folder name is wordpress because our helm chart name itself is

30
00:01:58,000 --> 00:01:58,000
wordpress.

31
00:01:58,000 --> 00:02:04,000
So if you go to into this folder, we are going to have all the files that we have discussed.

32
00:02:04,000 --> 00:02:11,000
You can ignore the files with the name helmignore,Chat.lock and values.schema.json.

33
00:02:11,000 --> 00:02:16,000
So those are the files which are going to be maintained by the helm and they are not going to have any

34
00:02:16,000 --> 00:02:20,000
impact on us and we also don't have to create them manually.

35
00:02:20,000 --> 00:02:24,000
So here let's explore the very first file which is chart.yaml.

36
00:02:24,000 --> 00:02:30,000
So if I try to open this with sublime text here, I have all the details like about my helm chart.

37
00:02:31,000 --> 00:02:32,000
Like what is the API version?

38
00:02:32,000 --> 00:02:33,000
What is the app version?

39
00:02:33,000 --> 00:02:36,000
What are the dependencies that my helm chart has?

40
00:02:36,000 --> 00:02:42,000
So right now my helm chart has dependency on other helm charts with the name Memcache, Mariadb and

41
00:02:42,000 --> 00:02:43,000
common.

42
00:02:43,000 --> 00:02:48,000
And similarly there is a description about this helm chart like wordpress is the world's most popular

43
00:02:48,000 --> 00:02:53,000
blogging and content management platform, so this is the description of the helm chart.

44
00:02:53,000 --> 00:02:59,000
And similarly, we have other metadata information like who is going to maintain them and what is the

45
00:02:59,000 --> 00:03:02,000
source of this helm chart and what is the version of this helm chart.

46
00:03:02,000 --> 00:03:05,000
So all these details are available here.

47
00:03:05,000 --> 00:03:08,000
So these are all related to the metadata information about the helm chart.

48
00:03:08,000 --> 00:03:12,000
The next file we can explore is values.yaml.

49
00:03:12,000 --> 00:03:15,000
So let me also open the values.yaml file.

50
00:03:15,000 --> 00:03:21,000
So the values.yaml file will have all the dynamic values required for the templates that we have inside

51
00:03:21,000 --> 00:03:22,000
the helm chart.

52
00:03:22,000 --> 00:03:24,000
So these are all the key and value pairs.

53
00:03:24,000 --> 00:03:27,000
And there are some values, there are some empty values.

54
00:03:27,000 --> 00:03:31,000
So all these values are going to be injected at runtime by the helm.

55
00:03:31,000 --> 00:03:37,000
So here you can see they have given the Docker image details using which the deployment is going to

56
00:03:37,000 --> 00:03:38,000
happen.

57
00:03:38,000 --> 00:03:40,000
So here we have good amount of values.

58
00:03:40,000 --> 00:03:46,000
So all these values are going to be used by the helm chart at runtime to prepare the Kubernetes manifest

59
00:03:46,000 --> 00:03:50,000
files based upon the templates that we have inside the templates folder.

60
00:03:50,000 --> 00:03:56,000
So now if you go and observe the charts folder inside this will be having all the dependent chart

61
00:03:56,000 --> 00:03:56,000
details.

62
00:03:56,000 --> 00:04:03,000
So right now my chart is dependent on three other charts with the name common, mariadb and memcached.

63
00:04:03,000 --> 00:04:09,000
So if you try to open any of these chart, they again will have the structure of helm chart because

64
00:04:09,000 --> 00:04:12,000
at the end of the day, this mariadb also is a helm chart.

65
00:04:12,000 --> 00:04:18,000
So now if you go back to the parent folder here, we can go inside that templates folder, inside the

66
00:04:18,000 --> 00:04:25,000
templates folder, you can see we have that template files for all kind of required Kubernetes manifest

67
00:04:25,000 --> 00:04:25,000
files.

68
00:04:25,000 --> 00:04:31,000
Since we want to do the deployment of our microservices, there is a deployment related template file

69
00:04:31,000 --> 00:04:33,000
with the name deployment.yaml.

70
00:04:33,000 --> 00:04:34,000
We can try to open the same.

71
00:04:34,000 --> 00:04:43,000
So here I'm going to open the templates folder and open the deployment.yaml. Inside this deployment.yaml

72
00:04:43,000 --> 00:04:49,000
file you can see there is a template by following the standards of Kubernetes manifest file for the

73
00:04:49,000 --> 00:04:50,000
kind deployment.

74
00:04:50,000 --> 00:04:57,000
Apart from the Kubernetes manifest file syntax, they are also trying to inject a lot many runtime dynamic

75
00:04:57,000 --> 00:05:00,000
values that they have defined inside these

76
00:05:00,000 --> 00:05:01,000
values.yaml file.

77
00:05:01,000 --> 00:05:09,000
So please note that these values.yaml file will have values for all kind of template files apart from

78
00:05:09,000 --> 00:05:10,000
deployment.yaml template file.

79
00:05:10,000 --> 00:05:13,000
We also have many other template files.

80
00:05:13,000 --> 00:05:19,000
So all these template files they are going to refer for the values defined inside these values.yaml.

81
00:05:19,000 --> 00:05:20,000
.

82
00:05:20,000 --> 00:05:25,000
With this, I'm assuming your super clear about the structure of the helm charts, but as of now you

83
00:05:25,000 --> 00:05:32,000
can see we installed a third party helm chart which is already readily available. For our microservices

84
00:05:32,000 --> 00:05:35,000
do you think a helm chart will be readily available?

85
00:05:35,000 --> 00:05:36,000
Off course not.

86
00:05:36,000 --> 00:05:42,000
We should build our own helm chart by following our own business requirements and Kubernetes manifest

87
00:05:42,000 --> 00:05:43,000
files.

88
00:05:43,000 --> 00:05:50,000
Once we build a helm chart, we can deploy all our microservices using the same with a single command.

89
00:05:50,000 --> 00:05:56,000
Always, we just need to maintain the values.yaml file for different, different environments for based

90
00:05:56,000 --> 00:05:57,000
upon our requirements.

91
00:05:57,000 --> 00:06:02,000
So as a next step, we need to create our own helm chart related to easy bank.

92
00:06:02,000 --> 00:06:09,000
Before that, let me try to uninstall the wordpress related helm chart because it is already occupying

93
00:06:09,000 --> 00:06:11,000
good amount of memory inside my Kubernetes cluster.

94
00:06:11,000 --> 00:06:14,000
I no more need these wordpress helm chart.

95
00:06:14,000 --> 00:06:18,000
So before I try to uninstall, I'm going to run the command which is helm ls.

96
00:06:18,000 --> 00:06:25,000
So this is going to show you the list of installations that we have done with the help of Helm.

97
00:06:25,000 --> 00:06:27,000
Like you can see here, we got an output.

98
00:06:27,000 --> 00:06:30,000
The name of the release is going to be Happy Panda.

99
00:06:30,000 --> 00:06:36,000
And this is installed inside the default namespace and its revision is one and status is deployed and

100
00:06:36,000 --> 00:06:40,000
the chart that we have used is wordpress and so on and so version and post that

101
00:06:40,000 --> 00:06:47,000
we also have app version and this app version comes from the metadata information available inside that

102
00:06:47,000 --> 00:06:48,000
chart.yaml.

103
00:06:48,000 --> 00:06:54,000
So whatever this app version we are able to see here, this belongs to the wordpress app, but whatever

104
00:06:54,000 --> 00:06:57,000
version you see here, this belongs to the helm chart.

105
00:06:57,000 --> 00:07:03,000
So here we are using the wordpress helm chart with the version 17 .1.4.

106
00:07:03,000 --> 00:07:09,000
With this helm chart, we are trying to deploy a wordpress website which has a version of 6.3.1.

107
00:07:09,000 --> 00:07:15,000
So this app version information we can maintain inside the chart yaml you can go and check inside the

108
00:07:15,000 --> 00:07:18,000
chart.yaml you will be able to see this version number.

109
00:07:18,000 --> 00:07:25,000
So now I have only one release installed with the help of helm and the same I want to uninstall.

110
00:07:25,000 --> 00:07:27,000
So what is the command to uninstall?

111
00:07:27,000 --> 00:07:28,000
It is going to be super easy.

112
00:07:28,000 --> 00:07:32,000
helm uninstall and what is your release name?

113
00:07:32,000 --> 00:07:37,000
The release name that we have given here is happy - panda.

114
00:07:37,000 --> 00:07:40,000
So as soon as I execute this, the Uninstallation will complete.

115
00:07:40,000 --> 00:07:47,000
Now if I go and check my Kubernetes dashboard here you can see there are no workloads to display inside

116
00:07:47,000 --> 00:07:48,000
my dashboard.

117
00:07:48,000 --> 00:07:53,000
I can confirm by going to the deployment there are no deployments, there are no pods, there is no

118
00:07:53,000 --> 00:07:56,000
replicaset and similarly, all services are deleted.

119
00:07:56,000 --> 00:08:02,000
And now I can also confirm inside the config maps those config maps related to wordpress are deleted

120
00:08:02,000 --> 00:08:05,000
and the same I can confirm under the secrets as well.

121
00:08:05,000 --> 00:08:11,000
So with a single helm uninstall command, I'm able to uninstall my entire wordpress website.

122
00:08:11,000 --> 00:08:13,000
So that is the power of helm chart.

123
00:08:13,000 --> 00:08:19,000
So let's try to adopt this helm chart for our Eazy Bytes Microservices.

124
00:08:19,000 --> 00:08:20,000
I hope this is all clear to you.

125
00:08:20,000 --> 00:08:23,000
Thank you and I'll catch you in the next lecture bye.

