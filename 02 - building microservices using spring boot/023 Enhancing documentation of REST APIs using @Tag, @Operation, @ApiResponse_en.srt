1
00:00:00,000 --> 00:00:01,000
In this lecture,

2
00:00:01,000 --> 00:00:05,000
let's try to enhance our documentation of REST APIs further.

3
00:00:05,000 --> 00:00:10,000
So as of now, you can see I'm showing a AccountsController, which is a technical name, and there

4
00:00:10,000 --> 00:00:15,000
is no description about all the APIs that I have under this controller.

5
00:00:15,000 --> 00:00:19,000
So you can see if I click on this, all the APIs will be closed.

6
00:00:19,000 --> 00:00:24,000
And very similarly, if I can open these, I'll have more details about each of the REST APIs.

7
00:00:24,000 --> 00:00:30,000
So if you have multiple controllers, you can close all of them like these and you can open and it is

8
00:00:30,000 --> 00:00:35,000
your responsibility to provide some good information about what is the purpose of the REST

9
00:00:35,000 --> 00:00:40,000
APIs that you have hosted under this controller are under this section, so let's try to enhance this

10
00:00:40,000 --> 00:00:41,000
further.

11
00:00:41,000 --> 00:00:46,000
For the same, you need to go to the AccountsController class where we have this REST APIs.

12
00:00:46,000 --> 00:00:51,000
So here in order to provide some information which is specific to all the APIs present inside this controller

13
00:00:51,000 --> 00:00:56,000
class, we need to use an annotation which is @Tag.

14
00:00:56,000 --> 00:00:58,000
So let me try to use the same.

15
00:00:58,000 --> 00:01:02,000
So this annotation is also present inside the package of swagger and open APIs

16
00:01:02,000 --> 00:01:03,000
Spring Dock.

17
00:01:03,000 --> 00:01:04,000
So let me use this.

18
00:01:04,000 --> 00:01:12,000
And to this we can pass name using this name can provide some basic summary about all the APIs present

19
00:01:12,000 --> 00:01:14,000
inside this controller class.

20
00:01:14,000 --> 00:01:21,000
So here I'm just mentioning a summary saying that crud REST APIs for accounts in EasyBank.

21
00:01:21,000 --> 00:01:23,000
So this is what I want to provide here.

22
00:01:23,000 --> 00:01:24,000
Post that,

23
00:01:24,000 --> 00:01:26,000
we can also provide a description.

24
00:01:26,000 --> 00:01:28,000
So let me try to provide a description here.

25
00:01:28,000 --> 00:01:33,000
The description that I'm trying to mention here is crud REST APIs in EasyBank to create, update,

26
00:01:33,000 --> 00:01:35,000
fetch and delete account details.

27
00:01:35,000 --> 00:01:37,000
So now this makes sense to me.

28
00:01:37,000 --> 00:01:39,000
Let me save this changes.

29
00:01:39,000 --> 00:01:40,000
Do a build. with that,

30
00:01:40,000 --> 00:01:44,000
the rest API documentation also will get reflected inside my swaggerUI.

31
00:01:45,000 --> 00:01:49,000
So as of now you can see you are seeing only AccountsController, which is a technical name.

32
00:01:49,000 --> 00:01:55,000
So if I try to refresh this page, you'll be able to see a beautiful name and description.

33
00:01:55,000 --> 00:01:58,000
This is more professional to the clients so they can easily understand.

34
00:01:58,000 --> 00:02:04,000
Under this section I have four REST APIs and the purpose of these four APIs are to handle the create

35
00:02:04,000 --> 00:02:07,000
update, fetch and delete operations.

36
00:02:07,000 --> 00:02:11,000
So now we provided a documentation about the controller layer.

37
00:02:11,000 --> 00:02:16,000
Similarly, we can also provide information at each api level.

38
00:02:16,000 --> 00:02:17,000
What is this API is supposed to do?

39
00:02:17,000 --> 00:02:18,000
What is the summary?

40
00:02:18,000 --> 00:02:19,000
What is the description?

41
00:02:19,000 --> 00:02:25,000
So all such information we can also mention for the same, we need to go to the method where we have

42
00:02:25,000 --> 00:02:29,000
developed these API inside the controller here, inside this class.

43
00:02:29,000 --> 00:02:34,000
First, I'm going to provide documentation for my post API, which is create.

44
00:02:34,000 --> 00:02:37,000
So the annotation that we need to use here is @Operation.

45
00:02:37,000 --> 00:02:44,000
Since this is a API operation, we need to use this annotation and to this annotation first, we need

46
00:02:44,000 --> 00:02:48,000
to invoke summary, which is a parameter inside this annotation.

47
00:02:48,000 --> 00:02:55,000
And to this summary I'm going to mention something like Create Account REST API.

48
00:02:55,000 --> 00:02:55,000
Post this,

49
00:02:55,000 --> 00:03:00,000
we can also mention what is the description about this operation or API.

50
00:03:00,000 --> 00:03:06,000
So the description that I want to mention here, REST API to create new Customer and Account inside

51
00:03:06,000 --> 00:03:07,000
EasyBank.

52
00:03:07,000 --> 00:03:11,000
This will give more details to my client applications or end users.

53
00:03:11,000 --> 00:03:14,000
So now let me save this changes to a build here.

54
00:03:14,000 --> 00:03:19,000
As of now you can see for the post API nothing is visible like we're just showing the path.

55
00:03:19,000 --> 00:03:26,000
If I try to refresh this page this time you'll be able to see more information about my API.

56
00:03:26,000 --> 00:03:31,000
This is a summary like createAccount REST API and this is the description that we have mentioned and

57
00:03:31,000 --> 00:03:35,000
we also have good details about RequestBody coming to the Response,

58
00:03:35,000 --> 00:03:42,000
you can see it is always going to show you default 200 and okay with the default of schema value that

59
00:03:42,000 --> 00:03:46,000
we have inside the ResponseDto, which is status code and status message.

60
00:03:46,000 --> 00:03:54,000
But here inside the code we are returning a 201 and different message, which is specific to 201.

61
00:03:54,000 --> 00:03:58,000
So how should we communicate this information to the REST API Documentation?

62
00:03:58,000 --> 00:04:03,000
For the same, we can use one more annotation which is @ApiResponse.

63
00:04:03,000 --> 00:04:10,000
And to this ApiResponse annotation, we can pass response code using this response code I'm going to

64
00:04:10,000 --> 00:04:17,000
mention 201 which will override the default value of 200 that we are seeing inside the documentation.

65
00:04:17,000 --> 00:04:21,000
Post that we can also mention a description about this 201.

66
00:04:21,000 --> 00:04:25,000
So this 201 indicates HttpStatus.CREATED.

67
00:04:25,000 --> 00:04:27,000
So with this we should be good.

68
00:04:27,000 --> 00:04:28,000
Let me save this changes.

69
00:04:28,000 --> 00:04:29,000
Do a build.

70
00:04:29,000 --> 00:04:34,000
Once the build is completed, I'm going to refresh this page and this time you can see the response

71
00:04:34,000 --> 00:04:35,000
is also accurate

72
00:04:35,000 --> 00:04:41,000
like I'm going to return a status as 201 and description as HttpStatus.CREATED.

73
00:04:41,000 --> 00:04:46,000
And this is the application Json schema format like status code and status message.

74
00:04:46,000 --> 00:04:47,000
So this makes sense.

75
00:04:47,000 --> 00:04:49,000
We enhance this post API.

76
00:04:49,000 --> 00:04:52,000
Similarly, let's try to enhance other APIs that we have.

77
00:04:52,000 --> 00:04:58,000
So just to save some time here, let me try to pay some annotations here so that we can discuss quickly.

78
00:04:58,000 --> 00:05:00,000
You can also get this code from GitHub.

79
00:05:00,000 --> 00:05:06,000
So for this fetch, you can see I have used the same operation and the ApiResponse under which I have

80
00:05:06,000 --> 00:05:10,000
mentioned the summary, description, responseCode and description.

81
00:05:10,000 --> 00:05:14,000
So very similarly we can mention details for update as well.

82
00:05:14,000 --> 00:05:19,000
So for update I'm also pasting the code like under operation there will be a summary with the value

83
00:05:19,000 --> 00:05:26,000
Update Account Details REST API and there is also a description. Now coming to the update operation.

84
00:05:26,000 --> 00:05:29,000
We are going to return two types of responses.

85
00:05:29,000 --> 00:05:33,000
If you see the code here, if the boolean is true, we are going to return 200.

86
00:05:33,000 --> 00:05:35,000
Otherwise we are going to return 500.

87
00:05:35,000 --> 00:05:41,000
So how do we communicate these kind of multiple responses possible inside documentation. For the same

88
00:05:41,000 --> 00:05:42,000
It's going to be super simple.

89
00:05:42,000 --> 00:05:49,000
You need to use @ApiResponses, which is a plural form of ApiResponse annotation, and

90
00:05:49,000 --> 00:05:56,000
inside this plural form annotation we can pass any number of API response annotation which are separated

91
00:05:56,000 --> 00:05:57,000
by comma.

92
00:05:57,000 --> 00:06:01,000
So please make sure you are using these structure and syntax.

93
00:06:01,000 --> 00:06:07,000
So here I have created two annotations for one for 200 and the second one for 500.

94
00:06:07,000 --> 00:06:10,000
Now let me do the same for delete operation as well.

95
00:06:10,000 --> 00:06:14,000
So here I'm pasting some lines of code like using operation,

96
00:06:14,000 --> 00:06:21,000
I'm mentioning what is a summary in description and for ApiResponses I have defined 205 hundred just

97
00:06:21,000 --> 00:06:22,000
like for update operation.

98
00:06:22,000 --> 00:06:26,000
So with this we have provided all the details inside our APIs.

99
00:06:26,000 --> 00:06:29,000
So let me save this changes do a build.

100
00:06:29,000 --> 00:06:32,000
Once the build is completed, I can go to the swagger UI.

101
00:06:32,000 --> 00:06:37,000
So here I'm going to refresh this page and you can see all of my APIs,

102
00:06:37,000 --> 00:06:42,000
they have a summary and if I try to open any of them like update REST API, you can, you will be able

103
00:06:42,000 --> 00:06:49,000
to see a description and under responses here you can see I have two different responses, one for 200

104
00:06:49,000 --> 00:06:51,000
and the second one is for 500.

105
00:06:51,000 --> 00:06:55,000
So this will give an heads up to my clients and developers or testers.

106
00:06:55,000 --> 00:07:00,000
These are the possible responses that you may get and accordingly develop your business logic.

107
00:07:00,000 --> 00:07:04,000
So we have enhanced our APIs as well.

108
00:07:04,000 --> 00:07:08,000
But as a next step, we should also enhance our schema objects,

109
00:07:08,000 --> 00:07:14,000
like as of now we're displaying technical name, which is accounts and there is no sample or example

110
00:07:14,000 --> 00:07:15,000
data.

111
00:07:15,000 --> 00:07:21,000
If I provide some example data, the same will be reflected inside my operations

112
00:07:21,000 --> 00:07:26,000
also, as of now you can see the example name is coming as String, which is indicates to my Customers

113
00:07:26,000 --> 00:07:33,000
and clients that you are supposed to send a String value, but it will be nice if you give an actual

114
00:07:33,000 --> 00:07:38,000
name as an example that will make more clear to them.

115
00:07:38,000 --> 00:07:41,000
So let's try to enhance the schema object in the next lecture.

116
00:07:41,000 --> 00:07:44,000
Thank you and I'll catch you in the next lecture bye.

