1
00:00:00,000 --> 00:00:05,000
As of now, we completed the development of 
Accounts Microservice.

2
00:00:05,000 --> 00:00:11,000
And inside this Microservice we have built 4 different type of REST APIs in the same process.

3
00:00:11,000 --> 00:00:16,000
We have used many annotations provided by the Spring boot framework inside this lecture.

4
00:00:16,000 --> 00:00:22,000
Let me revise all those annotations very quickly so that you have these annotations at Handy.

5
00:00:22,000 --> 00:00:27,000
Since I'm going to share these slides with you in a PDF format, you can always refer them whenever

6
00:00:27,000 --> 00:00:33,000
you are going for an interview or whenever you are trying to build REST services with these annotations.

7
00:00:33,000 --> 00:00:37,000
The very first annotation that we have used is 
RestController.

8
00:00:37,000 --> 00:00:44,000
Whenever we try to build REST APIs with the help of Java methods and Http annotations like 

9
00:00:44,000 --> 00:00:50,000
@GetMapping, @PostMapping, we need to make sure we are putting  @RestController

10
00:00:50,000 --> 00:00:51,000
on top of the class.

11
00:00:51,000 --> 00:00:58,000
This way we are communicating to the Spring boot framework to expose all your Java methods as a REST

12
00:00:58,000 --> 00:00:58,000
APIs.

13
00:00:58,000 --> 00:01:02,000
You will be seeing some people they will not use 
@RestController.

14
00:01:02,000 --> 00:01:06,000
Instead they will use @Controller annotation.

15
00:01:06,000 --> 00:01:12,000
If you ever be in a scenario where inside your Controller you want to write both REST APIs and spring

16
00:01:12,000 --> 00:01:18,000
MVC related methods, then mentioning RestController is not a good option.

17
00:01:18,000 --> 00:01:24,000
Instead, you should mention @Controller annotation on top of your class and whatever Java

18
00:01:24,000 --> 00:01:31,000
methods which you want to expose with the help of  REST APIs on top of them, you can mention response

19
00:01:31,000 --> 00:01:32,000
body annotation.

20
00:01:32,000 --> 00:01:38,000
So a combination of Controller annotation and 
ResponseBody annotation will provide the same behavior

21
00:01:38,000 --> 00:01:39,000
of RestController.

22
00:01:39,000 --> 00:01:44,000
The next important annotation that you need to aware is @ResponseBody.

23
00:01:44,000 --> 00:01:45,000
Like we discussed,

24
00:01:45,000 --> 00:01:51,000
whenever you are into a scenario where you are using the @Controller annotation on top of your

25
00:01:51,000 --> 00:01:57,000
Java class, you need to mention these  @ResponseBody annotation to tell to the spring boot

26
00:01:57,000 --> 00:02:03,000
framework that you are expecting the response to be in a Json format but not in the spring MVC style

27
00:02:03,000 --> 00:02:06,000
like HTML format or any other UI format.

28
00:02:06,000 --> 00:02:12,000
Since we don't have any Java methods which we are trying to expose with the help of Spring MVC pattern,

29
00:02:12,000 --> 00:02:18,000
we didn't use this ResponseBody annotation and   @Controller annotation instead we used 

30
00:02:18,000 --> 00:02:20,000
@RestController annotation.

31
00:02:20,000 --> 00:02:26,000
Moving on to the next important component whenever you are trying to build REST services is 

32
00:02:26,000 --> 00:02:26,000
ResponseEntity.

33
00:02:26,000 --> 00:02:31,000
This is not a annotation, this is a class available inside the spring framework.

34
00:02:31,000 --> 00:02:38,000
Whenever you are trying to send all kind of information like headers, status and body inside the response

35
00:02:38,000 --> 00:02:44,000
to your clients, then it is a good idea to use this ResponseEntity and this class will have these

36
00:02:44,000 --> 00:02:46,000
generics with the help of these generics.

37
00:02:46,000 --> 00:02:52,000
We need to tell what type of object that I'm going to send inside my ResponseBody.

38
00:02:52,000 --> 00:02:57,000
If you are sending customer information, we need to mention the customer DTO and similarly you can

39
00:02:57,000 --> 00:03:03,000
mention any type of object whenever you are trying to mention this ResponseEntity in the return type

40
00:03:03,000 --> 00:03:09,000
of your Java method, The next important component that you need to aware is @ControllerAdvice

41
00:03:09,000 --> 00:03:16,000
annotation using this annotation along with the ExceptionHandler annotation, we can write global

42
00:03:16,000 --> 00:03:17,000
exception logic.

43
00:03:17,000 --> 00:03:23,000
Whatever logic you have written inside a Java method that is annotated with @ExceptionHandler

44
00:03:23,000 --> 00:03:26,000
and tag that too against a exception type.

45
00:03:26,000 --> 00:03:32,000
Then, whenever that exception occurs inside your controller layer, the logic that you have written

46
00:03:32,000 --> 00:03:35,000
inside this ExceptionHandler methods will get executed.

47
00:03:35,000 --> 00:03:41,000
So to activate that behavior, we need to make sure we are using @ControllerAdvice annotation.

48
00:03:41,000 --> 00:03:46,000
We have another similar annotation also with the name
@RestControllerAdvice.

49
00:03:46,000 --> 00:03:48,000
You can use this as well.

50
00:03:48,000 --> 00:03:53,000
This RestControllerAdvice annotation is a combination of 
@ControllerAdvice

51
00:03:53,000 --> 00:03:55,000
and @ResponseBody.

52
00:03:55,000 --> 00:03:59,000
Just like how we have the relationship between 
RestController and Controller.

53
00:03:59,000 --> 00:04:05,000
The same relationship works here between the 
ControllerAdvice and the RestControllerAdvice annotations.

54
00:04:05,000 --> 00:04:10,000
In our scenario, I have used @ControllerAdvice and it worked perfectly.

55
00:04:10,000 --> 00:04:17,000
But if you ever into a scenario where you want strictly your exception methods return the Json as an

56
00:04:17,000 --> 00:04:22,000
output, then please feel free to use 
@RestControllerAdvice,

57
00:04:22,000 --> 00:04:25,000
as of now, for me it worked perfectly inside our 

58
00:04:25,000 --> 00:04:26,000
AccountsMicroservice

59
00:04:26,000 --> 00:04:30,000
With the help of ControllerAdvice, I'm able to achieve my functionality perfectly.

60
00:04:30,000 --> 00:04:34,000
That's why I have not used this @RestControllerAdvice.

61
00:04:34,000 --> 00:04:37,000
Even if you use this, you will get the same behavior.

62
00:04:37,000 --> 00:04:43,000
The next important class that we have here is 
RequestEntity, just like how we have ResponseEntity.

63
00:04:43,000 --> 00:04:46,000
Very similarly, we can also use this RequestEntity.

64
00:04:46,000 --> 00:04:52,000
Whenever you have a scenario where you want to receive both requestBody and requestHeader as a

65
00:04:52,000 --> 00:04:54,000
method parameter inside your REST APIs.

66
00:04:54,000 --> 00:05:00,000
We have not used this inside our Microservice because we don't have a scenario where we want the 

67
00:05:00,000 --> 00:05:01,000
requestHeader and requestBody.

68
00:05:01,000 --> 00:05:06,000
We always had a scenario where we want only 
requestBody but not the requestHeaders.

69
00:05:06,000 --> 00:05:08,000
That's why I have not used this.

70
00:05:08,000 --> 00:05:13,000
But if you ever have such scenarios, feel free to use the RequestEntity.

71
00:05:13,000 --> 00:05:19,000
Once you receive this RequestEntity object, you as a developer can extract all the requestHeaders

72
00:05:19,000 --> 00:05:23,000
and the requestBody post that you can execute your business logic.

73
00:05:23,000 --> 00:05:28,000
The next set of annotations that we have here is @RequestHeader and  

74
00:05:28,000 --> 00:05:28,000
@RequestBody.

75
00:05:28,000 --> 00:05:35,000
Using these individual annotations, you can receive a header inside the request as a method parameter,

76
00:05:35,000 --> 00:05:39,000
or you can also receive the entire request body as a method parameter.

77
00:05:39,000 --> 00:05:40,000
I hope this is clear.

78
00:05:40,000 --> 00:05:47,000
Please make a note of all these important annotations and classes that supports building REST services.

79
00:05:47,000 --> 00:05:49,000
So these are very, very important.

80
00:05:49,000 --> 00:05:55,000
If you go to any interview, they can simply ask you a question like how you are going to build REST

81
00:05:55,000 --> 00:05:56,000
APIs with the help of Springboot.

82
00:05:56,000 --> 00:06:02,000
In such scenarios, you can take these annotations and important classes and try to explain them as

83
00:06:02,000 --> 00:06:03,000
a sequence.

84
00:06:03,000 --> 00:06:04,000
First, I will create a class.

85
00:06:04,000 --> 00:06:09,000
On top of that, I'll mention other RestController class post that I'll create Java methods.

86
00:06:09,000 --> 00:06:15,000
On top of them, I'll keep the annotations like GetMapping, PostMapping followed by We'll use this

87
00:06:15,000 --> 00:06:19,000
RequestEntity, RequestHeader, RequestBody,
ResponseEntity.

88
00:06:19,000 --> 00:06:24,000
And once I have written all the business logic, I can also define the global exception logic.

89
00:06:24,000 --> 00:06:28,000
With the help of this ControllerAdvisor, annotation and ExceptionHandler annotation.

90
00:06:28,000 --> 00:06:35,000
So if you try to explain this as a flow and as a story, definitely your answer will impress the interviewer.

91
00:06:35,000 --> 00:06:39,000
That's why always have these annotations and classes handy.

92
00:06:39,000 --> 00:06:43,000
They'll also help you whenever you are trying to develop Microservices or REST services.

93
00:06:43,000 --> 00:06:44,000
I hope this is clear.

94
00:06:44,000 --> 00:06:48,000
Thank you and I'll catch you in the next lecture bye.

