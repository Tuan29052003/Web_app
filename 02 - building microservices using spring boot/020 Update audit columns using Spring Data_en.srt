1
00:00:00,000 --> 00:00:02,000
In all the tables of AccountsMicroservices

2
00:00:02,000 --> 00:00:09,000
we are maintaining these four metadata columns which will tell us when a record is created

3
00:00:09,000 --> 00:00:12,000
by whom and when it is updated and by whom.

4
00:00:12,000 --> 00:00:18,000
As of now, we are manually updating these CREATED_AT and CREATED_BY and there is a pending defect also

5
00:00:18,000 --> 00:00:24,000
where we are not updating these UPDATED_AT and UPDATED_BY whenever an update operation is happening.

6
00:00:24,000 --> 00:00:30,000
With the help of Spring Data JPA, we can update these metadata columns automatically, which means

7
00:00:30,000 --> 00:00:36,000
we can give this responsibility to the spring data JPA because anyway, the framework is going to take

8
00:00:36,000 --> 00:00:42,000
care of creating all the insert scripts, update scripts or delete scripts or select scripts, all kind

9
00:00:42,000 --> 00:00:43,000
of SQL scripts

10
00:00:43,000 --> 00:00:47,000
right now, everything is in the control of Spring data JPA framework.

11
00:00:47,000 --> 00:00:52,000
We have not written any single SQL query inside our application. Since spring Data

12
00:00:52,000 --> 00:00:57,000
JPA is taking care of all SQL interactions and database interactions.

13
00:00:57,000 --> 00:01:02,000
We can hand over this responsibility of updating these four metadata columns. And spring data

14
00:01:02,000 --> 00:01:05,000
JPA also support these auditing feature.

15
00:01:05,000 --> 00:01:11,000
So in order to achieve these auditing by spring data JPA first we need to go to the entity class where

16
00:01:11,000 --> 00:01:13,000
we have these four metadata columns.

17
00:01:13,000 --> 00:01:18,000
So inside this BaseEntity we are mentioning these four metadata columns.

18
00:01:18,000 --> 00:01:26,000
So here on top of these createdAt, we need to mention an annotation which is CreatedDate and very

19
00:01:26,000 --> 00:01:34,000
similarly on top of createdBy we need to mention an annotation which is CreatedBy and on top of updated

20
00:01:34,000 --> 00:01:42,000
at field we need to mention an annotation which is LastModifiedDate and for updatedBy

21
00:01:42,000 --> 00:01:46,000
also we need to mention an annotation which is LastModifiedBy.

22
00:01:47,000 --> 00:01:51,000
So these are the four annotations supported by the spring data framework itself.

23
00:01:51,000 --> 00:01:53,000
With these annotations we are telling to the spring framework.

24
00:01:53,000 --> 00:02:00,000
Whenever you see these fields inside a table or an entity, please make sure you are updating the date

25
00:02:00,000 --> 00:02:04,000
time based upon when the record is being updated or inserted.

26
00:02:04,000 --> 00:02:09,000
The same applies for last modified date as well, and with the help of createdBy and last modified

27
00:02:09,000 --> 00:02:15,000
by, we are telling to the Spring data JPA framework like who is trying to create or update the records

28
00:02:15,000 --> 00:02:16,000
inside the database table.

29
00:02:16,000 --> 00:02:18,000
But here there is a problem.

30
00:02:18,000 --> 00:02:23,000
My spring data framework can get that date time from the server or from the local system.

31
00:02:23,000 --> 00:02:27,000
How about who is creating or who is updating that data?

32
00:02:27,000 --> 00:02:28,000
It does not have any clue.

33
00:02:28,000 --> 00:02:32,000
For the same, we need to write a small logic in order to write the small logic.

34
00:02:32,000 --> 00:02:36,000
Let me create a new package with the name audit.

35
00:02:36,000 --> 00:02:42,000
So inside this audit package I'm going to create a new class with the name AuditAwareImpl.

36
00:02:43,000 --> 00:02:43,000
.

37
00:02:43,000 --> 00:02:45,000
So this is the class that I want to create.

38
00:02:45,000 --> 00:02:54,000
And this class should extend a class called AuditorAware since our createdBy and updatedBy are of

39
00:02:54,000 --> 00:02:58,000
type String, we need to make sure we are mentioning this String here.

40
00:02:58,000 --> 00:03:03,000
So whenever we extend this class we need to override a method so for the same, let me click on this

41
00:03:03,000 --> 00:03:05,000
more actions and implement methods.

42
00:03:05,000 --> 00:03:08,000
So this is the method that I need to implement.

43
00:03:08,000 --> 00:03:10,000
The method is getCurrentAuditor().

44
00:03:10,000 --> 00:03:15,000
So I need to write a logic inside this method to make sure I am returning

45
00:03:15,000 --> 00:03:22,000
who is the current auditor so that my spring data JPA framework can leverage it to update the createdBy

46
00:03:22,000 --> 00:03:24,000
and updatedBy whenever is needed.

47
00:03:24,000 --> 00:03:26,000
I think this is an interface.

48
00:03:26,000 --> 00:03:30,000
We should use implements here, so let me use the implements.

49
00:03:30,000 --> 00:03:33,000
So now inside this method I'm going to write a small logic.

50
00:03:33,000 --> 00:03:40,000
The logic is instead of returning a empty value, I'm going to return an hardcoded value which is

51
00:03:40,000 --> 00:03:41,000
ACCOUNTS_MS.

52
00:03:42,000 --> 00:03:43,000
MS means micro service.

53
00:03:43,000 --> 00:03:48,000
So this is the value that I want to be considered by the Spring Data JPA framework whenever it is trying

54
00:03:48,000 --> 00:03:55,000
to populate the columns createdBy and updatedBy later on when we integrate our micro services with

55
00:03:55,000 --> 00:04:02,000
the Spring security framework to enforce security on micro services, I'll be showing you how to populate

56
00:04:02,000 --> 00:04:08,000
the logged in user or logged in client application till to the point we integrate to the spring security

57
00:04:08,000 --> 00:04:08,000
framework.

58
00:04:08,000 --> 00:04:11,000
We need to continue with this hardcoded value.

59
00:04:11,000 --> 00:04:17,000
So now I need to make sure that I'm mentioning @Component annotation on top of this and giving

60
00:04:17,000 --> 00:04:18,000
a name AuditAwareImpl.

61
00:04:19,000 --> 00:04:21,000
So this is a bean name that I want to consider.

62
00:04:21,000 --> 00:04:23,000
This name can be anything.

63
00:04:23,000 --> 00:04:25,000
I'm just trying to match with this class name.

64
00:04:25,000 --> 00:04:31,000
So once we define this component, we need to go to the BaseEntity and here we need to mention an annotation

65
00:04:31,000 --> 00:04:34,000
which is @EntityListeners.

66
00:04:34,000 --> 00:04:42,000
And to this annotation I need to pass a class name which is AuditingEntityListener.class.

67
00:04:42,000 --> 00:04:46,000
So this is a class present inside the spring data framework.

68
00:04:46,000 --> 00:04:52,000
Now we have established all the details in order to perform the auditing by the Spring data framework.

69
00:04:52,000 --> 00:04:57,000
As a last step, we need to activate this feature provided by the Spring Data Framework.

70
00:04:57,000 --> 00:05:00,000
For the same, we need to go to the main class, which is

71
00:05:00,000 --> 00:05:08,000
application after the spring boot application, we need to mention an annotation which is @EnableJpaAuditing

72
00:05:08,000 --> 00:05:11,000
and using this EnableAuditing annotation.

73
00:05:11,000 --> 00:05:17,000
We need to invoke the param which is AuditorAwareRef to this AuditorAwareRef.

74
00:05:17,000 --> 00:05:24,000
We need to pass the bean name of the AuditoAwrae I am, so I need to take this post that I need to

75
00:05:24,000 --> 00:05:24,000
mention.

76
00:05:24,000 --> 00:05:25,000
The same here.

77
00:05:25,000 --> 00:05:27,000
This way we are telling to the spring boot framework.

78
00:05:27,000 --> 00:05:34,000
Please activate the JPAAuditing and please leverage the bean with the name audit aware to understand

79
00:05:34,000 --> 00:05:35,000
the current auditor.

80
00:05:35,000 --> 00:05:41,000
And apart from that, inside the BaseEntity we already mentioned these annotations like entity listeners

81
00:05:41,000 --> 00:05:45,000
createdAt, createdBy, lastModifiedDate and lastModifiedBy.

82
00:05:45,000 --> 00:05:45,000
So we are good.

83
00:05:45,000 --> 00:05:51,000
As a next step, we can go to the AccountServiceImpl and delete the manual code where we are trying to

84
00:05:51,000 --> 00:05:54,000
populate these createdAt and createdBy.

85
00:05:54,000 --> 00:05:55,000
So this is the place

86
00:05:55,000 --> 00:05:58,000
I have written two lines of code, so let me remove that.

87
00:05:58,000 --> 00:06:01,000
And very similarly here also I have two lines of code.

88
00:06:01,000 --> 00:06:02,000
I'm just removing them.

89
00:06:02,000 --> 00:06:05,000
I'm saving the code and doing a build.

90
00:06:05,000 --> 00:06:08,000
I'll go to the postman and try to test these changes.

91
00:06:08,000 --> 00:06:12,000
First, I'll try to create a new record.

92
00:06:12,000 --> 00:06:17,000
So let me validate my database tables now so you can see first I'm trying to run the accounts related

93
00:06:17,000 --> 00:06:23,000
and as of now you can see createdBy these ACOUNTS_MS  and this is the date.

94
00:06:23,000 --> 00:06:25,000
And let me check for customer as well.

95
00:06:25,000 --> 00:06:27,000
The same is being updated right now.

96
00:06:27,000 --> 00:06:32,000
So as a next step, we can validate whether this is happening for updated columns as well.

97
00:06:32,000 --> 00:06:40,000
For the same, what we have to do is first we need to fetch the account details with the fetch operation.

98
00:06:40,000 --> 00:06:41,000
So these are the account details.

99
00:06:41,000 --> 00:06:48,000
So let me take this response and mention inside the RequestBody of the update account details and instead

100
00:06:48,000 --> 00:06:50,000
of ready, I'll mention Mohan.

101
00:06:50,000 --> 00:06:55,000
And very similarly, instead of one, two, three, I'll mention one, two, four.

102
00:06:55,000 --> 00:06:57,000
Now let me click on this send button.

103
00:06:57,000 --> 00:06:59,000
You can see the operation is successful.

104
00:06:59,000 --> 00:07:00,000
I can go to the database now.

105
00:07:00,000 --> 00:07:06,000
I'm trying to rerun this query and you can see the updatedBy and updatedAt is automatically coming.

106
00:07:06,000 --> 00:07:09,000
The same will happen for accounts as well.

107
00:07:09,000 --> 00:07:11,000
So this is working perfectly.

108
00:07:11,000 --> 00:07:17,000
So we right now gave the responsibility of auditing to the spring data framework.

109
00:07:17,000 --> 00:07:24,000
This is great and this is one of the standard that you can also follow inside your REST APIs and microservices.

110
00:07:24,000 --> 00:07:27,000
I hope you are clear about what we have done inside this lecture.

111
00:07:27,000 --> 00:07:30,000
Thank you and I'll catch you in the next lecture bye.

