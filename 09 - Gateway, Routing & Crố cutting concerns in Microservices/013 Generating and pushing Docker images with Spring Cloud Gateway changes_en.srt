1
00:00:00,000 --> 00:00:06,000
As of now, we developed the Edge server for our microservices network and we tested everything inside

2
00:00:06,000 --> 00:00:08,000
the local system. As a next step,

3
00:00:08,000 --> 00:00:14,000
let's try to build the Docker images for all the projects that we have inside the Section9.

4
00:00:14,000 --> 00:00:20,000
Post that we can update the Docker compose file and test all the Edge server or gateway related changes using

5
00:00:20,000 --> 00:00:21,000
Docker containers.

6
00:00:21,000 --> 00:00:27,000
So here, before I try to generate the Docker images, I want to enable the health related and readiness

7
00:00:27,000 --> 00:00:32,000
and liveliness related URLs inside my accounts, loans and cards

8
00:00:32,000 --> 00:00:33,000
microservice.

9
00:00:33,000 --> 00:00:38,000
The reason is when we are trying to update the Docker compose file for this section9, we need to

10
00:00:38,000 --> 00:00:45,000
define the dependencies for our gateway server saying that only once my accounts, cards and loans microservice

11
00:00:45,000 --> 00:00:49,000
started and their health is good, then only try to start the gateway server.

12
00:00:49,000 --> 00:00:55,000
For that reason we need to add the properties related to the health probes inside the accounts, loans

13
00:00:55,000 --> 00:00:56,000
and cards.

14
00:00:56,000 --> 00:00:59,000
We already defined these properties inside the config server.

15
00:00:59,000 --> 00:01:02,000
If you can open the application.yml of config server.

16
00:01:02,000 --> 00:01:09,000
Here we have properties where we are trying to enable the health related APIs which are available inside

17
00:01:09,000 --> 00:01:10,000
the actuator.

18
00:01:10,000 --> 00:01:15,000
So let me copy these properties and I'll go to the accounts application.yml.

19
00:01:15,000 --> 00:01:21,000
Here I'm going to paste the properties just after the endpoints in the same portion where we have these endpoints.

20
00:01:21,000 --> 00:01:23,000
After pasting these properties,

21
00:01:23,000 --> 00:01:28,000
similarly, I should also enable the health related probes under the endpoint.

22
00:01:28,000 --> 00:01:31,000
So let me go to the accounts application.yml.

23
00:01:31,000 --> 00:01:38,000
We have endpoint here and at this endpoint I'm going to add the properties related to health probes

24
00:01:38,000 --> 00:01:39,000
enabled as true.

25
00:01:39,000 --> 00:01:44,000
So we need to make very similar changes inside the cards microservice as well.

26
00:01:44,000 --> 00:01:49,000
So inside my application.yml first let me try to add the properties under the endpoint.

27
00:01:49,000 --> 00:01:54,000
Just after the shutdown, I'm going to mention the health probes enabled as true.

28
00:01:54,000 --> 00:02:00,000
After that I'm going to copy the other properties which we can mention under the management.

29
00:02:00,000 --> 00:02:06,000
So let me copy these properties and go to the cards application.yml under the management

30
00:02:06,000 --> 00:02:11,000
after endpoints, I'm going to paste the same properties which are related to health.

31
00:02:11,000 --> 00:02:15,000
So with these we should be good from cards microservice perspective.

32
00:02:15,000 --> 00:02:18,000
Let me go to the application.yml of loans microservice.

33
00:02:18,000 --> 00:02:23,000
So here under the management, just after the endpoints, I'm going to paste the properties related

34
00:02:23,000 --> 00:02:30,000
to health readiness and liveness readiness. Next under the endpoint just after the shutdown enabled as

35
00:02:30,000 --> 00:02:35,000
true, I'm going to mention the properties related to the health probes.

36
00:02:35,000 --> 00:02:41,000
By copying these values from cards microservice and pasting them inside the loans

37
00:02:41,000 --> 00:02:41,000
microservice.

38
00:02:41,000 --> 00:02:43,000
With this we should be good.

39
00:02:43,000 --> 00:02:44,000
Let me save this changes.

40
00:02:44,000 --> 00:02:51,000
Do a build and I'm going to stop all the local running instances. Before we try to generate the Docker

41
00:02:51,000 --> 00:02:52,000
images

42
00:02:52,000 --> 00:03:00,000
please check your pom.xml and make sure the tag name has S9 for all your microservices. Because we want

43
00:03:00,000 --> 00:03:05,000
to generate the Docker images which are specific to section9 and inside your Docker desktop

44
00:03:05,000 --> 00:03:11,000
also, please make sure there are no existing images related to your microservices.

45
00:03:11,000 --> 00:03:17,000
As of now, you can see I don't have any eazybytes related Docker images and there are no containers

46
00:03:17,000 --> 00:03:17,000
as well.

47
00:03:17,000 --> 00:03:18,000
Now

48
00:03:18,000 --> 00:03:19,000
I came to my terminal.

49
00:03:19,000 --> 00:03:24,000
As of now you can see I have opened the terminal inside my section9 folder.

50
00:03:24,000 --> 00:03:30,000
As a next step, I'll navigate into the folder accounts and inside this accounts I have a pom.xml.

51
00:03:30,000 --> 00:03:31,000
At this location

52
00:03:31,000 --> 00:03:38,000
I'm going to run the command which is maven compile followed by Jib:dockerBuild.

53
00:03:38,000 --> 00:03:40,000
Please make sure B is capital letter.

54
00:03:40,000 --> 00:03:47,000
So if I try to run this command a docker image of accounts microservice will be generated.

55
00:03:47,000 --> 00:03:49,000
Please wait a couple of seconds here.

56
00:03:49,000 --> 00:03:52,000
Now the Docker image of accounts microservice is generated.

57
00:03:52,000 --> 00:03:58,000
Let me clean the console and navigate back to the parent folder and post that I'm going to navigate

58
00:03:58,000 --> 00:03:59,000
into the loans project.

59
00:03:59,000 --> 00:04:02,000
And here also I'm going to run the same command.

60
00:04:02,000 --> 00:04:05,000
This will generate the Docker image of loans microservice.

61
00:04:05,000 --> 00:04:09,000
Once this is complete, I'm going to follow the same instructions again.

62
00:04:09,000 --> 00:04:14,000
After running the clear command, I'm going to navigate to the parent folder and post that

63
00:04:14,000 --> 00:04:20,000
I'll go inside the cards folder and run the same command which is maven compiled jib:dockerBuild.

64
00:04:20,000 --> 00:04:26,000
Since we are using the jib, it is generating the Docker images very quickly, whereas for Buildpacks

65
00:04:26,000 --> 00:04:32,000
it is going to take good amount of time, like at least one minute it will take to generate each Docker

66
00:04:32,000 --> 00:04:32,000
image.

67
00:04:32,000 --> 00:04:38,000
So let me go back to the parent folder and navigate to the config server and run the same command,

68
00:04:38,000 --> 00:04:44,000
which is maven compile jib:dockerBuild. Once the config server Docker image is generated.

69
00:04:44,000 --> 00:04:51,000
Now, as a next step, we can go back to the parent folder and navigate back into the Eureka Server.

70
00:04:51,000 --> 00:04:53,000
So here also I'm going to run the same command.

71
00:04:53,000 --> 00:04:56,000
So please try to remember these maven related commands.

72
00:04:56,000 --> 00:04:58,000
These are going to be very handful for you.

73
00:04:58,000 --> 00:04:59,000
The same commands i have 

74
00:04:59,000 --> 00:05:06,000
mentioned inside the GitHub repo as well. As a next step, let me go into the gateway server and

75
00:05:06,000 --> 00:05:12,000
for the gateway server I'm going to generate the Docker image with the help of Maven Command.

76
00:05:12,000 --> 00:05:14,000
In total we have generated 6 Docker images.

77
00:05:14,000 --> 00:05:20,000
We can also confirm the same by running the command, which is Docker images.

78
00:05:20,000 --> 00:05:27,000
So you can see there are 6 Docker images with the tag S9 123456.

79
00:05:27,000 --> 00:05:30,000
You can also confirm the same by checking inside the Docker desktop.

80
00:05:30,000 --> 00:05:37,000
So under the images, if you search for images with the tag S9, you should be able to see total 6

81
00:05:37,000 --> 00:05:39,000
docker images. As a next step,

82
00:05:39,000 --> 00:05:44,000
let me push all these Docker images into my Docker hub repository.

83
00:05:44,000 --> 00:05:51,000
The command that we need to use to push the Docker images is, docker image push docker.io.

84
00:05:51,000 --> 00:05:53,000
What is your Docker username.

85
00:05:53,000 --> 00:06:00,000
In my case it is eazybytes followed by what is your Docker image name, for example for accounts microservice

86
00:06:00,000 --> 00:06:05,000
the Docker image name is going to be accounts: and the tag name is S9.

87
00:06:05,000 --> 00:06:11,000
If I try to execute this command, my accounts microservice docker image will be pushed into my Docker

88
00:06:11,000 --> 00:06:12,000
hub.

89
00:06:12,000 --> 00:06:18,000
I will try to push the remaining Docker images into the Docker hub by the time I come into the next

90
00:06:18,000 --> 00:06:23,000
lecture, but I'm assuming you are already familiar with all these Docker image generation process and

91
00:06:23,000 --> 00:06:25,000
Docker image push process.

92
00:06:25,000 --> 00:06:30,000
So please feel free to run these commands inside your local system and make sure you are generating

93
00:06:30,000 --> 00:06:36,000
the Docker images at regular milestones so that in future, whenever you want to test a specific section

94
00:06:36,000 --> 00:06:39,000
related changes, it is going to be super easy for you.

95
00:06:39,000 --> 00:06:42,000
Thank you and I'll catch you in the next lecture bye.

