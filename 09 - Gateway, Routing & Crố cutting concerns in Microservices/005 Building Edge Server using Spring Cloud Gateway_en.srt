1
00:00:00,000 --> 00:00:06,000
Now inside this lecture, let's try to create a edge server or a API gateway with the help of Spring

2
00:00:06,000 --> 00:00:08,000
Cloud Gateway for the same.

3
00:00:08,000 --> 00:00:13,000
Since we are into a new section inside my workspace, I want to create a folder with the name section

4
00:00:13,000 --> 00:00:18,000
nine, inside which I will try to make all the code changes related to the API gateway.

5
00:00:18,000 --> 00:00:25,000
Here I can copy this section eight related folder and paste the same inside the same folder location.

6
00:00:25,000 --> 00:00:30,000
After pasting the same folder here, I'm going to rename this to section nine.

7
00:00:30,000 --> 00:00:36,000
Once I rename this folder, I can go inside and look for any hidden folder, especially the folder with

8
00:00:36,000 --> 00:00:40,000
the name dot idea, which is related to the IntelliJ Idea.

9
00:00:40,000 --> 00:00:46,000
So let me delete this folder so that we can open this entire folder section nine into the IntelliJ Idea.

10
00:00:46,000 --> 00:00:53,000
Before that, first let me create a simple spring boot skeleton project with all the required dependencies

11
00:00:53,000 --> 00:00:59,000
for my gateway server here inside the Start.spring.io, you can see I'm going with the Maven project

12
00:00:59,000 --> 00:01:03,000
language as Java and going with the default selected spring boot version.

13
00:01:03,000 --> 00:01:09,000
And apart from that, I have filled the group as com dot easy bytes and Artifact and name as Gateway

14
00:01:09,000 --> 00:01:14,000
server, followed by what is the description package name and the packaging as jar.

15
00:01:14,000 --> 00:01:17,000
And at last I selected the Java 17 version.

16
00:01:17,000 --> 00:01:23,000
If you are also creating project along with me, please make sure you also entered the same exact details

17
00:01:23,000 --> 00:01:29,000
so that it will be easy for you to compare your code with mine in case of any issues.

18
00:01:29,000 --> 00:01:35,000
And right now, while I'm recording this video, the latest stable spring boot version we have is 3.1.2.

19
00:01:35,000 --> 00:01:41,000
Like I said before, if you find latest version while you are creating, feel free to select the same.

20
00:01:41,000 --> 00:01:45,000
I'm going to update the code inside the GitHub repo every quarter.

21
00:01:45,000 --> 00:01:48,000
After entering these details, let me try to add the required dependencies.

22
00:01:48,000 --> 00:01:51,000
The very first dependency that we need to add is gateway.

23
00:01:51,000 --> 00:01:53,000
So just search for gateway.

24
00:01:53,000 --> 00:01:58,000
So this is the starter project which will help us to build the gateway server based upon the Spring

25
00:01:58,000 --> 00:02:00,000
Cloud Gateway project.

26
00:02:00,000 --> 00:02:05,000
Let me select this after this, since we want our gateway to connect with the Eureka server to fetch

27
00:02:05,000 --> 00:02:11,000
all the service registry details of other microservices, we need to make sure we are selecting the

28
00:02:11,000 --> 00:02:14,000
Eureka Discovery client dependency.

29
00:02:14,000 --> 00:02:16,000
So let me add this as well.

30
00:02:16,000 --> 00:02:20,000
The next dependency that I want to add is related to the config client.

31
00:02:20,000 --> 00:02:26,000
Since we want our gateway server to connect with the config server and load all the configurations related

32
00:02:26,000 --> 00:02:31,000
to the gateway server during the startup, we need to make sure we are adding the dependency related

33
00:02:31,000 --> 00:02:33,000
to config client after these dependencies.

34
00:02:33,000 --> 00:02:40,000
Next, we need to add the actuator, which will help me to expose certain actuator related APIs.

35
00:02:40,000 --> 00:02:46,000
And at last I'll also add the dev tools, which will help me to improve my productivity with faster

36
00:02:46,000 --> 00:02:46,000
restarts.

37
00:02:46,000 --> 00:02:48,000
With these dependencies, we should be good.

38
00:02:48,000 --> 00:02:55,000
Let me click on this generate button, which will generate a new Maven project and download into my

39
00:02:55,000 --> 00:02:56,000
local system.

40
00:02:56,000 --> 00:03:01,000
Let me take the downloaded package and paste inside my workspace location.

41
00:03:01,000 --> 00:03:01,000
Here.

42
00:03:01,000 --> 00:03:07,000
Inside my section nine folder I have pasted that generated and downloaded Gateway Server project.

43
00:03:07,000 --> 00:03:12,000
So let me double click on that so that it will get extracted into the same location.

44
00:03:12,000 --> 00:03:14,000
I have a folder with the name gateway server.

45
00:03:14,000 --> 00:03:17,000
With that I can remove this dot zip file here.

46
00:03:17,000 --> 00:03:22,000
As a next step, I'll go to my IntelliJ Idea and try to import all the projects present inside this

47
00:03:22,000 --> 00:03:23,000
section nine.

48
00:03:23,000 --> 00:03:28,000
Here inside my IntelliJ Idea, I'm going to click on this open button and go to the workspace folder

49
00:03:28,000 --> 00:03:33,000
location like storage workspaces Micro services section nine.

50
00:03:33,000 --> 00:03:36,000
After that I'm going to click on this open button.

51
00:03:36,000 --> 00:03:40,000
This will try to load all the Maven project present inside this section nine folder.

52
00:03:40,000 --> 00:03:44,000
So to complete this process I need to click on this load button.

53
00:03:44,000 --> 00:03:50,000
With that, all my Maven projects present inside this section nine will be detected by the IntelliJ

54
00:03:50,000 --> 00:03:51,000
Idea.

55
00:03:51,000 --> 00:03:54,000
Before I try to get started with the gateway server related changes.

56
00:03:54,000 --> 00:03:57,000
First, let me open the palm Dot XML.

57
00:03:57,000 --> 00:04:02,000
Inside this palm Dot XML, we need to make sure we are adding the plugin related to the Google Jib.

58
00:04:02,000 --> 00:04:08,000
That will help us to generate the Docker image of this gateway server application.

59
00:04:08,000 --> 00:04:12,000
For the same we can go to any of the micro services.

60
00:04:12,000 --> 00:04:17,000
So inside my accounts palm dot XML, I'm going to scroll down and towards the end I'm going to have

61
00:04:17,000 --> 00:04:18,000
a plugin.

62
00:04:18,000 --> 00:04:18,000
Details.

63
00:04:18,000 --> 00:04:24,000
Before I try to copy this plugin details, I'm going to change the tag name from s I to S nine.

64
00:04:24,000 --> 00:04:28,000
So let me save this changes and load the maven changes.

65
00:04:28,000 --> 00:04:34,000
After this I'm going to copy the plugin details and paste the same inside my gateway server palm Dot

66
00:04:34,000 --> 00:04:34,000
XML.

67
00:04:34,000 --> 00:04:37,000
So with this we should be good with the gateway server.

68
00:04:37,000 --> 00:04:44,000
As a next step, I'll go and change the tag name in all other microservices like inside Cots Micro Service,

69
00:04:44,000 --> 00:04:48,000
we need to change the tag name from S eight to S nine.

70
00:04:48,000 --> 00:04:51,000
So let me do the same for config server.

71
00:04:51,000 --> 00:04:59,000
Also inside the config server I'm going to change this to SC2S9, followed by Eureka server inside Eureka.

72
00:05:00,000 --> 00:05:00,000
So what?

73
00:05:00,000 --> 00:05:06,000
I'm going to change the tag name from s I to S nine and load the Mavin changes.

74
00:05:06,000 --> 00:05:11,000
And after the Eureka server I'll open the loans microservice Pom.xml.

75
00:05:11,000 --> 00:05:15,000
And here towards the end I'm going to change the tag name.

76
00:05:15,000 --> 00:05:15,000
With this.

77
00:05:15,000 --> 00:05:17,000
We should be good with all the palm dot XML.

78
00:05:18,000 --> 00:05:22,000
So let me do a build and enable the annotation processing.

79
00:05:22,000 --> 00:05:24,000
Now I'll close all my files here.

80
00:05:24,000 --> 00:05:31,000
As a next step, we need to define certain configurations inside the application dot yaml file off gateway

81
00:05:31,000 --> 00:05:31,000
server.

82
00:05:31,000 --> 00:05:37,000
So instead of typing all these properties again we can go to any of the micro services like accounts

83
00:05:37,000 --> 00:05:41,000
micro Service and open the application dot Yaml file.

84
00:05:41,000 --> 00:05:41,000
Here.

85
00:05:41,000 --> 00:05:47,000
Let's try to copy all these properties and we can delete unnecessary properties while we are trying

86
00:05:47,000 --> 00:05:51,000
to mention the same inside the application dot Yaml off gateway server.

87
00:05:51,000 --> 00:05:57,000
But here, before we try to paste the properties, we need to rename the application dot properties

88
00:05:57,000 --> 00:05:59,000
to application dot yaml file.

89
00:05:59,000 --> 00:06:01,000
So that's what I'm trying to do here.

90
00:06:01,000 --> 00:06:07,000
Now I'm going to paste all the properties that we have copied from the accounts micro service here.

91
00:06:07,000 --> 00:06:14,000
Let's try to analyze each property and decide whether a particular property is needed or not for a gateway

92
00:06:14,000 --> 00:06:14,000
server.

93
00:06:14,000 --> 00:06:19,000
So sour dot port I want to maintain inside the config server.

94
00:06:19,000 --> 00:06:21,000
So that's why I want to remove this here.

95
00:06:21,000 --> 00:06:24,000
And after this spring dot application dot name we need.

96
00:06:24,000 --> 00:06:28,000
But instead of accounts we can mention this value as gateway server.

97
00:06:28,000 --> 00:06:34,000
And we don't want any profiles for Gateway server because for all type of environments, the gateway

98
00:06:34,000 --> 00:06:36,000
server is going to work very similarly.

99
00:06:36,000 --> 00:06:43,000
With that reason, we can remove all these profiles related properties along with that data source and

100
00:06:43,000 --> 00:06:47,000
has two related properties followed by JPA related properties.

101
00:06:47,000 --> 00:06:52,000
Also, I'm going to delete, but we need to make sure we are maintaining the spring dot config dot import

102
00:06:52,000 --> 00:06:58,000
so that my gateway server can connect with my config server and load the configurations.

103
00:06:58,000 --> 00:07:03,000
During the startup, the value is going to be the same like localhost 8071.

104
00:07:03,000 --> 00:07:06,000
After mentioning these changes, we should be fine.

105
00:07:06,000 --> 00:07:10,000
Now let's try to examine the actuator related properties.

106
00:07:10,000 --> 00:07:16,000
We can retain all these actuator related properties like we want to expose all the management related

107
00:07:16,000 --> 00:07:20,000
endpoints, but we don't need these shutdown related properties.

108
00:07:20,000 --> 00:07:23,000
We can delete these properties.

109
00:07:23,000 --> 00:07:27,000
And after this I will retain these info related properties.

110
00:07:27,000 --> 00:07:33,000
Now if you scroll down here we have again shutdown related configurations which I want to remove.

111
00:07:33,000 --> 00:07:33,000
Next.

112
00:07:33,000 --> 00:07:36,000
We also have Eureka related configurations.

113
00:07:36,000 --> 00:07:43,000
I want to delete all these Eureka related configurations since I want to maintain them inside the config

114
00:07:43,000 --> 00:07:43,000
server.

115
00:07:43,000 --> 00:07:48,000
There is no reason why we can't maintain them here, since I want my gateway server to connect with

116
00:07:48,000 --> 00:07:54,000
the config server and load at least some properties, I'm planning to maintain all these Eureka related

117
00:07:54,000 --> 00:07:56,000
properties inside the config server.

118
00:07:56,000 --> 00:07:59,000
With that reason I can try to remove all these properties.

119
00:07:59,000 --> 00:08:07,000
Now under this info app, the name value I can mention as gateway server followed by a description saying

120
00:08:07,000 --> 00:08:10,000
that easy bank gateway server application.

121
00:08:10,000 --> 00:08:13,000
Now we should be good with these info details.

122
00:08:13,000 --> 00:08:20,000
Now as a next step, we need to add a new configuration to enable the gateway related endpoints inside

123
00:08:20,000 --> 00:08:22,000
the actuator for the same.

124
00:08:22,000 --> 00:08:26,000
Just below these endpoints I'm going to mention endpoint.

125
00:08:26,000 --> 00:08:32,000
This is in singular form, so please make sure you are mentioning in the same position like endpoints.

126
00:08:32,000 --> 00:08:36,000
And at this endpoint we need to mention gateway.

127
00:08:36,000 --> 00:08:40,000
After the gateway we we need to mention enabled with the value true.

128
00:08:40,000 --> 00:08:45,000
So with this I'm trying to enable gateway related endpoints inside the actuator.

129
00:08:45,000 --> 00:08:47,000
Now we should be good.

130
00:08:47,000 --> 00:08:53,000
As a next step, let's try to define some properties inside the config server related to the gateway

131
00:08:53,000 --> 00:08:54,000
server.

132
00:08:54,000 --> 00:08:59,000
As of now, you can see we established the link between gateway server and the config server with these

133
00:08:59,000 --> 00:09:00,000
property.

134
00:09:00,000 --> 00:09:05,000
Now if you try to see my GitHub repo where we are trying to maintain all the configurations here, there

135
00:09:05,000 --> 00:09:08,000
is a file with the name gateway server dot Yaml.

136
00:09:08,000 --> 00:09:11,000
If you can open this, there are set of properties.

137
00:09:11,000 --> 00:09:13,000
The very first one is server dot port.

138
00:09:13,000 --> 00:09:18,000
With this, my gateway server is going to start at the port 8072.

139
00:09:18,000 --> 00:09:23,000
The next few properties that I have highlighted here are related to the Eureka!

140
00:09:23,000 --> 00:09:28,000
I want my gateway server to connect with the Eureka so that it will know what are the actual endpoints

141
00:09:28,000 --> 00:09:30,000
of my microservices.

142
00:09:30,000 --> 00:09:36,000
With that reason, we need to definitely make sure we are connecting our gateway server with the Eureka

143
00:09:36,000 --> 00:09:36,000
server.

144
00:09:36,000 --> 00:09:42,000
We already know the purpose of these properties, the same properties we have defined inside the accounts,

145
00:09:42,000 --> 00:09:43,000
loans and cards.

146
00:09:43,000 --> 00:09:44,000
Microservices.

147
00:09:44,000 --> 00:09:49,000
Please get these properties present inside these gateway server dot Yaml and create the same Yaml file

148
00:09:49,000 --> 00:09:52,000
inside your GitHub configurations repo.

149
00:09:52,000 --> 00:09:59,000
Now if you see our gateway server has enough details about our microservices, how it is going to get

150
00:09:59,000 --> 00:09:59,000
all these details.

151
00:09:59,000 --> 00:10:03,000
It seems by connecting with the service discovery agent, which is Eureka.

152
00:10:03,000 --> 00:10:06,000
As a next step, we need to tell our gateway server.

153
00:10:06,000 --> 00:10:11,000
Please leverage the information present inside the discovery agent to forward all the requests that

154
00:10:11,000 --> 00:10:14,000
are coming from the external clients.

155
00:10:14,000 --> 00:10:19,000
To provide the same information, we need to add an property inside application dot Yaml file.

156
00:10:19,000 --> 00:10:23,000
Here, just under the spring, we need to add one more property.

157
00:10:23,000 --> 00:10:26,000
The property is going to be spring dot cloud.

158
00:10:26,000 --> 00:10:29,000
That's why I'm just mentioning cloud here.

159
00:10:29,000 --> 00:10:32,000
Post that gateway followed by discovery.

160
00:10:32,000 --> 00:10:36,000
After mentioning this discovery, we need to mention locator.

161
00:10:36,000 --> 00:10:43,000
And this locator we need to mention enabled and the value should be true with this configuration I'm

162
00:10:43,000 --> 00:10:49,000
telling to my gateway, please connect with the discovery server which is Eureka server, and locate

163
00:10:49,000 --> 00:10:51,000
all the details about the microservices.

164
00:10:51,000 --> 00:10:57,000
Once it located all the information about the individual microservices, I want my gateway server to

165
00:10:57,000 --> 00:11:03,000
use the same to forward the traffic from external clients to the individual microservice.

166
00:11:03,000 --> 00:11:05,000
So please make sure you are mentioning this property.

167
00:11:05,000 --> 00:11:09,000
With this we should be good with all the changes inside the gateway server.

168
00:11:09,000 --> 00:11:15,000
In the next lecture, let's try to start all the microservices along with the gateway Server, Eureka

169
00:11:15,000 --> 00:11:21,000
Server and Config Server and try to test a few microservices by sending the request to the gateway server

170
00:11:21,000 --> 00:11:24,000
instead of the actual microservices.

171
00:11:24,000 --> 00:11:30,000
I also mentioned all the important steps that we followed inside this lecture in this slide, so that

172
00:11:30,000 --> 00:11:32,000
you can always have them as reference.

173
00:11:32,000 --> 00:11:33,000
I hope this is clear.

174
00:11:33,000 --> 00:11:36,000
Thank you and I'll catch you in the next lecture by.

