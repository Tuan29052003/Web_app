1
00:00:00,000 --> 00:00:04,000
Inside this lecture, let's try to understand why should we use Ingress?

2
00:00:04,000 --> 00:00:11,000
What are the benefits provided by the ingress to any organizations who are using microservices?

3
00:00:11,000 --> 00:00:19,000
The very first advantage of ingress is it is going to act as a single entry point into your Kubernetes

4
00:00:19,000 --> 00:00:26,000
cluster, which means it is going to act as an edge server using which you can configure a single entry

5
00:00:26,000 --> 00:00:31,000
point for multiple microservices you have inside your Kubernetes cluster.

6
00:00:31,000 --> 00:00:38,000
And this is going to make our life easy to manage external access to our microservices.

7
00:00:38,000 --> 00:00:41,000
The same advantage provided by the Spring Cloud Gateway as well.

8
00:00:41,000 --> 00:00:48,000
But like I said before, there is no good or bad approach between Spring Cloud Gateway and Kubernetes

9
00:00:48,000 --> 00:00:49,000
ingress approach.

10
00:00:49,000 --> 00:00:54,000
It all depends upon the team structure and the team technical skills of an organization.

11
00:00:54,000 --> 00:01:01,000
And apart from the single entry point, Kubernetes Ingress is also capable of TLS/SSL termination.

12
00:01:01,000 --> 00:01:09,000
We all know inside the web we always communicate with the help of secured protocols like TLS/SSL.

13
00:01:09,000 --> 00:01:15,000
That's why inside the browsers you will always see the Https protocol being used.

14
00:01:15,000 --> 00:01:17,000
Why do we use this TLS/SSL approach?

15
00:01:17,000 --> 00:01:24,000
When our data traveled from client location to the server, we need to make sure that no one is stealing

16
00:01:24,000 --> 00:01:24,000
our data.

17
00:01:24,000 --> 00:01:31,000
If you send the data using plain text, any hacker can intercept your request and he can steal the data.

18
00:01:31,000 --> 00:01:39,000
Whereas when we use Https protocol with the help of TLS, all your data is going to be traveled using

19
00:01:39,000 --> 00:01:40,000
an encrypted format.

20
00:01:40,000 --> 00:01:47,000
And this encrypted format cannot be decrypted by the hacker because only the servers know how to decrypt

21
00:01:47,000 --> 00:01:47,000
it.

22
00:01:47,000 --> 00:01:53,000
But these Https are TLS communication comes with the cost of performance.

23
00:01:53,000 --> 00:01:59,000
That's why it is not going to be a good idea if you want to follow the same https communication even

24
00:01:59,000 --> 00:02:05,000
within your cluster because no hacker can enter into your Kubernetes cluster other than using edge server.

25
00:02:05,000 --> 00:02:12,000
That's why there is no meaning of forwarding the same https traffic to the inside of the Kubernetes

26
00:02:12,000 --> 00:02:13,000
cluster as well.

27
00:02:13,000 --> 00:02:17,000
So that is going to bring some serious performance impacts.

28
00:02:17,000 --> 00:02:24,000
That's why many organizations, they don't want to carry that TLS communication into the Kubernetes

29
00:02:24,000 --> 00:02:24,000
cluster.

30
00:02:24,000 --> 00:02:30,000
So how they are going to achieve by terminating the TLS communication, that means at the ingress layer

31
00:02:30,000 --> 00:02:36,000
or at the edge server, they are going to convert that Https protocol to the Http.

32
00:02:36,000 --> 00:02:43,000
So once the data is entered into your Kubernetes cluster, the protocol is going to be changed from

33
00:02:43,000 --> 00:02:45,000
the Https to the Http.

34
00:02:45,000 --> 00:02:48,000
We can achieve this also with the help of Ingress.

35
00:02:48,000 --> 00:02:51,000
So this is one of the advantage of ingress.

36
00:02:51,000 --> 00:02:56,000
The next advantage is like we discussed, it is going to help you to implement path based routing and

37
00:02:56,000 --> 00:02:59,000
at the same time host based routing.

38
00:02:59,000 --> 00:03:05,000
We can define path based routing like if someone is trying to access my domain with the path /app1

39
00:03:05,000 --> 00:03:08,000
then the request has to go to one of the service.

40
00:03:08,000 --> 00:03:11,000
And similarly app2 has to go to other service.

41
00:03:11,000 --> 00:03:15,000
Whereas sometimes organizations may use host based routing.

42
00:03:15,000 --> 00:03:22,000
That means they are going to have subdomains like app1.example.com or app2.example.com.

43
00:03:22,000 --> 00:03:28,000
So in these kind of scenarios they can define host based routing like someone is trying to access so-and-so

44
00:03:28,000 --> 00:03:29,000
subdomain.

45
00:03:29,000 --> 00:03:32,000
Then please forward the request to so-and-so service.

46
00:03:32,000 --> 00:03:39,000
And apart from routing the request, the ingress is also capable of load balancing the request and distributing

47
00:03:39,000 --> 00:03:43,000
the traffic among multiple parts of same service.

48
00:03:43,000 --> 00:03:49,000
So how it is going to do with the help of cluster IP service behind the scenes, the ingress is going

49
00:03:49,000 --> 00:03:54,000
to forward the request to the cluster IP and the cluster IP service is going to forward the request

50
00:03:54,000 --> 00:03:56,000
to one of the pod where the container is deployed.

51
00:03:56,000 --> 00:04:02,000
And apart from these advantages, we also have a concept called annotations inside Ingress.

52
00:04:02,000 --> 00:04:10,000
Using these annotations, we can configure additional settings such as rewriting rules, custom headers

53
00:04:10,000 --> 00:04:13,000
or adding authentication and authorization.

54
00:04:13,000 --> 00:04:19,000
So all these kind of additional capabilities can be achieved with the help of annotations.

55
00:04:19,000 --> 00:04:22,000
So these are all the advantages of Kubernetes Ingress.

56
00:04:22,000 --> 00:04:28,000
But like I said, we don't have to learn everything about Kubernetes Ingress because it is a responsibility

57
00:04:28,000 --> 00:04:32,000
of the Kubernetes developer to set up an ingress.

58
00:04:32,000 --> 00:04:38,000
I'm just trying to share this information for you so that you are ready for any kind of scenario.

59
00:04:38,000 --> 00:04:41,000
Some organizations may say we're going to set up Kubernetes Ingress.

60
00:04:41,000 --> 00:04:44,000
You don't need to worry as a developer about the Edge server.

61
00:04:44,000 --> 00:04:48,000
So in such scenarios, you should know what is Kubernetes ingress.

62
00:04:48,000 --> 00:04:49,000
Otherwise you are going to scratch your head.

63
00:04:49,000 --> 00:04:53,000
So to avoid that scenario, I'm trying to share this information.

64
00:04:53,000 --> 00:04:59,000
So whatever ingress is capable, our spring cloud gateway is also capable, like it is capable of path

65
00:04:59,000 --> 00:04:59,000
based routing,

66
00:05:00,000 --> 00:05:01,000
host based routing,

67
00:05:01,000 --> 00:05:02,000
single entry Point,

68
00:05:02,000 --> 00:05:03,000
load balancing.

69
00:05:03,000 --> 00:05:10,000
It is capable of authentication and writing cross-cutting concerns, and it is also capable of TLS/SSL

70
00:05:10,000 --> 00:05:10,000
termination.

71
00:05:10,000 --> 00:05:14,000
So everything is possible with the help of Spring Cloud Gateway as well.

72
00:05:14,000 --> 00:05:19,000
But at the end of the day, we need to go with the option choose to by the project architect or the

73
00:05:19,000 --> 00:05:20,000
project leadership.

74
00:05:20,000 --> 00:05:24,000
So if they ask us to go with the Spring Cloud Gateway, we need to go with that.

75
00:05:24,000 --> 00:05:27,000
Otherwise, if they select the Kubernetes ingress, then we need to go with this approach.

76
00:05:27,000 --> 00:05:30,000
I hope this is clear. As a next step,

77
00:05:30,000 --> 00:05:31,000
let me highlight you one more time.

78
00:05:31,000 --> 00:05:35,000
What is the difference between ingress controller and service type load balancer.

79
00:05:35,000 --> 00:05:43,000
Like we discussed before, both of them are capable of exposing your microservices to the outside world.

80
00:05:43,000 --> 00:05:50,000
But Ingress offers more advanced routing and traffic management capabilities compared to the load balancer.

81
00:05:50,000 --> 00:05:57,000
So if your organization is a very small organization where you have limited set of microservices and

82
00:05:57,000 --> 00:06:03,000
you are developing some low critical microservices, then you may go with the load balancer.

83
00:06:03,000 --> 00:06:06,000
You don't want a complex setup like ingress controller.

84
00:06:06,000 --> 00:06:12,000
Now, as a next step, let me try to introduce few jargons that you may hear whenever you are trying

85
00:06:12,000 --> 00:06:15,000
to involve in a microservice discussion.

86
00:06:15,000 --> 00:06:20,000
And these jargons are around the types of traffic handled by the ingress controller.

87
00:06:20,000 --> 00:06:26,000
So there are few jargons like Ingress traffic, Egress traffic and a North-South traffic.

88
00:06:26,000 --> 00:06:28,000
So what is ingress traffic?

89
00:06:28,000 --> 00:06:34,000
Any traffic that is entering a Kubernetes cluster, we call it, as a ingress traffic.

90
00:06:34,000 --> 00:06:36,000
And similarly, what is Egress traffic?

91
00:06:36,000 --> 00:06:38,000
It is opposite of ingress traffic.

92
00:06:38,000 --> 00:06:44,000
So any traffic which is exiting a Kubernetes cluster, we call it, as a Egress traffic.

93
00:06:44,000 --> 00:06:51,000
In other words, this ingress and egress traffic, we call it as a North-South traffic traffic entering

94
00:06:51,000 --> 00:06:53,000
and exiting a Kubernetes cluster.

95
00:06:53,000 --> 00:06:56,000
We can also call it as a North-South traffic.

96
00:06:56,000 --> 00:07:03,000
So your ingress or ingress controllers are capable of handling these traffics like North-South traffic

97
00:07:03,000 --> 00:07:06,000
or Ingress, Egress traffic.

98
00:07:06,000 --> 00:07:11,000
So here you may have a question like, okay, my ingress is capable of handling all the traffic that

99
00:07:11,000 --> 00:07:14,000
is entering and leaving my cluster.

100
00:07:14,000 --> 00:07:21,000
How about the traffic that is going to happen between your microservices inside Kubernetes cluster?

101
00:07:21,000 --> 00:07:26,000
So that's where we are going to discuss the next topic, which is service mesh.

102
00:07:26,000 --> 00:07:31,000
So let's try to understand more details about service mesh inside the next lecture.

103
00:07:31,000 --> 00:07:33,000
Thank you and I'll catch you in the next lecture bye.

