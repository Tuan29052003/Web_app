1
00:00:00,000 --> 00:00:03,000
Inside this lecture, let's try to build a service

2
00:00:03,000 --> 00:00:07,000
discovery agent with the help of Eureka available inside the Spring Cloud Netflix project.

3
00:00:07,000 --> 00:00:13,000
As of now, you can see inside the GitHub repo I have uploaded all the code from the section 2, section 4,

4
00:00:13,000 --> 00:00:15,000
section 6 and section 7.

5
00:00:15,000 --> 00:00:20,000
So since we are into a new section, I'm going to create a new folder inside my workspace.

6
00:00:20,000 --> 00:00:22,000
So inside my workspace.

7
00:00:22,000 --> 00:00:27,000
So here I'm going to create a new folder and the folder name is going to be section 8.

8
00:00:27,000 --> 00:00:32,000
And inside this section 8, I can copy the code from the section 7, but I'm not going to do

9
00:00:32,000 --> 00:00:40,000
that because section 7 code is using MySQL database related changes. Since we decided to use 

10
00:00:40,000 --> 00:00:46,000
H2 database, what I'm going to do is I'm going to copy the code from the section 6 v2 folder.

11
00:00:46,000 --> 00:00:52,000
I'm copying all these folders here and I'm going to paste the same inside the section 8.

12
00:00:52,000 --> 00:00:58,000
With this we have our section 8 initial code is ready, So let me go to the interleague idea and

13
00:00:58,000 --> 00:01:01,000
try to open this section 8 folder. Here Inside my idea

14
00:01:01,000 --> 00:01:08,000
I'm clicking on this open button post that I'm going to storage, workspaces, microservices and Section 8.

15
00:01:08,000 --> 00:01:08,000
.

16
00:01:08,000 --> 00:01:10,000
I'm just clicking on this open button.

17
00:01:10,000 --> 00:01:15,000
So this will open a new workspace with all my Maven projects.

18
00:01:15,000 --> 00:01:21,000
So let me click on this load button post that I'm going to remove all the code changes related to the

19
00:01:21,000 --> 00:01:27,000
Spring Cloud bus and the Rabbitmq because we don't want to carry unnecessary libraries and containers

20
00:01:27,000 --> 00:01:33,000
to the new sections due to the reason that all these containers can slow our local system.

21
00:01:33,000 --> 00:01:37,000
So that's why let's try to use what is needed in a particular section.

22
00:01:37,000 --> 00:01:40,000
So let me open the config server here.

23
00:01:40,000 --> 00:01:47,000
Inside this, I have opened the pom.xml and I'm looking for library related to the spring cloud bus.

24
00:01:47,000 --> 00:01:48,000
So this is the library.

25
00:01:48,000 --> 00:01:49,000
So let me delete this.

26
00:01:49,000 --> 00:01:52,000
And I'm also going to delete the spring cloud config monitor.

27
00:01:52,000 --> 00:01:59,000
So let me click on this load Maven changes post that I'm going to open the application.yml file.

28
00:01:59,000 --> 00:02:06,000
So I'm here, I'm clicking on the application.yml and I'm going to delete the properties related

29
00:02:06,000 --> 00:02:07,000
to the rabbitmq.

30
00:02:07,000 --> 00:02:08,000
So let me delete these properties.

31
00:02:08,000 --> 00:02:13,000
Now I'm going to delete the similar changes for other microservices behind the scenes.

32
00:02:13,000 --> 00:02:17,000
I'm not going to do them in front of you just to save some time.

33
00:02:17,000 --> 00:02:21,000
If you are also doing the coding along with me, please pass the video and delete all these Spring Cloud

34
00:02:21,000 --> 00:02:26,000
bus and Rabbitmq related libraries from the accounts, cards and loans

35
00:02:26,000 --> 00:02:26,000
microservice.

36
00:02:26,000 --> 00:02:33,000
Now I have completed deleting the spring cloud bus related changes inside the pom.xml and application.yml

37
00:02:33,000 --> 00:02:38,000
of all the microservices like loans, cards and accounts microservice.

38
00:02:38,000 --> 00:02:44,000
As a next step, I can go ahead and create a service discovery agent with the help of Eureka.

39
00:02:44,000 --> 00:02:45,000
For the same,

40
00:02:45,000 --> 00:02:48,000
I came to the Start.spring.io website.

41
00:02:48,000 --> 00:02:51,000
Here you can see I have filled all the required details already.

42
00:02:51,000 --> 00:02:52,000
You know the drill.

43
00:02:52,000 --> 00:02:57,000
The project build tool that we are going to use is Maven and the language is Java and coming to the

44
00:02:57,000 --> 00:02:58,000
Spring boot version.

45
00:02:58,000 --> 00:03:03,000
Please go with that default selected latest most stable version of Spring boot. Coming to the group,

46
00:03:03,000 --> 00:03:09,000
we need to fill it as com.eazybytes and the artifact is going to be the eureka the same for name.

47
00:03:09,000 --> 00:03:11,000
Under the description,

48
00:03:11,000 --> 00:03:16,000
I have provided the description saying that service discovery agent for Eazy Bank microservices and

49
00:03:16,000 --> 00:03:21,000
the package name will be populated based upon your group and artifact and the packaging is going to

50
00:03:21,000 --> 00:03:22,000
be jar

51
00:03:22,000 --> 00:03:24,000
and I'm going to use a Java 17 version.

52
00:03:24,000 --> 00:03:26,000
Coming to the dependencies,

53
00:03:26,000 --> 00:03:32,000
we need to search for Eureka since we are trying to build the Eureka Server, which is going to act

54
00:03:32,000 --> 00:03:36,000
as a service discovery agent, we need to select this Eureka server dependency.

55
00:03:36,000 --> 00:03:39,000
Please don't select this Eureka Discovery client.

56
00:03:39,000 --> 00:03:46,000
We need to consider these Eureka Discovery client dependency inside the microservices like accounts,

57
00:03:46,000 --> 00:03:47,000
loans and cards.

58
00:03:47,000 --> 00:03:51,000
But right now, inside this lecture, we are trying to build a service discovery agent

59
00:03:51,000 --> 00:03:54,000
that's why we need to select these Eureka server dependency.

60
00:03:54,000 --> 00:03:56,000
After adding this dependency,

61
00:03:56,000 --> 00:04:03,000
I'm also going to add config client dependency because my Eureka server will connect to the config server

62
00:04:03,000 --> 00:04:07,000
to load all the properties related to the Eureka server.

63
00:04:07,000 --> 00:04:11,000
So that's why I'm going to add this config client dependency.

64
00:04:11,000 --> 00:04:15,000
And after this I'm going to add the actuator dependency.

65
00:04:15,000 --> 00:04:17,000
With these three dependencies, we should be good.

66
00:04:17,000 --> 00:04:23,000
Let me click on this generate button and with that a new Maven based project will be generated and pasting

67
00:04:23,000 --> 00:04:27,000
that new Maven project that we have created inside this section 8.

68
00:04:27,000 --> 00:04:29,000
Right now you can see it is in the zip format.

69
00:04:29,000 --> 00:04:31,000
So let me try to extract this.

70
00:04:31,000 --> 00:04:34,000
So I have extracted this into a folder.

71
00:04:34,000 --> 00:04:36,000
Now I can delete this dot zip file.

72
00:04:36,000 --> 00:04:37,000
As a next step

73
00:04:37,000 --> 00:04:42,000
I'll go to my IntelliJ idea and try to load these new Maven project into my workspace.

74
00:04:42,000 --> 00:04:49,000
Here you can see already my IntelliJ idea detected my new project, but right now it is not detected

75
00:04:49,000 --> 00:04:50,000
as a maven project.

76
00:04:50,000 --> 00:04:58,000
So what I need to do is, I need to go to my Maven tab here and click on this add Maven projects and select

77
00:04:58,000 --> 00:04:59,000
this Eureka server. with that.

78
00:05:00,000 --> 00:05:05,000
My Eureka server will be detected as a maven project inside my workspace.

79
00:05:05,000 --> 00:05:07,000
So let me close this Maven tab.

80
00:05:07,000 --> 00:05:11,000
Now I'm going to open the main class of my Eureka server.

81
00:05:11,000 --> 00:05:13,000
The main class you can easily identify.

82
00:05:13,000 --> 00:05:18,000
It is going to have this annotation, which is spring boot application, so it is trying to download

83
00:05:18,000 --> 00:05:19,000
the Maven dependencies.

84
00:05:19,000 --> 00:05:24,000
So let's give few seconds for these dependencies to download.

85
00:05:24,000 --> 00:05:30,000
After waiting for few seconds, all the required maven dependencies are downloaded. Now on top of this

86
00:05:30,000 --> 00:05:37,000
Eureka server application class, I need to mention an annotation which is @EnableEurekaServer

87
00:05:37,000 --> 00:05:37,000
.

88
00:05:37,000 --> 00:05:40,000
So this annotation is very important.

89
00:05:40,000 --> 00:05:47,000
Using this annotation, we are trying to convert a normal spring boot project to act as an service discovery

90
00:05:47,000 --> 00:05:52,000
agent with the help of Eureka libraries present inside the Spring Cloud Netflix project.

91
00:05:52,000 --> 00:05:54,000
So let me save these changes.

92
00:05:54,000 --> 00:05:59,000
Now as a next step, we need to go and open the application.properties file.

93
00:05:59,000 --> 00:06:00,000
So as of now you can see this is empty.

94
00:06:00,000 --> 00:06:08,000
Let me rename these dot properties file to dot yaml file so that we can try to provide the configurations

95
00:06:08,000 --> 00:06:09,000
with the Yaml format.

96
00:06:09,000 --> 00:06:14,000
So let me remove these dot properties and replace it with dot yml.

97
00:06:14,000 --> 00:06:17,000
So now here I need to mention the properties.

98
00:06:17,000 --> 00:06:23,000
The first set of properties that I want to mention here is, config server details so that my Eureka server

99
00:06:23,000 --> 00:06:29,000
can connect with the config server during the startup and try to fetch the properties related to Eureka

100
00:06:29,000 --> 00:06:29,000
Server.

101
00:06:29,000 --> 00:06:36,000
So for the same we can open any of the application.yml present inside any of the microservices.

102
00:06:36,000 --> 00:06:38,000
So let me open this application.yml.

103
00:06:38,000 --> 00:06:43,000
So here you can see first we need to make sure we are mentioning this spring application.name.

104
00:06:43,000 --> 00:06:49,000
So let me copy this spring application.name and mention the same inside the Eureka server.

105
00:06:49,000 --> 00:06:53,000
So here the application name is going to be Eureka Server.

106
00:06:53,000 --> 00:06:58,000
Once we mention this Eureka server details, we need to add the config server details.

107
00:06:58,000 --> 00:07:04,000
So let me copy this value which is spring.config.import the same I'm going to mention here under

108
00:07:04,000 --> 00:07:07,000
the same position where my application started.

109
00:07:07,000 --> 00:07:13,000
So here I'm going to mention the same like spring.config.import and this is the URL of config

110
00:07:13,000 --> 00:07:15,000
server which is localhost 8071.

111
00:07:15,000 --> 00:07:22,000
Now I should also enable the readiness and liveness of Eureka Server because later on inside the Docker

112
00:07:22,000 --> 00:07:29,000
compose file we are going to make sure that Eureka server is started before accounts, loans and cards

113
00:07:29,000 --> 00:07:30,000
microservice.

114
00:07:30,000 --> 00:07:36,000
Since my other microservice has an dependency on this Eureka server, I need to define the health check

115
00:07:36,000 --> 00:07:39,000
details inside my docker compose file.

116
00:07:39,000 --> 00:07:44,000
So whenever we want to define health check details, we need to make sure we are exposing the readiness

117
00:07:44,000 --> 00:07:45,000
and liveness details.

118
00:07:45,000 --> 00:07:51,000
We already mentioned these properties inside the config server, so let me go to the config server application.yml

119
00:07:51,000 --> 00:07:57,000
file and inside the same application.yml file you can see we can copy all these actuator

120
00:07:57,000 --> 00:07:59,000
related properties.

121
00:07:59,000 --> 00:08:03,000
I'm going to mention the same inside the application.yml of Eureka Server.

122
00:08:03,000 --> 00:08:06,000
So here management endpoints

123
00:08:06,000 --> 00:08:08,000
I am trying to expose everything. After that,

124
00:08:08,000 --> 00:08:14,000
I'm trying to enable health related URLs along with the readiness state and liveness state.

125
00:08:14,000 --> 00:08:19,000
With this I have added all the required properties inside the applicationyml file.

126
00:08:19,000 --> 00:08:23,000
The remaining set of properties I'm going to maintain inside the config server.

127
00:08:23,000 --> 00:08:30,000
Let's go to our GitHub repository where we are maintaining all the configurations related to microservices.

128
00:08:30,000 --> 00:08:34,000
This is my GitHub repository with the name Eazybytes-config.

129
00:08:34,000 --> 00:08:41,000
You can see here I have already uploaded an Yaml file here with the name eurekaserver.properties.

130
00:08:41,000 --> 00:08:49,000
So here I don't have other property files related to prod and qa because my Eureka server is going to behave

131
00:08:49,000 --> 00:08:56,000
or work in very similar way in all kind of profiles like default and production, since my Eureka server

132
00:08:56,000 --> 00:09:03,000
does not have any dependency on database credentials or any other business logic where it has to behave

133
00:09:03,000 --> 00:09:05,000
differently based upon different environment.

134
00:09:05,000 --> 00:09:11,000
I'm going to create a single Yaml file with the name Eureka Server, so please make sure the same Eureka

135
00:09:11,000 --> 00:09:16,000
server you have mentioned inside the spring.application name.

136
00:09:16,000 --> 00:09:22,000
So please take this value and search here and make sure the name of the file is matching with what you

137
00:09:22,000 --> 00:09:24,000
have mentioned in the applications.yml.

138
00:09:24,000 --> 00:09:27,000
So here, let's try to understand what properties I have given.

139
00:09:27,000 --> 00:09:33,000
You can also get these Yaml file from the GitHub repo and try to mention the same inside your own GitHub

140
00:09:33,000 --> 00:09:34,000
repo.

141
00:09:34,000 --> 00:09:41,000
The very first one it is pretty clear we want our Eureka server to get started at the port 8070 post

142
00:09:41,000 --> 00:09:45,000
that I have started a new element which is Eureka and a Eureka.

143
00:09:45,000 --> 00:09:47,000
I have mentioned instance.

144
00:09:47,000 --> 00:09:53,000
After instant I have mentioned a element with the name hostname and here I'm mentioning the localhost.

145
00:09:53,000 --> 00:09:58,000
So with this eureka.instance.hostname we are telling to the Eureka server what host name it

146
00:09:58,000 --> 00:09:59,000
has to consider.

147
00:10:00,000 --> 00:10:04,000
Obviously inside our local system, the host name is going to be localhost.

148
00:10:04,000 --> 00:10:11,000
And after this localhost configuration, I have mentioned eureka.client.fetchregistry as false

149
00:10:11,000 --> 00:10:13,000
and register with Eureka as false.

150
00:10:13,000 --> 00:10:16,000
So let's try to understand what is the purpose of these properties.

151
00:10:16,000 --> 00:10:18,000
Fetch registry I'm mentioning as false.

152
00:10:18,000 --> 00:10:21,000
So by default it is true here I'm trying to set false.

153
00:10:21,000 --> 00:10:25,000
The reason is I don't want my Eureka server to fetch the registry

154
00:10:25,000 --> 00:10:28,000
details of other microservices.

155
00:10:28,000 --> 00:10:31,000
My Eureka server never going to call the microservices.

156
00:10:31,000 --> 00:10:36,000
That's why it is unnecessary to fetch all the registry details of the microservices.

157
00:10:36,000 --> 00:10:38,000
That's why I'm mentioning these value as false.

158
00:10:38,000 --> 00:10:44,000
Whereas in our individual microservices like accounts, loans and cards, this value should be true

159
00:10:44,000 --> 00:10:46,000
and which is the default behavior.

160
00:10:46,000 --> 00:10:50,000
Since I want to change the default behavior here, I am setting this value as false.

161
00:10:50,000 --> 00:10:52,000
Now register with Eureka.

162
00:10:52,000 --> 00:10:58,000
So I'm telling to my Eureka server, Don't register with yourself and don't expose your details into

163
00:10:58,000 --> 00:11:00,000
the registry of the service Discovery.

164
00:11:00,000 --> 00:11:06,000
Since we don't want our Eureka server to register with itself, we have to mention these property as

165
00:11:06,000 --> 00:11:07,000
false.

166
00:11:07,000 --> 00:11:12,000
And at last I have mentioned eureka.client.service URL and this service URL,

167
00:11:12,000 --> 00:11:15,000
I have mentioned one more element which is default zone.

168
00:11:15,000 --> 00:11:23,000
And here I have mentioned a property which is the URL where my Eureka server is going to expose its

169
00:11:23,000 --> 00:11:29,000
functionality and other microservices they can try to connect to register their details or to discover

170
00:11:29,000 --> 00:11:30,000
other service details.

171
00:11:30,000 --> 00:11:34,000
So you can see here the host name I'm trying to fetch from these properties

172
00:11:34,000 --> 00:11:39,000
that's why I have mentioned the variable name as eureka.instance.hostname and the port number

173
00:11:39,000 --> 00:11:41,000
from this variable server.port.

174
00:11:41,000 --> 00:11:44,000
And at last there is a path which is /eureka.

175
00:11:44,000 --> 00:11:47,000
So these are default service URL that we want to consider.

176
00:11:47,000 --> 00:11:54,000
So with these properties now during the startup, my Eureka server is going to connect with the config

177
00:11:54,000 --> 00:11:59,000
server and fetch all these properties and start with these eureka related configurations.

178
00:11:59,000 --> 00:12:03,000
So now we have made all the required changes inside the Eureka Server.

179
00:12:03,000 --> 00:12:08,000
As a next step, let me do a build now to test this Eureka server,

180
00:12:08,000 --> 00:12:14,000
if we have set up properly or not, I can first start my config server because my Eureka server has

181
00:12:14,000 --> 00:12:18,000
a dependency on the config server. So I'm trying to start my config server.

182
00:12:18,000 --> 00:12:26,000
Once the config server is started, we can confirm if the config server is loaded, all the eureka related

183
00:12:26,000 --> 00:12:27,000
properties.

184
00:12:27,000 --> 00:12:34,000
So for the same I'm going to invoke this URL which is localhost:8071/eurekaserver.

185
00:12:34,000 --> 00:12:39,000
So that is the application name followed by what is the profile which is default profile.

186
00:12:39,000 --> 00:12:40,000
So let me invoke this.

187
00:12:40,000 --> 00:12:45,000
You can see all the properties that we have defined or loaded by the config server.

188
00:12:45,000 --> 00:12:49,000
Now we can try to start the Eureka server. To start the Eureka Server,

189
00:12:49,000 --> 00:12:55,000
I'm going to open the main class and here try to start my application in a debug mode.

190
00:12:55,000 --> 00:13:00,000
So this will start my Eureka server at the port 8070.

191
00:13:00,000 --> 00:13:07,000
So if you see the logs first it tried to connect with the config server at the port 8071 and loaded

192
00:13:07,000 --> 00:13:12,000
all the default properties and that's why it has started at the port 8070.

193
00:13:12,000 --> 00:13:20,000
Now to validate if my Eureka server started perfectly or not, I'm going to access a path which is localhost

194
00:13:20,000 --> 00:13:22,000
8070.

195
00:13:22,000 --> 00:13:24,000
So this is the route path we need to access the same.

196
00:13:24,000 --> 00:13:31,000
So as soon as I access, you can see I'm getting the Eureka dashboard as of now, this is the dashboard

197
00:13:31,000 --> 00:13:34,000
provided by the Spring Eureka Server itself.

198
00:13:34,000 --> 00:13:39,000
I have not made any code changes to build this page, but still I'm able to access it.

199
00:13:39,000 --> 00:13:44,000
The purpose of this Eureka dashboard is once the other microservices, they started registering their

200
00:13:44,000 --> 00:13:46,000
details with the Eureka Server.

201
00:13:46,000 --> 00:13:49,000
We can see all those details inside this dashboard.

202
00:13:49,000 --> 00:13:50,000
So as of now it is empty.

203
00:13:50,000 --> 00:13:56,000
Like there are no instances currently registered with Eureka because as of now we have not established

204
00:13:56,000 --> 00:13:59,000
the link between other microservices to Eureka Server.

205
00:13:59,000 --> 00:14:01,000
But this is a good start.

206
00:14:01,000 --> 00:14:05,000
This confirms that our Eureka Server setup is successful.

207
00:14:05,000 --> 00:14:07,000
I hope you followed all the steps for your reference,

208
00:14:07,000 --> 00:14:11,000
I also mentioned all the steps that we have followed inside this slide.

209
00:14:11,000 --> 00:14:16,000
Please refer to the same whenever you want to quickly refresh all the steps that we have followed.

210
00:14:16,000 --> 00:14:18,000
With this, we successfully set up the Eureka Server.

211
00:14:19,000 --> 00:14:26,000
The next step, obviously is, to establish a link between our individual microservices with the service

212
00:14:26,000 --> 00:14:28,000
Discovery agent, which is Eureka Server.

213
00:14:28,000 --> 00:14:31,000
Thank you and I'll catch you in the next lecture bye.

