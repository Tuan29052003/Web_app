1
00:00:00,000 --> 00:00:04,000
Now inside this lecture, let's see the demo of Prometheus.

2
00:00:04,000 --> 00:00:09,000
For the same, we can try to start all our containers with the help of this Docker compose file.

3
00:00:09,000 --> 00:00:12,000
But do you think we can straight away start our containers?

4
00:00:12,000 --> 00:00:14,000
Think about it.

5
00:00:14,000 --> 00:00:21,000
Off course we can add start the containers directly because as of now the micrometer related code changes

6
00:00:21,000 --> 00:00:22,000
that we have done inside the application.yml

7
00:00:23,000 --> 00:00:29,000
and the pom.xml are present inside my local workspace only. To test these changes with the help

8
00:00:29,000 --> 00:00:30,000
of Docker compose file.

9
00:00:30,000 --> 00:00:36,000
We need to make sure we are regenerating the Docker images with the latest changes that we have done.

10
00:00:36,000 --> 00:00:37,000
Behind the scenes,

11
00:00:37,000 --> 00:00:42,000
I have generated the Docker image for all the microservices with the tag S11.

12
00:00:42,000 --> 00:00:48,000
If you are following with me, please make sure you are also generating these Docker images again after

13
00:00:48,000 --> 00:00:51,000
making the micrometer related code changes.

14
00:00:51,000 --> 00:00:54,000
Since now I have the most updated Docker images.

15
00:00:54,000 --> 00:00:59,000
I can go and start my applications with the help of Docker compose file. For the same,

16
00:00:59,000 --> 00:01:02,000
first, let me clean the terminal here.

17
00:01:02,000 --> 00:01:08,000
Here first I need to navigate into the Docker compose folder and post that into the prod profile.

18
00:01:08,000 --> 00:01:09,000
At this location

19
00:01:09,000 --> 00:01:16,000
I'm going to run the command which is docker compose up -d. So this is going to take some time,

20
00:01:16,000 --> 00:01:18,000
like 1 to 2 minutes.

21
00:01:18,000 --> 00:01:22,000
So let's wait for the services to start completely. After two minutes

22
00:01:22,000 --> 00:01:25,000
seems all my containers started successfully.

23
00:01:25,000 --> 00:01:29,000
Let me go to the Docker desktop and confirm the same. Inside the Docker desktop

24
00:01:29,000 --> 00:01:33,000
you can see all my containers right now are in the running status.

25
00:01:33,000 --> 00:01:38,000
Please make sure the new Docker container that we are trying to use, which is Prometheus, is started

26
00:01:38,000 --> 00:01:39,000
successfully.

27
00:01:39,000 --> 00:01:43,000
You can see it is right now running at the Port 1990. Post that

28
00:01:43,000 --> 00:01:47,000
you can confirm if the Gateway server started successfully.

29
00:01:47,000 --> 00:01:50,000
So this confirms me that the gateway server started successfully.

30
00:01:50,000 --> 00:01:56,000
We can go ahead and test the changes related to Micrometer and Prometheus.

31
00:01:56,000 --> 00:02:02,000
So first I will try to randomly test one of the actuator URL related to Prometheus.

32
00:02:02,000 --> 00:02:08,000
So I'm trying to invoke the Prometheus URL which is available against the accounts

33
00:02:08,000 --> 00:02:09,000
microservice.

34
00:02:09,000 --> 00:02:14,000
You can see I'm getting the successful response even inside the Docker container environment.

35
00:02:14,000 --> 00:02:22,000
As a next step, I'm going to open the localhost 1990, which is the Prometheus port number.

36
00:02:22,000 --> 00:02:25,000
After the port number, I'm going to mention targets.

37
00:02:25,000 --> 00:02:32,000
If you try to invoke this path, you should be able to see all the running containers information inside

38
00:02:32,000 --> 00:02:34,000
your Prometheus dashboard.

39
00:02:34,000 --> 00:02:37,000
If I try to click on this unhealthy, there are no unhealthy instances.

40
00:02:37,000 --> 00:02:45,000
And similarly, if you click on this all, it will show all the containers or the microservices that

41
00:02:45,000 --> 00:02:47,000
are being monitored by the Prometheus.

42
00:02:47,000 --> 00:02:53,000
So if I click on this collapse all you can see there are six containers running like accounts, cards,

43
00:02:53,000 --> 00:02:56,000
configserver, eurekaserver, gatewayserver and loans.

44
00:02:56,000 --> 00:03:03,000
From this single page related to Prometheus, we are able to see what is the overall status of all of

45
00:03:03,000 --> 00:03:04,000
our applications.

46
00:03:04,000 --> 00:03:09,000
If I want to know more details, I can click any one of them by using this show more option.

47
00:03:09,000 --> 00:03:12,000
And here you can see the status is up.

48
00:03:12,000 --> 00:03:13,000
What is the label information?

49
00:03:13,000 --> 00:03:19,000
What is the job information that we have configured behind the scenes with the help of Prometheus configurations.

50
00:03:19,000 --> 00:03:24,000
Now, after validating these targets, we can also see the other metrics.

51
00:03:24,000 --> 00:03:26,000
So let me go to the graphs.

52
00:03:26,000 --> 00:03:30,000
Here I can search for some of the metrics like CPU usage.

53
00:03:30,000 --> 00:03:34,000
So there is some metric with the name system, CPU usage.

54
00:03:34,000 --> 00:03:41,000
So if I try to click on this execute button first, I'll get all the table information like inside accounts

55
00:03:41,000 --> 00:03:45,000
under the instance 8080, what is the CPU usage value.

56
00:03:45,000 --> 00:03:52,000
And similarly for other microservices, if I want to see this in a beautiful graph, I can click on

57
00:03:52,000 --> 00:03:55,000
this graph option and here you can see we have a graph.

58
00:03:55,000 --> 00:04:00,000
So let me try to reduce the time frame to 15 minutes and post that

59
00:04:00,000 --> 00:04:02,000
I will try to zoom out the page.

60
00:04:02,000 --> 00:04:07,000
So here you can see we are able to see the graph of all the microservices.

61
00:04:07,000 --> 00:04:13,000
If you try to hover on these each of these microservice, the graph related to that particular microservice

62
00:04:13,000 --> 00:04:15,000
will be highlighted.

63
00:04:15,000 --> 00:04:21,000
You can see I'm trying to hover and the graph related to a particular microservice is being highlighted.

64
00:04:21,000 --> 00:04:24,000
And very similarly, we also have other styles of graph.

65
00:04:24,000 --> 00:04:29,000
If you try to click on this other option, the graph will show in a different style.

66
00:04:29,000 --> 00:04:34,000
As of now you can see the graph is showing the CPU usage from all the microservices.

67
00:04:34,000 --> 00:04:41,000
If you are looking for a CPU usage of a specific microservice, you can click on the same and that will

68
00:04:41,000 --> 00:04:44,000
show the metric information from a particular microservice.

69
00:04:44,000 --> 00:04:49,000
As of now I'm trying to see the accounts microservice related metric.

70
00:04:49,000 --> 00:04:52,000
Similarly, if I try to click on the other one, the same will be shown.

71
00:04:52,000 --> 00:04:55,000
So this way we can search any number of metrics.

72
00:04:55,000 --> 00:04:59,000
Right now you can see I'm trying to use the system CPU usage. Very similar

73
00:05:00,000 --> 00:05:06,000
if you try to look for other kind of information like process uptime seconds, this will show you the

74
00:05:06,000 --> 00:05:13,000
what is the uptime of your microservices like from how many seconds your particular microservice is

75
00:05:13,000 --> 00:05:14,000
up and running.

76
00:05:14,000 --> 00:05:18,000
So this kind of information also we can see here with the help of these graphs.

77
00:05:18,000 --> 00:05:23,000
So please try to look for other metrics like you can also look for connection details.

78
00:05:23,000 --> 00:05:28,000
And very similarly, we can also look for threads information related metrics.

79
00:05:28,000 --> 00:05:33,000
So based upon your requirements, you can look for the specific metric.

80
00:05:33,000 --> 00:05:39,000
And inside this graph we can see the overall metric information of all the microservices containers.

81
00:05:39,000 --> 00:05:46,000
These graphs are going to display the data of all the microservices, not related to a specific instance

82
00:05:46,000 --> 00:05:47,000
or a specific microservice.

83
00:05:47,000 --> 00:05:52,000
By default, they are going to give the metrics information from all the microservices. If needed

84
00:05:52,000 --> 00:05:58,000
you can select on one of them to see the more details about a specific microservice.

85
00:05:58,000 --> 00:06:03,000
If you don't know what are the metrics available inside the Prometheus, and if you want to check what

86
00:06:03,000 --> 00:06:09,000
are all the metrics available inside Prometheus, you can click on this globe icon that you have.

87
00:06:09,000 --> 00:06:13,000
So if I try to click on this, it will open the Metrics Explorer.

88
00:06:13,000 --> 00:06:20,000
And here you should be able to see the list of all the metrics that are being tracked by the Prometheus

89
00:06:20,000 --> 00:06:21,000
with the help of micrometer.

90
00:06:21,000 --> 00:06:26,000
So based upon your requirements, you can try to invoke any of the metrics.

91
00:06:26,000 --> 00:06:27,000
I hope this is clear.

92
00:06:27,000 --> 00:06:33,000
Let me close this pop up. For some reason, if you don't like this dark theme, you can also disable

93
00:06:33,000 --> 00:06:35,000
this by clicking on this icon.

94
00:06:35,000 --> 00:06:40,000
So with this you should be able to see all the graphs with the different different colors clearly.

95
00:06:40,000 --> 00:06:45,000
So you can see as of now, I'm trying to see the process uptime second from last one hour.

96
00:06:45,000 --> 00:06:45,000
If needed,

97
00:06:45,000 --> 00:06:52,000
you can try to reduce this timeframe, which will help you to understand your graph even more clearly.

98
00:06:52,000 --> 00:06:57,000
I hope you are clear about the capabilities of Prometheus, how we are able to see all our metrics with

99
00:06:57,000 --> 00:07:03,000
the help of Prometheus. As a next step, we can go to the targets here which will show you the list of

100
00:07:03,000 --> 00:07:07,000
all containers running with their health status.

101
00:07:07,000 --> 00:07:10,000
You can see all my containers are in healthy status.

102
00:07:10,000 --> 00:07:13,000
There is no unhealthy container.

103
00:07:13,000 --> 00:07:17,000
We also have checkboxes here like unknown, unhealthy and healthy.

104
00:07:17,000 --> 00:07:21,000
So if I click on this healthy, it will show all the healthy containers.

105
00:07:21,000 --> 00:07:24,000
And as of now, we don't have any unhealthy and unknown.

106
00:07:24,000 --> 00:07:30,000
I can try to kill one of the container and see how it is going to affect this dashboard.

107
00:07:30,000 --> 00:07:37,000
So inside my Docker desktop, I came to the Containers page and here I'm going to kill cards microservice.

108
00:07:37,000 --> 00:07:43,000
So let me select this and click and this top button and this will stop my cards microservice and behind

109
00:07:43,000 --> 00:07:50,000
the scenes, my Prometheus might be looking for the metrics from cards microservice, and if we don't

110
00:07:50,000 --> 00:07:54,000
receive the response, it will mark these cards microservice as unhealthy.

111
00:07:54,000 --> 00:07:57,000
So let's try to validate the same inside the dashboard.

112
00:07:57,000 --> 00:07:59,000
So let me refresh this page.

113
00:07:59,000 --> 00:08:01,000
So this time you can see the cards

114
00:08:01,000 --> 00:08:06,000
microservice is showing in a red color, which means it will come under the unhealthy.

115
00:08:06,000 --> 00:08:13,000
So if I try to click on this show more, the overall status is down because when my Prometheus is trying

116
00:08:13,000 --> 00:08:18,000
to send a request to this URL, it is not getting any response. With an error

117
00:08:18,000 --> 00:08:19,000
no such host.

118
00:08:20,000 --> 00:08:22,000
Now let me bring back my cards microservice.

119
00:08:22,000 --> 00:08:24,000
I'm trying to click on this start button.

120
00:08:24,000 --> 00:08:31,000
This will start my cards microservice successfully. Once your cards microservice started successfully

121
00:08:31,000 --> 00:08:36,000
maybe after ten 15 seconds you can go to the Prometheus dashboard here.

122
00:08:36,000 --> 00:08:43,000
I will try to refresh this page and this time you can see under unhealthy we don't have any container.

123
00:08:43,000 --> 00:08:49,000
So let me click on this all button and now you can see the overall card status healthy is showing as

124
00:08:49,000 --> 00:08:49,000
up.

125
00:08:49,000 --> 00:08:55,000
So this means the Prometheus is continuously monitoring the overall health of your microservice.

126
00:08:55,000 --> 00:09:02,000
If you are interested, you can also look for the specific micrometer by going to the graph tab and

127
00:09:02,000 --> 00:09:05,000
searching for the metric that you are interested.

128
00:09:05,000 --> 00:09:10,000
With this limited functionality, you should be able to monitor your microservices.

129
00:09:10,000 --> 00:09:16,000
But for bigger organizations or the complex projects where they are trying to run the critical applications,

130
00:09:16,000 --> 00:09:21,000
inside their production environment, whatever Prometheus provides may not be sufficient.

131
00:09:21,000 --> 00:09:26,000
That's where organizations will try to integrate Prometheus with the Grafana because with the help of

132
00:09:26,000 --> 00:09:30,000
Grafana, we we can build dashboards of complex in nature.

133
00:09:30,000 --> 00:09:37,000
As of now, with the graph option that we have here, we should be able to track only a few limited

134
00:09:37,000 --> 00:09:40,000
information but not about the many other metrics.

135
00:09:40,000 --> 00:09:44,000
That's why we need to integrate Prometheus with the Grafana.

136
00:09:44,000 --> 00:09:49,000
We already did that with the help of data source configuration inside the Grafana.

137
00:09:49,000 --> 00:09:55,000
So as a next step, let's try to explore the integration between Grafana and Prometheus in the next

138
00:09:55,000 --> 00:09:56,000
lecture.

139
00:09:56,000 --> 00:09:59,000
Thank you and I'll catch you in the next lecture bye.

