1
00:00:00,000 --> 00:00:06,000
In the previous lectures we discussed on how to manage configurations inside the microservices with

2
00:00:06,000 --> 00:00:11,000
the spring boot alone and when we follow Spring boot alone to maintain the configurations, we have

3
00:00:11,000 --> 00:00:15,000
a lot of limitations and drawbacks which we discussed in the previous lecture.

4
00:00:15,000 --> 00:00:21,000
Now, inside this lecture, let me try to introduce a better option or the recommended approach that

5
00:00:21,000 --> 00:00:26,000
you need to use inside any organization where they are building hundreds of microservices.

6
00:00:26,000 --> 00:00:30,000
This option is by using the spring cloud config.

7
00:00:30,000 --> 00:00:36,000
Inside the spring ecosystem, there is a project with the name spring cloud config just to handle the

8
00:00:36,000 --> 00:00:38,000
configurations inside any cloud

9
00:00:38,000 --> 00:00:43,000
native systems like microservices or any cloud applications that you are trying to build.

10
00:00:43,000 --> 00:00:48,000
In this approach, we are going to have a centralized configuration server, which means we need to

11
00:00:48,000 --> 00:00:55,000
build a separate application that is going to act as a configuration server with the help of spring

12
00:00:55,000 --> 00:00:56,000
cloud config.

13
00:00:56,000 --> 00:01:02,000
Using this centralized configuration server, we can overcome all the limitations and drawbacks that

14
00:01:02,000 --> 00:01:07,000
we discussed in the previous slide, and whenever we are using this approach, your centralized configuration

15
00:01:07,000 --> 00:01:14,000
server is going to provide server and client side support for externalized configurations in a distributed

16
00:01:14,000 --> 00:01:20,000
system like microservices, which means all your individual microservice, they can register as a client

17
00:01:20,000 --> 00:01:26,000
with this spring cloud config server and this spring cloud config server can act as a centralized configuration

18
00:01:26,000 --> 00:01:27,000
server.

19
00:01:27,000 --> 00:01:31,000
It will be more clear when we start implementing these inside our microservices.

20
00:01:31,000 --> 00:01:36,000
For now, please note that this configuration server which we are going to build with the help of spring

21
00:01:36,000 --> 00:01:43,000
cloud config, it is going to act as a central place to manage all your external properties or configurations

22
00:01:43,000 --> 00:01:47,000
for all your microservices across all the environments.

23
00:01:47,000 --> 00:01:52,000
The centralized config server that we are going to build with the help of spring cloud config revolves

24
00:01:52,000 --> 00:01:54,000
around two core elements.

25
00:01:54,000 --> 00:02:01,000
The very first one is you are free to store all your configurations or property files inside any location,

26
00:02:01,000 --> 00:02:05,000
like you can store inside a GitHub repo or inside a file system or inside a database.

27
00:02:05,000 --> 00:02:12,000
You choose a location where you want to store all your configurations and properties securely.

28
00:02:12,000 --> 00:02:18,000
Once you store all your properties or configurations, then these configurations are where is going

29
00:02:18,000 --> 00:02:24,000
to oversee the configuration data within the data store, facilitating its management and distributing

30
00:02:24,000 --> 00:02:27,000
to multiple applications like microservices.

31
00:02:27,000 --> 00:02:31,000
So let's try to understand more details about these two core elements.

32
00:02:31,000 --> 00:02:37,000
Like I said, in the very first step, you can save all your configurations and properties inside a

33
00:02:37,000 --> 00:02:43,000
centralized repositories, and this repository can be a database or a GitHub repo or a file system or

34
00:02:43,000 --> 00:02:44,000
inside your classpath

35
00:02:44,000 --> 00:02:50,000
and there are many other options that spring cloud config server supports to store your configuration

36
00:02:50,000 --> 00:02:50,000
properties.

37
00:02:50,000 --> 00:02:56,000
I'll be showing all those options by looking at the official documentation of spring cloud config server.

38
00:02:56,000 --> 00:03:02,000
So once we store all these configuration properties inside a centralized repository. As a next step,

39
00:03:02,000 --> 00:03:08,000
you you're going to create a configuration server with the help of spring cloud config and this is going

40
00:03:08,000 --> 00:03:12,000
to load all the configurations by connecting to your centralized repository.

41
00:03:12,000 --> 00:03:19,000
So now you are config server holds the properties of all the microservices and environments.

42
00:03:19,000 --> 00:03:26,000
Now as a next step, our individual microservices, they can connect with this config server as a config

43
00:03:26,000 --> 00:03:31,000
clients and they can load the configurations during the startup by connecting to this configuration

44
00:03:31,000 --> 00:03:32,000
service.

45
00:03:32,000 --> 00:03:34,000
So this is how it is going to work.

46
00:03:34,000 --> 00:03:39,000
Like you can see, there are three microservices like loans, accounts and cards, all of them during

47
00:03:39,000 --> 00:03:39,000
the startup

48
00:03:39,000 --> 00:03:43,000
They will connect to these centralized configuration server.

49
00:03:43,000 --> 00:03:50,000
This way we are delegating all our properties and configurations to an externalized location and all

50
00:03:50,000 --> 00:03:51,000
our microservices

51
00:03:51,000 --> 00:03:57,000
they are going to read these properties during the startup based upon the profile that is activated.

52
00:03:57,000 --> 00:04:03,000
Apart from supporting all the features of Spring Boot, this config server also overcome all the limitations

53
00:04:03,000 --> 00:04:05,000
that we have discussed in the previous lecture.

54
00:04:05,000 --> 00:04:09,000
So let me show you more details about this project inside the Spring official website.

55
00:04:09,000 --> 00:04:12,000
This is the official website which is spring.io.

56
00:04:12,000 --> 00:04:16,000
Here you can hover on this projects and click on this spring cloud.

57
00:04:16,000 --> 00:04:17,000
Under the Spring Cloud

58
00:04:17,000 --> 00:04:23,000
there are many other sub projects that will help you various challenges while you are building cloud

59
00:04:23,000 --> 00:04:24,000
applications or cloud

60
00:04:24,000 --> 00:04:26,000
native applications or microservices.

61
00:04:26,000 --> 00:04:32,000
Right now we are looking for the spring cloud config, so you can click on this spring cloud config

62
00:04:32,000 --> 00:04:39,000
and this is the project that will help you to build a centralized config server that is going to provide

63
00:04:39,000 --> 00:04:44,000
server and client side support for all your externalized configuration in a distributed system.

64
00:04:44,000 --> 00:04:47,000
I'm assuming you are at least getting some sense.

65
00:04:47,000 --> 00:04:49,000
What is the purpose of this spring cloud config?

66
00:04:49,000 --> 00:04:51,000
Don't worry if something is not clear.

67
00:04:51,000 --> 00:04:57,000
When we start implementing these inside our microservices applications, then it is going to make more

68
00:04:57,000 --> 00:04:59,000
sense to you. Now before I try to close this lecture

69
00:05:00,000 --> 00:05:05,000
let me give a quick introduction about this spring cloud project inside the spring ecosystem.

70
00:05:05,000 --> 00:05:11,000
Like I said before, the Spring Cloud provides various frameworks or projects for developers to quickly

71
00:05:11,000 --> 00:05:17,000
build some of the most common patterns of microservices or any other cloud native applications.

72
00:05:17,000 --> 00:05:23,000
For example, we already saw spring cloud config is one such framework or project available inside the

73
00:05:23,000 --> 00:05:29,000
spring cloud, which is going to help us to overcome the challenge or to implement a common pattern

74
00:05:29,000 --> 00:05:34,000
which is maintaining the configurations inside the microservices environment.

75
00:05:34,000 --> 00:05:40,000
Very similarly, Spring Cloud also has various other projects, which is going to help us to overcome

76
00:05:40,000 --> 00:05:47,000
the challenges and implement common patterns like service registration and service discovery, routing

77
00:05:47,000 --> 00:05:52,000
and tracing, load balancing, spring cloud security, distributed tracing and messaging.

78
00:05:52,000 --> 00:05:56,000
These are the most commonly used projects inside the spring cloud.

79
00:05:56,000 --> 00:06:00,000
But apart from these, there are many, many other projects available inside Spring Cloud.

80
00:06:00,000 --> 00:06:06,000
Inside this section, we are going to focus more on spring cloud config since right now we are focusing

81
00:06:06,000 --> 00:06:08,000
more on the configuration management.

82
00:06:08,000 --> 00:06:13,000
But please note that we are going to use majority of the projects available inside the spring cloud

83
00:06:13,000 --> 00:06:19,000
inside this course to overcome the challenges and implement common patterns inside our microservices.

84
00:06:19,000 --> 00:06:22,000
So this is a very quick introduction I want to give about Spring Cloud.

85
00:06:22,000 --> 00:06:25,000
This spring cloud is different from Spring Boot.

86
00:06:25,000 --> 00:06:27,000
I hope you are clear from the next lecture,

87
00:06:27,000 --> 00:06:30,000
let's start the journey of spring cloud config.

88
00:06:30,000 --> 00:06:32,000
Thank you and I'll catch you in the next lecture bye.

