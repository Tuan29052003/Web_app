1
00:00:00,000 --> 00:00:01,000
Okay

2
00:00:01,000 --> 00:00:04,000
I am assuming you are successful at the assignment.

3
00:00:04,000 --> 00:00:06,000
If not, don't worry.

4
00:00:06,000 --> 00:00:12,000
Anyway, I'm going to cover all the code changes inside the cards and loans microservice right now inside

5
00:00:12,000 --> 00:00:13,000
this lecture.

6
00:00:13,000 --> 00:00:16,000
First let's go to the loans microservice. Like we know,

7
00:00:16,000 --> 00:00:19,000
first we need to go to the LoansController class.

8
00:00:19,000 --> 00:00:22,000
So let me go to the LoansController class.

9
00:00:22,000 --> 00:00:28,000
First I have done the changes related to the autowiring of these environments and LocalContactInfoDto which

10
00:00:28,000 --> 00:00:29,000
I have created.

11
00:00:29,000 --> 00:00:34,000
On top of that, I'm trying to read the build.version property with the help of @Value.

12
00:00:34,000 --> 00:00:40,000
And similarly, I have created a new constructor inside the LoansController and I'm trying to inject

13
00:00:40,000 --> 00:00:42,000
this property which is ILoanService.

14
00:00:42,000 --> 00:00:48,000
After making these initial autowiring related changes, I have created three different APIs towards

15
00:00:48,000 --> 00:00:49,000
the end.

16
00:00:49,000 --> 00:00:55,000
Like you can see, the first API is related to the build-info which will give the response what build

17
00:00:55,000 --> 00:01:00,000
version we are trying to use right now with the help of this Java variable build version and accordingly,

18
00:01:00,000 --> 00:01:07,000
I have mentioned this operation and ApiResponses details as well which will be useful for the 

19
00:01:07,000 --> 00:01:10,000
REST API documentation with the swagger UI.

20
00:01:10,000 --> 00:01:16,000
Now moving on to the next API which will help us to read the JAVA_HOME environment variable.

21
00:01:16,000 --> 00:01:21,000
And the Api path is very similar to Accounts Microservice java-version.

22
00:01:21,000 --> 00:01:21,000
Very similarly

23
00:01:21,000 --> 00:01:28,000
at last we have contact-info API where we are trying to read all the properties that defined inside

24
00:01:28,000 --> 00:01:33,000
the application.yml by populating into the object of LoansContactInfoDto.

25
00:01:33,000 --> 00:01:36,000
So let's try to see what is present inside these 

26
00:01:36,000 --> 00:01:43,000
LoansContactInfoDto. So here since inside the application.yml we are going to have a prefix as loans

27
00:01:43,000 --> 00:01:44,000
for Loans Microservice.

28
00:01:44,000 --> 00:01:46,000
We need to make sure we are using the same.

29
00:01:46,000 --> 00:01:48,000
After that everything is going to be same.

30
00:01:48,000 --> 00:01:54,000
Like it is going to be a record class and it is going to accept different fields like message, contact

31
00:01:54,000 --> 00:02:00,000
details and on call support by following the data type based upon the properties that we have defined

32
00:02:00,000 --> 00:02:02,000
inside the application.yml.

33
00:02:02,000 --> 00:02:08,000
Now to activate these configuration properties inside the loans application class, we need to make

34
00:02:08,000 --> 00:02:13,000
sure we are mentioning this annotation which is @EnableConfigurationProperties and to this

35
00:02:13,000 --> 00:02:16,000
make sure we are passing the Dto class of 

36
00:02:16,000 --> 00:02:17,000
LoansContactInfoDto.

37
00:02:18,000 --> 00:02:24,000
If you go to the resources folder, I have created two new Yaml files which is application_prod

38
00:02:24,000 --> 00:02:27,000
and application_qa.yml file.

39
00:02:27,000 --> 00:02:33,000
First inside the application.yml we have the properties related to the loans microservice like

40
00:02:33,000 --> 00:02:38,000
build version loans message, loans contact details and loans on call support.

41
00:02:38,000 --> 00:02:42,000
I just try to kept everything same except the values of this message,

42
00:02:42,000 --> 00:02:48,000
contact details and on call support. Post that we need to import the new config files that we have created

43
00:02:48,000 --> 00:02:52,000
which is application_qa.yaml and application_prod.yml.

44
00:02:52,000 --> 00:02:58,000
And as of now you can see I'm trying to activate a profile qa by hardcoding the value inside the application.yml file.

45
00:02:58,000 --> 00:02:59,000
.

46
00:02:59,000 --> 00:03:03,000
Now let's go and validate the application_prod.yml.

47
00:03:03,000 --> 00:03:07,000
You can see I'm mentioning to the spring boot framework to consider this

48
00:03:07,000 --> 00:03:13,000
whenever someone is trying to activate a profile prod and you can see I have the build version and other

49
00:03:13,000 --> 00:03:19,000
properties which has prefixed as loans, the same kind of setup is present inside the application_qa.yml.

50
00:03:19,000 --> 00:03:21,000
.

51
00:03:21,000 --> 00:03:25,000
So these are the changes that we need to do inside the loans microservice.

52
00:03:25,000 --> 00:03:28,000
Most of the changes are very similar to accounts micro service.

53
00:03:28,000 --> 00:03:31,000
Now let's try to test these APIs.

54
00:03:31,000 --> 00:03:35,000
For the same I'm going to the loans application and starting the application in debug mode.

55
00:03:35,000 --> 00:03:43,000
Now inside the postman under the loans folder, you have the APIs like build-info, java-version and

56
00:03:43,000 --> 00:03:43,000
contact info.

57
00:03:43,000 --> 00:03:46,000
So first let me try to invoke this build-info.

58
00:03:46,000 --> 00:03:50,000
So I'm trying to invoke this since right now the qa profile is activated.

59
00:03:50,000 --> 00:03:52,000
We should get the output 2.0.

60
00:03:52,000 --> 00:03:53,000
So this is working fine.

61
00:03:53,000 --> 00:03:59,000
The Java version anyway will come based upon that JAVA_HOME path setup inside my local system.

62
00:03:59,000 --> 00:04:04,000
So that is what coming inside the output. Now going to the contact info.

63
00:04:04,000 --> 00:04:07,000
Here we'll get the details from the qa profile.

64
00:04:07,000 --> 00:04:11,000
Like you can see this is the message from the qa profile and these are the contact details and on call

65
00:04:11,000 --> 00:04:14,000
support details in the qa profile.

66
00:04:14,000 --> 00:04:20,000
Now let's try to quickly try to activate a profile of production using externalized configuration.

67
00:04:20,000 --> 00:04:20,000
For the same,

68
00:04:20,000 --> 00:04:27,000
I'm going to stop this server and right click on the loans application, select this Modify Run configurations

69
00:04:27,000 --> 00:04:28,000
and maximize this.

70
00:04:28,000 --> 00:04:37,000
Here I'm going to mention the property which is --spring.profiles.active=prod.

71
00:04:37,000 --> 00:04:37,000
.

72
00:04:37,000 --> 00:04:42,000
I'm just trying to activate the prod profile, so let me apply these changes and click on

73
00:04:42,000 --> 00:04:42,000
ok.

74
00:04:42,000 --> 00:04:45,000
And start the application again in debug mode.

75
00:04:45,000 --> 00:04:49,000
Now we should get the response from the production profile properties.

76
00:04:49,000 --> 00:04:52,000
I'm just trying to invoke these contact info.

77
00:04:52,000 --> 00:04:55,000
You can see I'm getting the prod related properties inside the response.

78
00:04:55,000 --> 00:05:00,000
The same you can confirm with the build info where we will get the 1.0 as an output.

79
00:05:00,000 --> 00:05:01,000
With this,

80
00:05:01,000 --> 00:05:04,000
all the loans related APIs are working perfectly.

81
00:05:04,000 --> 00:05:10,000
Now, let me stop this application and try to show you what I have done inside the cards microservice, inside

82
00:05:10,000 --> 00:05:12,000
the cards Microservices

83
00:05:12,000 --> 00:05:13,000
also, it's the same story

84
00:05:13,000 --> 00:05:19,000
first you will go to the CardsController inside the CardsController, first you will do all the 

85
00:05:19,000 --> 00:05:24,000
autowiring and dependency injection related changes at the top of the class post that you are going to create

86
00:05:24,000 --> 00:05:26,000
three different REST APIs.

87
00:05:26,000 --> 00:05:31,000
The very first one, which is going to return the build information based upon the build version Java

88
00:05:31,000 --> 00:05:36,000
variable, followed by the API, which is going to return the environment variable with the name

89
00:05:36,000 --> 00:05:43,000
JAVA_HOME and at last we have the contact info REST API, which is going to return all the details

90
00:05:43,000 --> 00:05:46,000
defined inside this object CardsInfoDto.

91
00:05:46,000 --> 00:05:48,000
So this Dto is also a record class.

92
00:05:48,000 --> 00:05:54,000
Please make sure this has the prefix as cards post that you will go to the CardsApplication and you

93
00:05:54,000 --> 00:05:55,000
will mention these

94
00:05:55,000 --> 00:06:00,000
@EnableConfigurationProperties annotation along with the CardsContactInfoDto class.

95
00:06:00,000 --> 00:06:05,000
After making all these changes, the next set of changes are inside the application.yml and

96
00:06:05,000 --> 00:06:10,000
application_prod.yaml and application_qa.yml.

97
00:06:10,000 --> 00:06:15,000
So once you have defined all these details you can start your application in debug mode.

98
00:06:15,000 --> 00:06:18,000
So let me try to start this in debug mode.

99
00:06:18,000 --> 00:06:24,000
First, we will see by default the profile is qa activated because inside the application.yml file

100
00:06:24,000 --> 00:06:26,000
we right now activated the profile.

101
00:06:27,000 --> 00:06:31,000
So let me go to the postman here under the cards folder.

102
00:06:31,000 --> 00:06:34,000
You can see there are APIs like build info.

103
00:06:34,000 --> 00:06:35,000
First, I will try to invoke this.

104
00:06:35,000 --> 00:06:38,000
You will get 2.0 like expected Java version

105
00:06:38,000 --> 00:06:41,000
It is going to work like expected.

106
00:06:41,000 --> 00:06:42,000
Coming to the ContactInfo.

107
00:06:42,000 --> 00:06:45,000
You are going to get the details from the profile.

108
00:06:45,000 --> 00:06:51,000
Let's try to activate the prod profile by using command line arguments.

109
00:06:51,000 --> 00:06:53,000
For the same, first let me stop this server now

110
00:06:53,000 --> 00:06:59,000
I'll right click on this CardsApplication and select this Modify Run configurations post that I'm going

111
00:06:59,000 --> 00:07:05,000
to mention the command line arguments with the prefix hyphen hyphen followed by spring.profiles.active

112
00:07:05,000 --> 00:07:08,000
is equal to prod.

113
00:07:08,000 --> 00:07:12,000
So let me apply these changes and start the application again.

114
00:07:12,000 --> 00:07:15,000
So I'm going to the postman now to validate the changes.

115
00:07:15,000 --> 00:07:18,000
Here I'm trying to invoke this contact-info API.

116
00:07:18,000 --> 00:07:21,000
You can see I'm getting the properties from the prod profile.

117
00:07:21,000 --> 00:07:26,000
The same you can observe for the build-info where you will get the 1.0 as an output.

118
00:07:26,000 --> 00:07:32,000
This way we have done all the required changes in all the three microservices like accounts, cards

119
00:07:32,000 --> 00:07:33,000
and loans.

120
00:07:33,000 --> 00:07:37,000
If you have any questions, please, please refer to the GitHub repo.

121
00:07:37,000 --> 00:07:42,000
Please make sure all your changes are very similar to like we discussed and please be very careful with

122
00:07:42,000 --> 00:07:44,000
these application.yml files.

123
00:07:44,000 --> 00:07:49,000
Even if you try to mess up with some space, your profiles will not get activated.

124
00:07:49,000 --> 00:07:56,000
For example, instead of these profiles under the spring parent, if you try to provide one more space

125
00:07:56,000 --> 00:08:02,000
that will take these inside the config parent, with that your profile will never get activated because

126
00:08:02,000 --> 00:08:04,000
you have mentioned in a wrong location.

127
00:08:04,000 --> 00:08:08,000
That's why this spacing is very important inside the Yaml file.

128
00:08:08,000 --> 00:08:12,000
I hope you are super, super clear, but like I said, this is not the best approach.

129
00:08:12,000 --> 00:08:18,000
This is the most basic approach that any microservice application can use for organizations where they

130
00:08:18,000 --> 00:08:21,000
are going to build hundreds of microservices.

131
00:08:21,000 --> 00:08:23,000
This approach may not work.

132
00:08:23,000 --> 00:08:25,000
It has some serious disadvantages.

133
00:08:25,000 --> 00:08:29,000
So let's try to understand what are those disadvantages in the next lecture.

134
00:08:29,000 --> 00:08:32,000
Thank you and I'll catch you in the next lecture bye.

