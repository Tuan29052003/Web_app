1
00:00:00,000 --> 00:00:01,000
In this lecture,

2
00:00:01,000 --> 00:00:05,000
let's try to implement circuit breaker pattern inside accounts microservice.

3
00:00:05,000 --> 00:00:06,000
Inside our accounts

4
00:00:06,000 --> 00:00:07,000
microservice.

5
00:00:07,000 --> 00:00:14,000
If you can recall, there is an REST API with the name fetchCustomerDetails. As part of this REST API.

6
00:00:14,000 --> 00:00:20,000
My accounts microservice is going to invoke cards, microservice and loans microservice.

7
00:00:20,000 --> 00:00:26,000
But if one of the dependent service like loans and cards microservice is responding very slowly or if

8
00:00:26,000 --> 00:00:32,000
they are completely down or there are some network issues. In such scenarios like we discussed previously,

9
00:00:32,000 --> 00:00:37,000
it is going to have a ripple effect on my accounts microservice and from my account microservice to

10
00:00:37,000 --> 00:00:38,000
Gateway server.

11
00:00:38,000 --> 00:00:43,000
That's why with the current code available inside the accounts microservice, it is going to create

12
00:00:43,000 --> 00:00:50,000
serious problems when one of the dependent microservice is down to overcome this problem, let's try

13
00:00:50,000 --> 00:00:55,000
to implement circuit breaker pattern inside our accounts microservice as well.

14
00:00:55,000 --> 00:01:01,000
Our accounts microservice is leveraging feign client to invoke loans and cards microservice.

15
00:01:01,000 --> 00:01:08,000
That's why we need to see if there is any integration between feign client and circuit breaker is available,

16
00:01:08,000 --> 00:01:14,000
which we can leverage with less efforts or less configurations inside accounts

17
00:01:14,000 --> 00:01:20,000
microservice. For the same inside the official website of spring.io, we can click on this Spring cloud

18
00:01:20,000 --> 00:01:20,000
project.

19
00:01:20,000 --> 00:01:25,000
Under this spring cloud project, we can look for Spring Cloud, open feign.

20
00:01:25,000 --> 00:01:26,000
So this is the project.

21
00:01:26,000 --> 00:01:31,000
So let me click on this and I'll click on this LEARN button and open the official documentation.

22
00:01:31,000 --> 00:01:37,000
Inside the official documentation, you will be able to see few sections related to Circuit Breaker.

23
00:01:37,000 --> 00:01:43,000
If you can scroll down here, there is an section explaining about Feign Spring Cloud Circuit breaker

24
00:01:43,000 --> 00:01:44,000
support.

25
00:01:44,000 --> 00:01:45,000
Let me click on that.

26
00:01:45,000 --> 00:01:47,000
You see there is a statement here.

27
00:01:47,000 --> 00:01:54,000
If Spring Cloud circuit breaker is on the classpath and if we mention spring.cloud.open.

28
00:01:54,000 --> 00:01:59,000
circuitBreaker.enabled is equal to true inside our application.yml.

29
00:01:59,000 --> 00:02:03,000
Feign will wrap all the methods with a circuit breaker.

30
00:02:03,000 --> 00:02:04,000
So this is super beauty.

31
00:02:04,000 --> 00:02:08,000
We don't have to make much changes whenever we are using feign client.

32
00:02:08,000 --> 00:02:12,000
So let me add these dependency related to spring cloud circuit breaker.

33
00:02:12,000 --> 00:02:18,000
After that I'll also enable this property inside my application.yml. For the same, I'm going to open

34
00:02:18,000 --> 00:02:22,000
the pom.xml present inside my accounts microservice.

35
00:02:22,000 --> 00:02:24,000
So let me open this file.

36
00:02:24,000 --> 00:02:32,000
And here just after the spring-cloud-starter-netflix-eureka-client, I'm going to mention a same dependency

37
00:02:32,000 --> 00:02:35,000
and change the artifactId details here.

38
00:02:35,000 --> 00:02:42,000
The artifact ID that we need to mention is, springcloud-starter-circuitBreaker-

39
00:02:42,000 --> 00:02:43,000
resiliency4j.

40
00:02:43,000 --> 00:02:49,000
Since we have not built accounts microservice based upon spring reactor, we should not use the

41
00:02:49,000 --> 00:02:49,000
first one.

42
00:02:49,000 --> 00:02:51,000
Instead we should use the third one.

43
00:02:51,000 --> 00:02:54,000
So with this we have successfully add these dependency.

44
00:02:54,000 --> 00:03:00,000
Let me load these changes with the help of the maven reload and post that I'm going to do a build.

45
00:03:00,000 --> 00:03:07,000
Once the build is completed, I'm going to open the application.yml present inside my accounts microservice.

46
00:03:07,000 --> 00:03:09,000
Inside my application.yml.

47
00:03:09,000 --> 00:03:16,000
I need to mention this property, so let me take this property and paste under the root element spring.

48
00:03:16,000 --> 00:03:19,000
So I'll scroll down and here I'm going to mention the property.

49
00:03:19,000 --> 00:03:25,000
As soon as I paste it, you will be able to see it is automatically converted into Yaml format.

50
00:03:25,000 --> 00:03:31,000
So first I need to remove the spring because I already have this root element at the top post that I'll

51
00:03:31,000 --> 00:03:36,000
bring the cloud to the correct location which is just under the spring element.

52
00:03:36,000 --> 00:03:42,000
If you can scroll down, as of now it is under the spring element, so the portion of the cloud is looking

53
00:03:42,000 --> 00:03:46,000
good and now I'll bring openfeign just under the cloud and post that,

54
00:03:46,000 --> 00:03:51,000
I'll also bring the circuit breaker under the openfeign followed by enabled.

55
00:03:51,000 --> 00:03:55,000
And at last I'm going to mention the value which is enabled colon

56
00:03:55,000 --> 00:04:02,000
as true with this we have activated circuit breaker for all the openfeign clients inside the accounts

57
00:04:02,000 --> 00:04:03,000
microservice.

58
00:04:03,000 --> 00:04:04,000
So let me save this changes.

59
00:04:04,000 --> 00:04:10,000
Apart from these changes, we should also mention other properties inside the application.yml,

60
00:04:10,000 --> 00:04:13,000
just like how we mentioned inside the gateway server.

61
00:04:13,000 --> 00:04:15,000
So let me copy all these values.

62
00:04:15,000 --> 00:04:20,000
We can mention the same values inside accounts microservice as well.

63
00:04:20,000 --> 00:04:21,000
Towards the end.

64
00:04:21,000 --> 00:04:25,000
Once I mention these properties I can save this file and do a build.

65
00:04:25,000 --> 00:04:26,000
Once the build is completed.

66
00:04:26,000 --> 00:04:29,000
Let's go to the official documentation.

67
00:04:29,000 --> 00:04:31,000
Here there is a lot of other information.

68
00:04:31,000 --> 00:04:37,000
If you are interested, you can read, but the information that I'm interested is Feign Spring Cloud

69
00:04:37,000 --> 00:04:38,000
CircuitBreaker Fallbacks.

70
00:04:38,000 --> 00:04:43,000
We need to define the fallback mechanism for our cards and loans

71
00:04:43,000 --> 00:04:46,000
microservice. What should happen when loans microservice is down.

72
00:04:46,000 --> 00:04:51,000
So that's why to mention the fallback there are some instructions given here.

73
00:04:51,000 --> 00:04:55,000
First, we need to make sure on top of the interfaces that we have created, we need to mention these

74
00:04:55,000 --> 00:04:59,000
fallback against this annotation feign client and to this fallback,

75
00:05:00,000 --> 00:05:02,000
we need to provide a fallback class.

76
00:05:02,000 --> 00:05:07,000
So the logic that you need to write inside this Fallback.class is first, you need to make sure you

77
00:05:07,000 --> 00:05:13,000
are implementing the same interface of your feign client and override the abstract methods that you have defined

78
00:05:13,000 --> 00:05:14,000
inside the interface.

79
00:05:14,000 --> 00:05:21,000
And when you override these methods, you can write your fallback logic, which means feign client along

80
00:05:21,000 --> 00:05:27,000
with the circuit breaker pattern, whenever there is an issue or whenever there is an exception while

81
00:05:27,000 --> 00:05:32,000
invoking the actual microservice like loans and cards, instead of throwing some RuntimeException,

82
00:05:32,000 --> 00:05:38,000
it is going to execute the logic that you have defined inside these fallback methods.

83
00:05:38,000 --> 00:05:41,000
So let's try to implement the same inside our accounts

84
00:05:41,000 --> 00:05:46,000
microservice. First, I'll go to the package where we have written our feign client interfaces.

85
00:05:46,000 --> 00:05:50,000
Under this service we have a package with the name client and the client

86
00:05:50,000 --> 00:05:54,000
we have two interfaces like CardsClient and LoansClient. Inside the same package

87
00:05:54,000 --> 00:05:57,000
I'm going to create two different classes.

88
00:05:57,000 --> 00:06:00,000
The very first one is LoansFallback.

89
00:06:00,000 --> 00:06:05,000
So this is the class that I want to create and this class is going to implement LoansFeignClient.

90
00:06:06,000 --> 00:06:11,000
On top of this class, I'm going to mention @Component annotation post that I'm

91
00:06:11,000 --> 00:06:16,000
going to override the methods available inside this interface.

92
00:06:16,000 --> 00:06:21,000
So let me click on this implement methods and override the methods you can see as of now my business

93
00:06:21,000 --> 00:06:26,000
logic is simply to return the null value from this fallback method.

94
00:06:26,000 --> 00:06:32,000
Instead of throwing a RuntimeException to the client applications or to the gateway server, I'm going

95
00:06:32,000 --> 00:06:36,000
to send the null information related to loans.

96
00:06:36,000 --> 00:06:42,000
And with this at least my client applications will receive accounts and cards microservice related

97
00:06:42,000 --> 00:06:42,000
information.

98
00:06:42,000 --> 00:06:48,000
And if you don't have this fallback mechanism, even if two microservices are working but loans is not

99
00:06:48,000 --> 00:06:51,000
working, the overall response is going to be a RuntimeException.

100
00:06:51,000 --> 00:06:56,000
So we're trying to avoid that with the help of this fallback mechanism and circuit breaker pattern.

101
00:06:56,000 --> 00:07:00,000
Let me try to create a similar fallback for loans

102
00:07:00,000 --> 00:07:01,000
microservice as well.

103
00:07:01,000 --> 00:07:07,000
So for the same, I'm going to copy the same class, but rename this to the new class name, which is

104
00:07:07,000 --> 00:07:10,000
CardsFallback under this CardsFallback,

105
00:07:10,000 --> 00:07:13,000
first, we need to implement CardsFeignClient.

106
00:07:13,000 --> 00:07:14,000
With that, we'll get an error.

107
00:07:14,000 --> 00:07:20,000
First, let me remove this override method and post that I'm going to hover on this class and click on

108
00:07:20,000 --> 00:07:27,000
this implement methods and confirm this okay button which will create a override method inside my CardsFallback

109
00:07:27,000 --> 00:07:28,000
.

110
00:07:28,000 --> 00:07:34,000
Here also, I'm going to return null whenever my cards microservice is having some issues, but in your real

111
00:07:34,000 --> 00:07:36,000
projects you can write your own business logic

112
00:07:36,000 --> 00:07:39,000
or maybe you want to send some values from the cache

113
00:07:39,000 --> 00:07:42,000
or maybe you want to read the details from a different database.

114
00:07:42,000 --> 00:07:43,000
So it is up to you.

115
00:07:43,000 --> 00:07:46,000
The complete power is right now with the developer.

116
00:07:46,000 --> 00:07:52,000
After defining these classes, we need to go to the Feign interfaces under the LoansFeignClient first

117
00:07:52,000 --> 00:07:59,000
I'm going to mention name parameter just before loans and post that I'm going to invoke a new parameter

118
00:07:59,000 --> 00:08:06,000
which is fallback and to this fallback we need to mention the class which is LoansFallback.class.

119
00:08:06,000 --> 00:08:08,000
So with this we should be good.

120
00:08:08,000 --> 00:08:13,000
We have implemented circuit breaker pattern along with the fallback for our loans

121
00:08:13,000 --> 00:08:14,000
microservice.

122
00:08:14,000 --> 00:08:21,000
Very similarly, let me go to the CardsFeignClient interface and here also I'm going to first mention

123
00:08:21,000 --> 00:08:26,000
the name parameter just before the cards name and post that fallback parameter.

124
00:08:26,000 --> 00:08:29,000
And to this we need to mention CardsFallback.class.

125
00:08:29,000 --> 00:08:34,000
So whenever there is an exception, we are executing a fallback mechanism which will return a null value.

126
00:08:34,000 --> 00:08:40,000
So let's go to the service layer and check if we need to perform any null checks. For the same,

127
00:08:40,000 --> 00:08:46,000
I'm going to open this CustomerServiceImpl. Here, whenever we are trying to invoke the LoansFeignClient,

128
00:08:46,000 --> 00:08:49,000
we are getting these entity from this entity.

129
00:08:49,000 --> 00:08:51,000
We are trying to invoke the get party.

130
00:08:51,000 --> 00:08:55,000
But with the new code that we have written, there are some scenarios where this can come as null,

131
00:08:55,000 --> 00:08:57,000
especially with the fallback code.

132
00:08:57,000 --> 00:09:03,000
So that's why we need to make sure we are putting some null check on top of this code.

133
00:09:03,000 --> 00:09:09,000
So here I'm trying to mention null not equal to LoansResponseEntity.

134
00:09:09,000 --> 00:09:14,000
If it is not null only then please execute this line of code.

135
00:09:14,000 --> 00:09:15,000
Very similarly,

136
00:09:15,000 --> 00:09:18,000
I want to mention for cards microservice as well.

137
00:09:18,000 --> 00:09:23,000
So let me copy these cards related code and paste it inside the if loop.

138
00:09:23,000 --> 00:09:26,000
And similarly I'm going to replace this object name.

139
00:09:26,000 --> 00:09:28,000
So with this we should be good.

140
00:09:28,000 --> 00:09:31,000
Let me save this changes and do a build.

141
00:09:31,000 --> 00:09:35,000
I hope you are clear with all the changes that we have done so far in the next lecture, let's try to

142
00:09:35,000 --> 00:09:39,000
see the complete demo of the changes that we have done so far.

143
00:09:39,000 --> 00:09:42,000
Thank you and I'll catch you in the next lecture bye.

