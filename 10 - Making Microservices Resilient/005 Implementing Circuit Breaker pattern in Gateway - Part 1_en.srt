1
00:00:00,000 --> 00:00:04,000
As of now, we understand what is a circuit breaker pattern.

2
00:00:04,000 --> 00:00:10,000
Now let's try to implement this pattern inside our microservices so that it will be more clear for you

3
00:00:10,000 --> 00:00:13,000
when we see this circuit breaker pattern in action.

4
00:00:13,000 --> 00:00:19,000
To get started with the resiliency related changes, since we are into a new section, I'm going to

5
00:00:19,000 --> 00:00:23,000
create a new folder inside my workspace location. For the same,

6
00:00:23,000 --> 00:00:28,000
first, I'm going to copy the code of section 9  and paste it inside the same location.

7
00:00:28,000 --> 00:00:35,000
Now I'm going to rename this folder to section_10, because inside this folder only we are

8
00:00:35,000 --> 00:00:38,000
going to make all the changes related to resiliency.

9
00:00:38,000 --> 00:00:47,000
So let me remove these .idea related folder so that I can open this section_10 inside my IntelliJ

10
00:00:47,000 --> 00:00:48,000
idea.

11
00:00:48,000 --> 00:00:50,000
Here I'm going to click on this open button.

12
00:00:50,000 --> 00:00:54,000
After that I'll go to the storage, workspaces, microservices.

13
00:00:54,000 --> 00:00:58,000
Under Micro Services we have the folder which is section_10.

14
00:00:58,000 --> 00:01:01,000
I'm going to select that and click on this open button.

15
00:01:01,000 --> 00:01:06,000
This will open all the Maven projects inside section_10.

16
00:01:06,000 --> 00:01:13,000
Once all these projects are loaded into your workspace, you can do a clean build and enable annotation

17
00:01:13,000 --> 00:01:15,000
processing for Lombok Library.

18
00:01:15,000 --> 00:01:21,000
With this now we can get started with the changes related to resiliency4j. Inside resiliency4j changes

19
00:01:21,000 --> 00:01:24,000
first, we are trying to discuss about the circuit breaker pattern.

20
00:01:24,000 --> 00:01:28,000
I'm going to implement circuit breaker pattern at two different places.

21
00:01:28,000 --> 00:01:34,000
One is at the Gateway server and the other one is inside the individual microservices like accounts

22
00:01:34,000 --> 00:01:34,000
microservice.

23
00:01:34,000 --> 00:01:41,000
This way I'm going to show you different approaches on how we can implement these circuit breaker pattern

24
00:01:41,000 --> 00:01:44,000
inside our microservices applications. Inside this lecture,

25
00:01:44,000 --> 00:01:50,000
first, let's try to understand how to implement circuit breaker pattern inside the Gateway server. Because

26
00:01:50,000 --> 00:01:55,000
as of now, Gateway Server is acting as an edge server inside our microservice network.

27
00:01:55,000 --> 00:02:02,000
That's why in your real projects there might be some business scenario or there might be some requirements

28
00:02:02,000 --> 00:02:07,000
from your clients saying that they want you to implement circuit breaker pattern at the Edge server

29
00:02:07,000 --> 00:02:08,000
itself.

30
00:02:08,000 --> 00:02:11,000
So let's try to understand how to implement the same. For the same,

31
00:02:11,000 --> 00:02:18,000
first I need to open the pom.xml of Gateway server. Inside this pom.xml just after these dependency

32
00:02:18,000 --> 00:02:19,000
which is related to Netflix

33
00:02:19,000 --> 00:02:25,000
Eureka Client I'm going to copy the same dependency again, but here I'm going to change this artifact

34
00:02:25,000 --> 00:02:31,000
ID, the artifact ID that we need to add whenever we are trying to leverage circuit breaker pattern

35
00:02:31,000 --> 00:02:34,000
inside Gateway Server is Spring cloud starter.

36
00:02:34,000 --> 00:02:41,000
After the starter we need to mention circuit breaker and after the circuit breaker it should be

37
00:02:41,000 --> 00:02:48,000
reactor-resiliency4j. Since Edge server, our gateway server built based upon spring react to model,

38
00:02:48,000 --> 00:02:54,000
we need to make sure we are mentioning the artifact ID as spring cloud starter circuitbreaker-reactor-

39
00:02:54,000 --> 00:02:56,000
resilience4j.

40
00:02:56,000 --> 00:02:58,000
So let me load the maven changes.

41
00:02:58,000 --> 00:03:05,000
Once we add this dependency as a next step, we can go to the Spring Boot main class, which is Gateway

42
00:03:05,000 --> 00:03:06,000
server application.

43
00:03:06,000 --> 00:03:10,000
Here you can see we have done all routing related configurations.

44
00:03:10,000 --> 00:03:15,000
As of now we are trying to use filters like rewrite path and add response header.

45
00:03:15,000 --> 00:03:21,000
Very similarly, I'm going to leverage one of the inbuilt provided filter by the spring Cloud gateway,

46
00:03:21,000 --> 00:03:25,000
and this filter is none other than circuit breaker.

47
00:03:25,000 --> 00:03:32,000
So if you try to invoke the circuit breaker filter, it is going to accept some lambda based configurations.

48
00:03:32,000 --> 00:03:38,000
So let me create a lambda expression inside this lambda expression using the same config variable.

49
00:03:38,000 --> 00:03:42,000
I'm going to first invoke the method which is setname.

50
00:03:42,000 --> 00:03:49,000
So using the set name method, we are going to assign a name to our circuit breaker because inside your

51
00:03:49,000 --> 00:03:55,000
application you may have any number of circuit breaker configurations related to various REST

52
00:03:55,000 --> 00:03:57,000
APIs are related to various microservices.

53
00:03:57,000 --> 00:04:01,000
Here you can see we are trying to define the circuit breaker configurations.

54
00:04:01,000 --> 00:04:07,000
Whenever someone is trying to invoke this specific path which is related to accounts microservice.

55
00:04:07,000 --> 00:04:10,000
So the name that we can give here is accountCircuitBreaker.

56
00:04:10,000 --> 00:04:16,000
Since we are trying to make the changes inside accounts, microservice related configurations, this

57
00:04:16,000 --> 00:04:21,000
name is going to be super apt, but there is no restriction that we need to use this name only we can

58
00:04:21,000 --> 00:04:22,000
use any name. With this

59
00:04:22,000 --> 00:04:28,000
we have successfully created a circuit breaker for accounts microservice related paths.

60
00:04:28,000 --> 00:04:33,000
As a next step, I need to provide some properties inside my application.yml.

61
00:04:33,000 --> 00:04:37,000
So let me go to the application.yml.

62
00:04:37,000 --> 00:04:42,000
Here towards the end I'm going to mention the circuit breaker related configurations, so let me copy few

63
00:04:42,000 --> 00:04:45,000
properties here so that we can discuss in detail.

64
00:04:45,000 --> 00:04:49,000
You can also get these properties from the GitHub repo location.

65
00:04:49,000 --> 00:04:51,000
So here I'm trying to paste few properties.

66
00:04:51,000 --> 00:04:55,000
You can see the route element is resiliency4j.circuitbreaker.

67
00:04:55,000 --> 00:05:00,000
Under these we need to mention the element name configs followed by default and

68
00:05:00,000 --> 00:05:02,000
sliding window size.

69
00:05:02,000 --> 00:05:05,000
here I have mentioned the sliding window size as 10.

70
00:05:05,000 --> 00:05:06,000
What is the purpose of this property?

71
00:05:06,000 --> 00:05:12,000
Using this property, we are communicating to the circuit breaker pattern on how many requests it has

72
00:05:12,000 --> 00:05:17,000
to initially monitor before it tries to change the status from close to open.

73
00:05:17,000 --> 00:05:23,000
In other words, with this property, I'm telling to my circuit breaker pattern, please at least monitor

74
00:05:23,000 --> 00:05:26,000
10 requests coming towards my accounts

75
00:05:26,000 --> 00:05:32,000
microservice. After monitoring ten requests, you can take the decision whether to continue with the

76
00:05:32,000 --> 00:05:35,000
close status or to move to the open status.

77
00:05:35,000 --> 00:05:42,000
The next property I have mentioned here is, permitted number of calls in half open status. Like we are

78
00:05:42,000 --> 00:05:43,000
discussing previously.

79
00:05:43,000 --> 00:05:49,000
Once my circuit breaker pattern moved into open status, it will never be in open status forever.

80
00:05:49,000 --> 00:05:56,000
Periodically it is going to move to the half open state and it is going to allow certain amount of traffic

81
00:05:56,000 --> 00:06:02,000
to the accounts microservice and since circuit breaker pattern cannot decide how many requests it has

82
00:06:02,000 --> 00:06:06,000
to pass, we need to provide such information using this property.

83
00:06:06,000 --> 00:06:13,000
So here I have mentioned value2 this means I want my secure breaker pattern to allow to request in

84
00:06:13,000 --> 00:06:14,000
the half open status.

85
00:06:14,000 --> 00:06:20,000
Based upon how these two requests are processed, it can decide whether to go back to the open state

86
00:06:20,000 --> 00:06:25,000
or move to the closed state, and the next property is failure rate threshold.

87
00:06:25,000 --> 00:06:29,000
Here I have mentioned 50, 50 means 50%. With this

88
00:06:29,000 --> 00:06:36,000
what I'm trying to communicate here is, if at least 50% of my requests are failed, then my circuit breaker

89
00:06:36,000 --> 00:06:40,000
pattern can move to the open state from the closed state.

90
00:06:40,000 --> 00:06:44,000
And the last property we have here is wait duration in open state.

91
00:06:44,000 --> 00:06:48,000
So here I have mentioned 10,000, which indicates 10,000 milliseconds.

92
00:06:48,000 --> 00:06:55,000
So with this configuration, my circuit breaker pattern, it is going to wait 10s whenever it tries

93
00:06:55,000 --> 00:06:58,000
to move to the half open state and allow the partial traffic.

94
00:06:58,000 --> 00:07:00,000
I hope these are clear.

95
00:07:00,000 --> 00:07:02,000
You can see we have mentioned default.

96
00:07:02,000 --> 00:07:08,000
That means these properties are applicable for all kind of circuit breakers that you are going to create

97
00:07:08,000 --> 00:07:10,000
inside your microservice.

98
00:07:10,000 --> 00:07:15,000
But in case if you want to go with different, different properties for different, different circuit breakers,

99
00:07:15,000 --> 00:07:21,000
then you need to use this circuit breaker name, which is accountCircuitBreaker and mention the same

100
00:07:21,000 --> 00:07:22,000
in the place of default.

101
00:07:22,000 --> 00:07:26,000
This way we can also mention these properties specific to a circuit breaker pattern.

102
00:07:26,000 --> 00:07:29,000
After making these properties, we should be good.

103
00:07:29,000 --> 00:07:31,000
We can see these in action.

104
00:07:31,000 --> 00:07:34,000
So let me save these changes and do a build.

105
00:07:34,000 --> 00:07:38,000
Once the build is completed, we can start the microservices. Like first

106
00:07:38,000 --> 00:07:45,000
I'll try to start the config server because all our microservices are dependent on the config server.

107
00:07:45,000 --> 00:07:47,000
After config server

108
00:07:47,000 --> 00:07:53,000
I'm going to start the Eureka server since all our individual microservices and gateway server they

109
00:07:53,000 --> 00:07:55,000
need to register with the Eureka server.

110
00:07:55,000 --> 00:08:00,000
We need to make sure Eureka server is started before the individual microservices.

111
00:08:00,000 --> 00:08:07,000
Next, I'm going to start accounts microservice using the main class inside this project with the name

112
00:08:07,000 --> 00:08:08,000
AccountsApplication.

113
00:08:08,000 --> 00:08:11,000
So this will start accounts microservice in few seconds.

114
00:08:11,000 --> 00:08:17,000
Next, I'm not going to start cards and loans microservice because I'm going to show you the demo of

115
00:08:17,000 --> 00:08:20,000
circuit breaker pattern with accounts microservice alone.

116
00:08:20,000 --> 00:08:25,000
Even inside the Gateway server application, we have made the circuit breaker related changes only for

117
00:08:25,000 --> 00:08:27,000
accounts microservice. If needed

118
00:08:27,000 --> 00:08:31,000
you can also make these changes for other microservices as well.

119
00:08:31,000 --> 00:08:34,000
After accounts microservice started successfully.

120
00:08:34,000 --> 00:08:40,000
I need to start my gateway server so that we can start invoking our accounts

121
00:08:40,000 --> 00:08:42,000
microservice APIs.

122
00:08:42,000 --> 00:08:45,000
Now let me go to the browser. Here inside the browser

123
00:08:45,000 --> 00:08:48,000
first, I'm going to validate Eureka Dashboard.

124
00:08:48,000 --> 00:08:49,000
Inside Eureka Dashboard

125
00:08:49,000 --> 00:08:53,000
you can see both accounts and Gateway Server are registered successfully.

126
00:08:53,000 --> 00:09:02,000
As a next step, I'm going to open the actuator path of my gateway server at the port 8072/actuator.

127
00:09:02,000 --> 00:09:07,000
You can see these are all the URLs supported by my actuator.

128
00:09:07,000 --> 00:09:14,000
Here if you search for circuit breakers, you will get lot many URLs so you can open these actuator/

129
00:09:15,000 --> 00:09:16,000
circuitBreakers URL.

130
00:09:16,000 --> 00:09:19,000
As of now you can see secured breakers are empty.

131
00:09:19,000 --> 00:09:24,000
Now when we start testing the accounts microservice with the help of Gateway server, all the circuit

132
00:09:24,000 --> 00:09:28,000
breaker related information is going to populate inside this page.

133
00:09:28,000 --> 00:09:33,000
Now, in order to test these changes, let's go to the postman. Inside the Postman under the Gateway

134
00:09:33,000 --> 00:09:34,000
Server.

135
00:09:34,000 --> 00:09:40,000
I have created a new request with the name easybank/ accounts/api/contact-info.

136
00:09:40,000 --> 00:09:46,000
So whenever we try to invoke these contact-info available inside the accounts microservice we

137
00:09:46,000 --> 00:09:53,000
know it is going to return the contact details to whom we can reach out when there is an issue with

138
00:09:53,000 --> 00:09:53,000
the accounts

139
00:09:53,000 --> 00:09:59,000
microservice. You can see here inside the response we got the message, contact details and on call support

140
00:09:59,000 --> 00:09:59,000
details.

141
00:09:59,000 --> 00:10:00,000
Now let

142
00:10:00,000 --> 00:10:01,000
me go to the browser.

143
00:10:01,000 --> 00:10:07,000
If I try to refresh this page, you can see as of now I'm able to see the details related to the 

144
00:10:07,000 --> 00:10:08,000
accountsCircuitBreaker.

145
00:10:08,000 --> 00:10:11,000
This is the same name that we have configured inside the Gateway server.

146
00:10:11,000 --> 00:10:14,000
As of now, the status of the circuitbreaker is closed.

147
00:10:14,000 --> 00:10:20,000
That's why the overall state it is showing as closed and the failure rate and slow call rate is -1,

148
00:10:20,000 --> 00:10:26,000
which means there are no requests that are failed or  processed with a slow call rate.

149
00:10:26,000 --> 00:10:27,000
That's why you can see failed calls

150
00:10:27,000 --> 00:10:30,000
there are zero and slow calls is also zero.

151
00:10:30,000 --> 00:10:33,000
So there is some information about the circuit breaker.

152
00:10:33,000 --> 00:10:38,000
If you have multiple circuit breakers defined inside your application, you can obviously see all of

153
00:10:38,000 --> 00:10:39,000
them inside this path.

154
00:10:39,000 --> 00:10:46,000
Now, we can also try to understand the events that are happening behind the scenes under the circuit

155
00:10:46,000 --> 00:10:46,000
breaker.

156
00:10:46,000 --> 00:10:52,000
For the same, you can open this path which is actuator/circuit breaker events and what is your

157
00:10:52,000 --> 00:10:53,000
secure breaker name?

158
00:10:53,000 --> 00:10:55,000
So let me click on this URL.

159
00:10:55,000 --> 00:10:59,000
You can see as of now it is showing empty because the URL is wrong.

160
00:10:59,000 --> 00:11:05,000
The correct URL is localhost:8072/actuator/circuitbreakerevents.

161
00:11:05,000 --> 00:11:11,000
After the secure breaker events, we need to give a question mark followed by query param name to this

162
00:11:11,000 --> 00:11:15,000
query param name we need to pass what is the secure breaker name?

163
00:11:15,000 --> 00:11:18,000
So the name that we have given is accountCircuitBreaker.

164
00:11:18,000 --> 00:11:24,000
As soon as I open this, you can see as of now there is only one event happened because we only invoked

165
00:11:24,000 --> 00:11:25,000
one request inside the postman.

166
00:11:25,000 --> 00:11:27,000
And that request is success.

167
00:11:27,000 --> 00:11:34,000
If I try to invoke this two more times and go to this page and refresh you can see total three requests

168
00:11:34,000 --> 00:11:36,000
are there with the type as success.

169
00:11:36,000 --> 00:11:43,000
So this means your circuit breaker pattern is continuously monitoring all the invocations happening to

170
00:11:43,000 --> 00:11:44,000
your accounts

171
00:11:44,000 --> 00:11:45,000
microservice.

172
00:11:45,000 --> 00:11:48,000
Now we can also go to the other URL and try to refresh this.

173
00:11:48,000 --> 00:11:53,000
As of now you can see the buffered calls became three, and the overall state right now is still closed

174
00:11:53,000 --> 00:11:56,000
because there is no failure rate, there is no slow call rate.

175
00:11:56,000 --> 00:12:02,000
Now in order to see the demo of circuit Breaker Pattern, I'll go to the AccountsController.

176
00:12:02,000 --> 00:12:04,000
Inside my AccountsController

177
00:12:04,000 --> 00:12:09,000
I have written the implementation logic related to the contact-info API.

178
00:12:09,000 --> 00:12:11,000
So here we have the implementation code.

179
00:12:11,000 --> 00:12:16,000
Inside this method we are simply sending the object of accountsContactInfoDto.

180
00:12:16,000 --> 00:12:21,000
So what I'm going to do is just to mimic the pattern of slow response.

181
00:12:21,000 --> 00:12:25,000
I'm going to put a breakpoint here and I will never release this breakpoint.

182
00:12:25,000 --> 00:12:31,000
With that, always the request will come to this REST API, but it is not going to respond back to the

183
00:12:31,000 --> 00:12:33,000
gateway server  or to the client application.

184
00:12:33,000 --> 00:12:40,000
So with this breakpoint now let's try to understand how the circuit  breaker pattern is going to work.

185
00:12:40,000 --> 00:12:41,000
Inside my postman

186
00:12:41,000 --> 00:12:43,000
I'm trying to click the send button.

187
00:12:43,000 --> 00:12:46,000
The breakpoint stopped the execution, but I'm not going to release it.

188
00:12:46,000 --> 00:12:47,000
I'll go to the postman.

189
00:12:47,000 --> 00:12:53,000
You can see after some time my gateway throws an error, which is 504 gateway timeout.

190
00:12:53,000 --> 00:12:57,000
Now if I try to refresh this page, you can see both the requests that we sent,

191
00:12:57,000 --> 00:13:01,000
It failed with the type error and this is the error message.

192
00:13:01,000 --> 00:13:07,000
But right now my circuit  breaker pattern still will be in the closed status only because 50% of the calls

193
00:13:08,000 --> 00:13:08,000
never fail.

194
00:13:08,000 --> 00:13:14,000
You can see as of now failed calls is only one. To change my circuit breaker pattern from closed state,

195
00:13:14,000 --> 00:13:20,000
I need to send many requests to my contact-info and all of them will fail eventually

196
00:13:20,000 --> 00:13:25,000
my circuit breaker pattern will realize many of the requests are failing and I should move from close

197
00:13:25,000 --> 00:13:26,000
to open status.

198
00:13:26,000 --> 00:13:28,000
So let me click on the send button multiple times.

199
00:13:28,000 --> 00:13:34,000
So I'm trying to send this multiple times so that we'll get this error every time.

200
00:13:34,000 --> 00:13:40,000
Like Gateway, you can keep observing this error like status as 504 and error is gateway timeout.

201
00:13:40,000 --> 00:13:46,000
At some point of time, you can see the status change, which is 503 and the error right now is service

202
00:13:46,000 --> 00:13:47,000
unavailable.

203
00:13:47,000 --> 00:13:52,000
You can also see the message upstream service is temporarily unavailable.

204
00:13:52,000 --> 00:13:56,000
This error is being thrown by the circuit breaker pattern.

205
00:13:56,000 --> 00:13:59,000
We can also confirm the same by looking at the overall status.

206
00:13:59,000 --> 00:14:01,000
Now the overall status is open.

207
00:14:01,000 --> 00:14:03,000
We can refresh the other page here.

208
00:14:03,000 --> 00:14:05,000
If you can scroll down,

209
00:14:05,000 --> 00:14:08,000
we have many requests with the type as error.

210
00:14:08,000 --> 00:14:11,000
If you keep scrolling, you can see all these types error.

211
00:14:11,000 --> 00:14:13,000
At some point of time

212
00:14:13,000 --> 00:14:17,000
my circuit breaker realized the failure rate exceeded.

213
00:14:17,000 --> 00:14:23,000
That's why it is going to state the transition and the state transition is going to be close to open.

214
00:14:23,000 --> 00:14:26,000
That's why my circuit breaker pattern will move to the open status.

215
00:14:26,000 --> 00:14:31,000
Now, all the calls are not going to be permitted to my accounts

216
00:14:31,000 --> 00:14:36,000
microservice. What advantages we are getting with this not permitted. Now my gateway server is not going

217
00:14:36,000 --> 00:14:42,000
to waste its resources by invoking the accounts microservice my circuit breaker pattern which is sitting

218
00:14:42,000 --> 00:14:46,000
in the middle, always throwing an immediate error to the gateway server.

219
00:14:46,000 --> 00:14:52,000
The upstream service is not available with that, my gateway server resources and threads will not be

220
00:14:52,000 --> 00:14:52,000
blocked

221
00:14:52,000 --> 00:14:56,000
for a long time. Now we have waited for more than 10s.

222
00:14:56,000 --> 00:14:59,000
We can go to the postman and try to invoke a new

223
00:15:00,000 --> 00:15:00,000
request..

224
00:15:00,000 --> 00:15:02,000
Here I'm trying to click on the send button.

225
00:15:02,000 --> 00:15:04,000
Please observe the status

226
00:15:04,000 --> 00:15:05,000
error message

227
00:15:05,000 --> 00:15:10,000
as of now, it is 503 service unavailable and upstream service is temporarily unavailable.

228
00:15:10,000 --> 00:15:16,000
If I try to click on the send button this time, you can see the actual invocation to the accounts microservice

229
00:15:16,000 --> 00:15:17,000
happened.

230
00:15:17,000 --> 00:15:19,000
That's why we are getting time out.

231
00:15:19,000 --> 00:15:22,000
And now I'll go to the actuator URLs .

232
00:15:22,000 --> 00:15:23,000
Here I will try to refresh this page.

233
00:15:23,000 --> 00:15:29,000
You can see right now it is in the half open status and if you can refresh the other page, at last

234
00:15:29,000 --> 00:15:34,000
you will be able to see the events where the state transition happened from open to half open and during

235
00:15:34,000 --> 00:15:38,000
the half open we sent only one request and it is also failed.

236
00:15:38,000 --> 00:15:44,000
Now I'll try to send the request multiple times and eventually my gateway server will go to the open

237
00:15:44,000 --> 00:15:45,000
status from the half open status.

238
00:15:45,000 --> 00:15:48,000
We can confirm the same by refreshing this page.

239
00:15:48,000 --> 00:15:50,000
You can see as of now the state is open.

240
00:15:50,000 --> 00:15:53,000
If I try to refresh these events page.

241
00:15:53,000 --> 00:16:00,000
Here also at last the state transition happened from half open to open and all the further requests are not

242
00:16:00,000 --> 00:16:02,000
permitted for the next 10s.

243
00:16:02,000 --> 00:16:08,000
So now we have seen the demo of open and half open to show you the demo that circuit  breaker is going

244
00:16:08,000 --> 00:16:14,000
to switch to the closed status if the majority of the request are being processed successfully, I can

245
00:16:14,000 --> 00:16:16,000
remove this breakpoint.

246
00:16:16,000 --> 00:16:20,000
And here inside the postman I'm going to click on the send button.

247
00:16:20,000 --> 00:16:22,000
With that you can see we are getting successful response.

248
00:16:22,000 --> 00:16:30,000
Now I can go to my actuator URLs here if I try to refresh this events page, you can see at some point

249
00:16:30,000 --> 00:16:36,000
of time the state transition happened from half open to closed because all the requests are being processed

250
00:16:36,000 --> 00:16:37,000
successfully.

251
00:16:37,000 --> 00:16:41,000
I can also check now the overall status and you can see the state is closed. This way

252
00:16:41,000 --> 00:16:47,000
the circuit breaker pattern is doing a lot of work behind the scenes to make our microservices fault

253
00:16:47,000 --> 00:16:48,000
tolerant and resilient.

254
00:16:48,000 --> 00:16:54,000
You saw the live demo that I'm saving my gateway server and opening too many threads and waiting for

255
00:16:54,000 --> 00:16:59,000
the response from the accounts microservice with the help of the circuit breaker pattern.

256
00:16:59,000 --> 00:17:02,000
I hope you are clear with what our discussions we have done inside this lecture.

257
00:17:02,000 --> 00:17:05,000
Let's continue the same inside the next lecture.

258
00:17:05,000 --> 00:17:06,000
Thank you,

259
00:17:06,000 --> 00:17:06,000
bye.

