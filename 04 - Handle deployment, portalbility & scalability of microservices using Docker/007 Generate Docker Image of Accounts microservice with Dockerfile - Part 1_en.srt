1
00:00:00,000 --> 00:00:06,000
Inside this lecture, let's try to understand how to create a Docker file and how to provide instructions

2
00:00:06,000 --> 00:00:10,000
to the Docker server to generate a Docker image for Accounts Microservice.

3
00:00:10,000 --> 00:00:13,000
For the same, I came to my workspace location.

4
00:00:13,000 --> 00:00:18,000
As of now you can see I have a folder with the name section two and this section two there are three

5
00:00:18,000 --> 00:00:21,000
different microservices with the name accounts, cards and loans.

6
00:00:21,000 --> 00:00:27,000
Now since we are into a new section, which is section 4, I'm going to copy the same section two

7
00:00:27,000 --> 00:00:33,000
code and paste the same inside the same folder. Post that I'm going to rename this section 2 to section 4.

8
00:00:33,000 --> 00:00:34,000
.

9
00:00:34,000 --> 00:00:39,000
There is no code related to section 3, because Section 3 is a theory section where we have discussed

10
00:00:39,000 --> 00:00:46,000
about how to rightsize our microservices and how to identify service boundaries for microservices.

11
00:00:46,000 --> 00:00:53,000
This will give me a flexibility to upload all this code based upon section and in an incremental manner.

12
00:00:53,000 --> 00:00:59,000
So whatever code that you are going to find inside these Section 4 is an continuation of the previous

13
00:00:59,000 --> 00:01:01,000
section, which is section 2.

14
00:01:01,000 --> 00:01:05,000
So this will allow me to upload the code at regular milestones.

15
00:01:05,000 --> 00:01:11,000
And this also give flexibility to the students like you to understand what changes I have done inside

16
00:01:11,000 --> 00:01:13,000
a specific section to overcome a challenge.

17
00:01:13,000 --> 00:01:17,000
So that's why I have created a new folder inside my workspace with the name section 4.

18
00:01:17,000 --> 00:01:21,000
Now let's try to import these into my IntelliJ idea.

19
00:01:21,000 --> 00:01:27,000
So here I'll click on this open option and post that I'll go to the workspace location like storage,

20
00:01:27,000 --> 00:01:30,000
workspaces, Micro Service and section 4.

21
00:01:30,000 --> 00:01:34,000
After selecting the Section four, I'm going to click on this open.

22
00:01:34,000 --> 00:01:38,000
This will open all three projects inside my Section 4.

23
00:01:38,000 --> 00:01:43,000
And these projects are accounts, loans and cards.

24
00:01:43,000 --> 00:01:46,000
You can see here inside the bracket, it is showing section 2.

25
00:01:46,000 --> 00:01:50,000
This is because we also copied the settings related to IntelliJ idea.

26
00:01:50,000 --> 00:01:56,000
So let me close this. Post that I'll go to my folder location here under the section 4

27
00:01:56,000 --> 00:02:02,000
if I try to look for the hidden folders, there is a hidden folder with the name .idea which has

28
00:02:02,000 --> 00:02:03,000
settings from the previous section.

29
00:02:03,000 --> 00:02:05,000
So I'm going to delete this folder.

30
00:02:05,000 --> 00:02:11,000
Now if I try to open this section four inside my IntelliJ idea, it is going to create new settings

31
00:02:11,000 --> 00:02:12,000
for this folder.

32
00:02:12,000 --> 00:02:19,000
So let me click on this open and I'll make sure I'm selecting Storage, Workspace, Microservice, section 4

33
00:02:19,000 --> 00:02:21,000
and clicking on this open.

34
00:02:21,000 --> 00:02:24,000
Now, we should not be having any problem.

35
00:02:24,000 --> 00:02:29,000
It will also ask you to load all the maven build scripts like you can see, so please make sure you

36
00:02:29,000 --> 00:02:31,000
are clicking on this load button.

37
00:02:31,000 --> 00:02:37,000
Then only it is going to recognize all your projects as a maven project and you should be able to see all

38
00:02:37,000 --> 00:02:39,000
those Maven projects under this Maven tab.

39
00:02:39,000 --> 00:02:44,000
So there are three different Maven projects with the name account, cards and loans.

40
00:02:44,000 --> 00:02:49,000
Now, as a next step, since we are trying to focus on accounts microservice to generate a Docker image

41
00:02:49,000 --> 00:02:56,000
with the approach 1, I will go to the accounts microservice and open the pom.xml. Here you need to

42
00:02:56,000 --> 00:02:58,000
make a small change just after this version.

43
00:02:58,000 --> 00:03:03,000
Please make sure you are mentioning the packaging as jar.

44
00:03:03,000 --> 00:03:09,000
So since we want to generate Docker images for our accounts microservice or any other microservice,

45
00:03:09,000 --> 00:03:13,000
we need to make sure we are mentioning this packaging as jar.

46
00:03:13,000 --> 00:03:18,000
This tells to my maven that I want to package my web application in a jar format.

47
00:03:18,000 --> 00:03:25,000
Similarly, we can also package in a War format by giving var, but jar is a good format that we can

48
00:03:25,000 --> 00:03:28,000
follow whenever we want to generate a Docker image.

49
00:03:28,000 --> 00:03:30,000
So that's why I'm going with this jar.

50
00:03:30,000 --> 00:03:32,000
Please make sure you are also following this.

51
00:03:32,000 --> 00:03:39,000
Once we make these changes as a next step, let me show you few Maven commands and Java commands that

52
00:03:39,000 --> 00:03:44,000
will help you to understand how our applications are going to be compiled, once we are clear with these

53
00:03:44,000 --> 00:03:50,000
maven commands and how the packaging of the spring boot application is going to happen using the same

54
00:03:50,000 --> 00:03:54,000
knowledge, we are going to provide the instructions inside a Docker file.

55
00:03:54,000 --> 00:03:58,000
So first I'll go to my target folder of accounts microservice.

56
00:03:58,000 --> 00:04:03,000
First, I'll try to delete all the existing compiled classes of accounts Microservice.

57
00:04:03,000 --> 00:04:08,000
As of now you can see there is no jar file inside the target folder.

58
00:04:08,000 --> 00:04:15,000
There are only compiled classes and folders available, so let me try to delete the content inside the

59
00:04:15,000 --> 00:04:16,000
target folder.

60
00:04:16,000 --> 00:04:18,000
Now I'll go to my folder location.

61
00:04:18,000 --> 00:04:24,000
Here I'll open the section 4 and right click on this accounts and open my terminal at this folder by choosing

62
00:04:24,000 --> 00:04:27,000
this option new terminal at folder.

63
00:04:27,000 --> 00:04:31,000
So you can see right now my terminal opened at accounts folder.

64
00:04:31,000 --> 00:04:36,000
If I try to run the PWT command which will print the present working directory.

65
00:04:36,000 --> 00:04:40,000
So this is the present working directory and a section 4 I have accounts microservice.

66
00:04:40,000 --> 00:04:46,000
In other words, you need to open your terminal or command line under the folder location where your

67
00:04:46,000 --> 00:04:48,000
pom.xml is present.

68
00:04:48,000 --> 00:04:53,000
If you see under my accounts microservice there is a pom.xml file is available.

69
00:04:53,000 --> 00:04:57,000
That's why I'm trying to open the terminal inside my accounts folder.

70
00:04:57,000 --> 00:04:59,000
So now I'll run a maven command,

71
00:04:59,000 --> 00:05:02,000
which is mvn clean install.

72
00:05:02,000 --> 00:05:07,000
But before that, please make sure Maven is installed inside your system and you have set up the Maven

73
00:05:07,000 --> 00:05:08,000
home path.

74
00:05:08,000 --> 00:05:13,000
Since this is very basic, I'm not covering about how to install Maven and set up the Maven home path.

75
00:05:13,000 --> 00:05:19,000
This is very similar to Java installation and setting the Java home path in order to confirm whether

76
00:05:19,000 --> 00:05:25,000
the Maven is installed inside your system or not, you can run a command which is mvn - version.

77
00:05:25,000 --> 00:05:29,000
This will give you which version of Maven is installed inside your system.

78
00:05:29,000 --> 00:05:36,000
So like you can see Apache Maven 3.8.6 is installed inside my system. So regardless of what version

79
00:05:36,000 --> 00:05:38,000
you are using, please make sure this output is printed.

80
00:05:38,000 --> 00:05:45,000
Now as a next step, I'm going to run a command which is Maven clean install using this command.

81
00:05:45,000 --> 00:05:51,000
I'm telling to my maven to compile my spring boot application with the name account.

82
00:05:51,000 --> 00:05:54,000
So inside this accounts folder there is a file called pom.xml.

83
00:05:54,000 --> 00:05:57,000
If you can go to the pom.xml towards the end

84
00:05:57,000 --> 00:06:02,000
If you go there is a build related configurations that are available.

85
00:06:02,000 --> 00:06:08,000
There is a spring boot maven plugin is already configured inside our pom.xml, so please make sure these

86
00:06:08,000 --> 00:06:10,000
configurations are available.

87
00:06:10,000 --> 00:06:16,000
Now, if I try to run this maven clean install behind the scenes, my maven is going to compile my accounts

88
00:06:16,000 --> 00:06:20,000
microservice and it will also do a small basic unit testing.

89
00:06:20,000 --> 00:06:23,000
And if the unit testing is successful, it is going to generate a jar.

90
00:06:23,000 --> 00:06:27,000
If you see it has done some unit testing and there are no errors.

91
00:06:27,000 --> 00:06:29,000
That's why my build is successful.

92
00:06:29,000 --> 00:06:36,000
Now if I try to go and check my accounts target folder under this target folder, you'll be able to see

93
00:06:36,000 --> 00:06:42,000
a jar generated with the name accounts - 0.0.1 hyphen snapshot.

94
00:06:42,000 --> 00:06:45,000
So this is a jar of around 54 MB.

95
00:06:45,000 --> 00:06:52,000
We call this jar as a fat jar inside spring boot because inside this fat jar it is going to have all

96
00:06:52,000 --> 00:06:55,000
kind of dependencies except Java runtime.

97
00:06:55,000 --> 00:06:59,000
So it will have all the spring boot libraries, it will have embedded Tomcat server.

98
00:06:59,000 --> 00:07:05,000
So all the dependencies related to accounts microservice is going to be available inside this jar

99
00:07:05,000 --> 00:07:07,000
except Java libraries.

100
00:07:07,000 --> 00:07:10,000
You may have a question here like how this name is coming.

101
00:07:10,000 --> 00:07:14,000
If you go to your pom.xml here, the artifactId is accounts.

102
00:07:14,000 --> 00:07:19,000
The version comes by default 0.0.1 hyphen snapshot. If needed

103
00:07:19,000 --> 00:07:20,000
you can change this value.

104
00:07:20,000 --> 00:07:25,000
So based upon the combination of this artifactId and version, the jar name will be derived.

105
00:07:25,000 --> 00:07:31,000
Please make sure you're also following the same artifact like me, so that any issues that you may face,

106
00:07:31,000 --> 00:07:34,000
you can always try to compare my code with your code.

107
00:07:34,000 --> 00:07:39,000
And if you still not able to identify the root cause of your issue, you can always share your code

108
00:07:39,000 --> 00:07:40,000
with me.

109
00:07:40,000 --> 00:07:46,000
And if you follow the same naming conventions like me, then my job is going to be super, super easy

110
00:07:46,000 --> 00:07:48,000
and I can respond to you as soon as possible.

111
00:07:48,000 --> 00:07:52,000
So now we have the jar generated for this spring boot application.

112
00:07:52,000 --> 00:07:58,000
My entire spring boot application are my entire microservice application with the name accounts is right

113
00:07:58,000 --> 00:08:00,000
now available in the format of this jar

114
00:08:00,000 --> 00:08:02,000
present inside the target folder.

115
00:08:02,000 --> 00:08:09,000
Now, with the help of this jar, I can try to start my spring boot application using a maven command.

116
00:08:09,000 --> 00:08:09,000
For the same,

117
00:08:09,000 --> 00:08:17,000
first, let me clear the console and I'll run a command which is mvn spring-boot:run.

118
00:08:17,000 --> 00:08:23,000
When I try to issue this command, which is spring-boot:run behind the scenes inside my pom.xml

119
00:08:23,000 --> 00:08:28,000
since I have a plugin with the name Spring Boot Maven plugin, this plugin is looking for a jar inside

120
00:08:28,000 --> 00:08:31,000
my target folder and using the same jar.

121
00:08:31,000 --> 00:08:33,000
It is going to start my web application.

122
00:08:33,000 --> 00:08:35,000
Let's try to validate the same.

123
00:08:35,000 --> 00:08:40,000
So as soon as I execute this command you can see my spring boot application is being started and it

124
00:08:40,000 --> 00:08:42,000
started at the port 8080.

125
00:08:42,000 --> 00:08:48,000
I can also test my accounts microservice for the same here inside my postman.

126
00:08:48,000 --> 00:08:51,000
I'm going to create an new account by passing a request.

127
00:08:51,000 --> 00:08:54,000
You can see I'm getting a successful response.

128
00:08:54,000 --> 00:09:01,000
I can also try to run one more API, which is fetch API and you can also see I'm getting a successful

129
00:09:01,000 --> 00:09:01,000
response.

130
00:09:01,000 --> 00:09:03,000
So this confirms our Accounts

131
00:09:03,000 --> 00:09:06,000
microservice is successfully started with the help of a Maven command.

132
00:09:06,000 --> 00:09:10,000
Now let me stop my accounts microservice by pressing control C.

133
00:09:10,000 --> 00:09:16,000
You can also try to press control C together and that will stop your running instance inside your

134
00:09:16,000 --> 00:09:17,000
terminal.

135
00:09:17,000 --> 00:09:19,000
Now I'm clearing the console.

136
00:09:19,000 --> 00:09:23,000
This time I'm going to show you a Java command instead of a Maven command.

137
00:09:23,000 --> 00:09:27,000
Since inside Docker image, we don't want to unnecessarily install the Maven.

138
00:09:27,000 --> 00:09:32,000
So that's why I'm going to show you how to run your spring boot application with the help of a Java

139
00:09:32,000 --> 00:09:32,000
command.

140
00:09:32,000 --> 00:09:38,000
The command is java -jar and my jar is present inside the target folder.

141
00:09:38,000 --> 00:09:48,000
That's why I need to give this target/ and the jar name is accounts 0.0.1-snapshot.jar.

142
00:09:48,000 --> 00:09:54,000
So this is the command that I'm trying to execute Whenever I try to run this Java command, you can

143
00:09:54,000 --> 00:09:55,000
see the same effect.

144
00:09:55,000 --> 00:09:59,000
Like my web application will start at the port 8080.

145
00:09:59,000 --> 00:10:04,000
The reason why I'm trying to show a demo of all these commands is, this knowledge is going to help you

146
00:10:04,000 --> 00:10:05,000
to write a Docker file.

147
00:10:05,000 --> 00:10:06,000
With this,

148
00:10:06,000 --> 00:10:10,000
I'm assuming you are clear about what we have done inside this lecture.

149
00:10:10,000 --> 00:10:15,000
In the next lecture, let's try to write a Docker file and using the same Docker file, we can try to

150
00:10:15,000 --> 00:10:18,000
generate a Docker image of Accounts

151
00:10:18,000 --> 00:10:19,000
Microservice.

152
00:10:19,000 --> 00:10:21,000
Thank you and I'll catch you in the next lecture bye.

