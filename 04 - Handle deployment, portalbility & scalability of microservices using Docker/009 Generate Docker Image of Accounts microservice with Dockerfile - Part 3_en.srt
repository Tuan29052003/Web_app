1
00:00:00,000 --> 00:00:05,000
Now we have this Docker file ready inside our accounts microservice.

2
00:00:05,000 --> 00:00:09,000
As a next step, we need to provide this Docker file to our Docker server.

3
00:00:09,000 --> 00:00:16,000
And with that my Docker server is going to generate a Docker image of accounts microservice by following

4
00:00:16,000 --> 00:00:17,000
all these instructions.

5
00:00:17,000 --> 00:00:21,000
So let's try to understand how to do the same inside your terminal.

6
00:00:21,000 --> 00:00:24,000
First, make sure you are running the Docker version command.

7
00:00:24,000 --> 00:00:29,000
This will make sure the Docker is installed and it is also started properly inside your local system.

8
00:00:29,000 --> 00:00:34,000
So both this is the client version and this is the server version that I have running inside my system.

9
00:00:34,000 --> 00:00:39,000
As a next step, we need to make sure you are running a Docker build command.

10
00:00:39,000 --> 00:00:44,000
The Docker Build command is docker build .

11
00:00:44,000 --> 00:00:49,000
Since my Docker file is present inside the same folder location of accounts from where I'm running this

12
00:00:49,000 --> 00:00:56,000
command, I don't need to provide any file name or any folder path, but if your Docker file is present

13
00:00:56,000 --> 00:01:00,000
inside some other folder, then you need to provide that exact path.

14
00:01:00,000 --> 00:01:05,000
Since inside my scenario the Docker file is present inside the same folder.

15
00:01:05,000 --> 00:01:12,000
I need to give this dot symbol post that I'm going to do a space followed by -t, the t indicates

16
00:01:12,000 --> 00:01:13,000
tag.

17
00:01:13,000 --> 00:01:19,000
After this tag we need to give what is a Docker image name that we want to consider for our Accounts.

18
00:01:19,000 --> 00:01:25,000
Microservice. So whenever you are trying to give a Docker image name, you need to follow a standard

19
00:01:25,000 --> 00:01:26,000
format.

20
00:01:26,000 --> 00:01:32,000
The format is first, we need to make sure we are providing the Docker account username.

21
00:01:32,000 --> 00:01:38,000
So the Docker account username is eazybytes, so please make sure you are also providing your own Docker

22
00:01:38,000 --> 00:01:39,000
account username.

23
00:01:39,000 --> 00:01:40,000
Post that,

24
00:01:40,000 --> 00:01:42,000
what is the name that you want to give for your Accounts

25
00:01:42,000 --> 00:01:48,000
Microservice. So the name that I want to give here is accounts followed by Colon

26
00:01:48,000 --> 00:01:52,000
and what is the version are the tag name of your Docker image.

27
00:01:52,000 --> 00:01:59,000
So right now I want to give as S4, S4 for indicates section for since we are into a section 4, I'm

28
00:01:59,000 --> 00:02:03,000
going to create a Docker image with the tag name and version name as S4.

29
00:02:03,000 --> 00:02:09,000
And this eazybytes is my docker account username which I have created inside my Docker hub.

30
00:02:09,000 --> 00:02:14,000
If you see here, this is my docker username that you can see inside hub.docker.com.

31
00:02:14,000 --> 00:02:20,000
So you need to make sure you are giving your own username because we have the intentions to store all

32
00:02:20,000 --> 00:02:23,000
our Docker images inside this Docker hub.

33
00:02:23,000 --> 00:02:29,000
That's why we need to give our username as well, which will be helpful for us in future when we are

34
00:02:29,000 --> 00:02:31,000
trying to push our Docker images.

35
00:02:31,000 --> 00:02:35,000
If you don't give your Docker username then it's going to create some problems,

36
00:02:35,000 --> 00:02:39,000
whenever you're trying to store your Docker images inside the remote repository.

37
00:02:39,000 --> 00:02:44,000
So that's why please make sure you are providing this prefix which is your Docker account username followed

38
00:02:44,000 --> 00:02:51,000
by slash, followed by what is your microservice name, which is accounts followed by colon and S4,

39
00:02:51,000 --> 00:02:55,000
S4 is a tag name or the version number that I'm considering here

40
00:02:55,000 --> 00:03:00,000
So with this Docker build command we are telling to Docker server, there is a Docker file inside this

41
00:03:00,000 --> 00:03:01,000
folder.

42
00:03:01,000 --> 00:03:07,000
Please use that instructions and generate a Docker image with the name eazybytes/accounts:S4.

43
00:03:07,000 --> 00:03:08,000
.

44
00:03:08,000 --> 00:03:10,000
So this is my CLI.

45
00:03:10,000 --> 00:03:16,000
So since I'm using command line interface, this is my docker client or docker CLI from the CLI

46
00:03:16,000 --> 00:03:20,000
I'm giving instructions to my Docker server running inside my local system.

47
00:03:20,000 --> 00:03:22,000
So let me execute this command.

48
00:03:22,000 --> 00:03:22,000
With that,

49
00:03:22,000 --> 00:03:27,000
you can see behind the scenes my Docker server is trying to generate a Docker image.

50
00:03:27,000 --> 00:03:35,000
The very first step that it has done is it downloaded the base image which is openjdk17-slim

51
00:03:35,000 --> 00:03:39,000
from the remote repository which is docker.io library.

52
00:03:39,000 --> 00:03:45,000
So once it downloaded that base image post that only it is going to look for the next instructions.

53
00:03:45,000 --> 00:03:50,000
So let this download complete When you are running this Docker build command, please make sure your

54
00:03:50,000 --> 00:03:51,000
Docker server is running.

55
00:03:51,000 --> 00:03:55,000
Otherwise your Docker build command is not going to work.

56
00:03:55,000 --> 00:04:00,000
Not only Docker build any other command that you are going to run will only work if your Docker server

57
00:04:00,000 --> 00:04:02,000
is running inside your local system.

58
00:04:02,000 --> 00:04:10,000
So now you can see my Docker image is generated with the name docker.io/eazybytes/account/S4.

59
00:04:10,000 --> 00:04:10,000
.

60
00:04:10,000 --> 00:04:13,000
You can also see the steps that it has followed.

61
00:04:13,000 --> 00:04:18,000
In the very first step, it downloaded the base image, which is open JDK and in the second step it

62
00:04:18,000 --> 00:04:25,000
copied the accounts jar from my local system inside the target folder into my Docker image.

63
00:04:25,000 --> 00:04:32,000
So now if I try to execute a command which is Docker images, this will list all the images

64
00:04:32,000 --> 00:04:38,000
right now inside my local system. Here you can search for a Docker image with the name accounts.

65
00:04:38,000 --> 00:04:41,000
So there are many other Docker images inside my system.

66
00:04:41,000 --> 00:04:44,000
You may not have such images inside your system.

67
00:04:44,000 --> 00:04:45,000
Don't worry.

68
00:04:45,000 --> 00:04:48,000
The main image that you need to look is accounts.

69
00:04:48,000 --> 00:04:53,000
So if you see this is the Docker image that I have generated with the name accounts and the tag is S4

70
00:04:53,000 --> 00:04:53,000
.

71
00:04:53,000 --> 00:05:00,000
This is the image ID and it is created a minute ago and the size it has is 456 MB.

72
00:05:00,000 --> 00:05:05,000
If I try to inspect this image by running a command docker inspect image.

73
00:05:05,000 --> 00:05:07,000
And what is the image ID.

74
00:05:07,000 --> 00:05:08,000
The image ID,

75
00:05:08,000 --> 00:05:09,000
this is the image ID,

76
00:05:09,000 --> 00:05:12,000
you don't have to mention the entire image ID.

77
00:05:12,000 --> 00:05:17,000
Instead, you can simply mention the initial few 3 or 4 characters.

78
00:05:17,000 --> 00:05:19,000
So I'm just mentioning the same and trying to run this.

79
00:05:19,000 --> 00:05:25,000
So if you try to see the inspect command, you'll get all the details about your Docker image.

80
00:05:25,000 --> 00:05:28,000
So there'll be some interesting information inside this output.

81
00:05:28,000 --> 00:05:33,000
First is the author is eazybytes.com, which is coming from the maintainer and post that you can see.

82
00:05:33,000 --> 00:05:40,000
The JAVA_HOME is set to the open JDK 17 because we have mentioned that base image as open JDK 17.

83
00:05:40,000 --> 00:05:46,000
So behind the scenes since your accounts microservice need JAVA_HOME to be set and all that is taken

84
00:05:46,000 --> 00:05:50,000
care by the Docker server during the Docker image generation.

85
00:05:50,000 --> 00:05:56,000
And at last you can see the entry point to generate a container from your docker image is java_jar

86
00:05:56,000 --> 00:05:58,000
and this is the accounts related jar.

87
00:05:58,000 --> 00:06:04,000
So we provided this information also inside our Docker file and the operating system is Linux.

88
00:06:04,000 --> 00:06:10,000
Like I said, all the Docker concepts are going to work based upon the Linux concepts like namespaces

89
00:06:10,000 --> 00:06:11,000
and control groups.

90
00:06:11,000 --> 00:06:17,000
So that's why behind the scenes it is going to follow the Linux operating system only.

91
00:06:17,000 --> 00:06:20,000
So these are important information that you can see.

92
00:06:20,000 --> 00:06:23,000
You can also explore more details about your image from your Docker desktop.

93
00:06:23,000 --> 00:06:30,000
If you go to the Docker desktop and click on this images, there is a image with the name accounts.

94
00:06:30,000 --> 00:06:34,000
So these are accounts image and the tag is S4.

95
00:06:34,000 --> 00:06:40,000
You can click on this name which will show all the layers available inside your Docker image.

96
00:06:40,000 --> 00:06:45,000
This confirms that our Docker image is successfully created based upon the Docker file that we have

97
00:06:45,000 --> 00:06:46,000
provided.

98
00:06:46,000 --> 00:06:51,000
Now we are ready to convert this Docker image into a Docker container.

99
00:06:51,000 --> 00:06:56,000
In the next lecture, let's try to generate a Docker container for our accounts microservice and try

100
00:06:56,000 --> 00:06:58,000
to test few scenarios.

101
00:06:58,000 --> 00:06:59,000
I hope you are following with me.

102
00:06:59,000 --> 00:07:01,000
Don't worry about the Docker images.

103
00:07:01,000 --> 00:07:06,000
As you practice and run these commands multiple times, you're going to remember them easily.

104
00:07:06,000 --> 00:07:11,000
And I'm also going to provide more details about these Docker commands in the upcoming lectures.

105
00:07:11,000 --> 00:07:13,000
Thank you and I'll catch you in the next lecture bye.

