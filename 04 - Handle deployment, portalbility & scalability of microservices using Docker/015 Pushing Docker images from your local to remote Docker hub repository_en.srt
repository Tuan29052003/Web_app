1
00:00:00,000 --> 00:00:07,000
As of now, we have the Docker images generated and they are available inside our local system.

2
00:00:07,000 --> 00:00:13,000
If you keep them inside your local system, then obviously it's not going to make sense. Because the

3
00:00:13,000 --> 00:00:19,000
images has to be eventually deployed into your production server or inside a dev server or QA server.

4
00:00:19,000 --> 00:00:25,000
To achieve this deployment in higher environment, just like how we push our code into the GitHub.

5
00:00:25,000 --> 00:00:31,000
Very similarly, we need to push our Docker images into a remote repository provided by the Docker hub

6
00:00:31,000 --> 00:00:36,000
or any other private registries available inside AWS, GCP Azure.

7
00:00:36,000 --> 00:00:40,000
So there are many private registries available even from GitHub

8
00:00:40,000 --> 00:00:45,000
also there is a private registry, but inside the course, like we discussed, we are going to store

9
00:00:45,000 --> 00:00:50,000
all our Docker images inside the remote repository provided by the Docker hub.

10
00:00:50,000 --> 00:00:58,000
For the same, we need to push our Docker images from local system into the remote Docker hub repository.

11
00:00:58,000 --> 00:01:06,000
The command that we need to run to push our Docker images into the Docker hub repository is docker space

12
00:01:06,000 --> 00:01:09,000
image space push.

13
00:01:09,000 --> 00:01:14,000
After this push you need to give the space and followed by docker.io.

14
00:01:14,000 --> 00:01:21,000
Since we decided to push our Docker images into the Docker hub, we need to provide this docker.io followed

15
00:01:21,000 --> 00:01:24,000
by what is your complete image name?

16
00:01:24,000 --> 00:01:30,000
So your image name should also have your Docker username, which is eazybytes in my case post that

17
00:01:30,000 --> 00:01:31,000
accounts.

18
00:01:31,000 --> 00:01:33,000
And what is the tag name?

19
00:01:33,000 --> 00:01:37,000
The tag name of my accounts microservice is S4.

20
00:01:37,000 --> 00:01:44,000
So this is a complete command that I need to use to push the image from my local system to the remote

21
00:01:44,000 --> 00:01:45,000
repository.

22
00:01:45,000 --> 00:01:50,000
I have mentioned all the Docker commands that I have used inside the GitHub repository, so please refer

23
00:01:50,000 --> 00:01:51,000
them if you have any questions.

24
00:01:51,000 --> 00:01:54,000
Now let me try to execute this command.

25
00:01:54,000 --> 00:02:01,000
You see, my image is getting pushed into the remote repository provided by the Docker hub.

26
00:02:01,000 --> 00:02:01,000
Here

27
00:02:01,000 --> 00:02:07,000
you may have a question like I didn't give my credentials to push into the Docker hub. So there is

28
00:02:07,000 --> 00:02:13,000
a password for my account inside the Docker hub, but I have not provided that password or username

29
00:02:13,000 --> 00:02:15,000
anywhere inside my command.

30
00:02:15,000 --> 00:02:21,000
So here what my CLI will do is behind the scenes since I already logged in into my Docker desktop with

31
00:02:21,000 --> 00:02:27,000
the same username, it is going to fetch my username and password details from the Docker desktop.

32
00:02:27,000 --> 00:02:33,000
So the CLI and Docker desktop, they are going to work together and based upon the credentials that

33
00:02:33,000 --> 00:02:39,000
I have used to log in into my Docker desktop, the same is going to be utilized while we are trying

34
00:02:39,000 --> 00:02:42,000
to push our image into a remote repository.

35
00:02:42,000 --> 00:02:47,000
If you have not logged in into your Docker desktop or if there are no login details configured inside

36
00:02:47,000 --> 00:02:53,000
the local system, then obviously you will get an error saying that login failed or access denied.

37
00:02:53,000 --> 00:02:58,000
And here also make sure that you are mentioning your own Docker username.

38
00:02:58,000 --> 00:03:05,000
Don't mention my eazybytes username inside your docker push command because you will not have my credentials.

39
00:03:05,000 --> 00:03:08,000
That's why this is very very important to use your own username.

40
00:03:08,000 --> 00:03:14,000
And the same username also should be used inside your pom.xml or while generating a docker image.

41
00:03:14,000 --> 00:03:19,000
So your image name should have your username followed by your application name.

42
00:03:19,000 --> 00:03:21,000
And this is the tag name.

43
00:03:21,000 --> 00:03:26,000
Now I'm going to push my loans microservice image as well.

44
00:03:26,000 --> 00:03:32,000
The command is going to be the same instead of accounts, we are going to mention loans and I'm pushing

45
00:03:32,000 --> 00:03:34,000
the loans microservice right now.

46
00:03:34,000 --> 00:03:39,000
So you can see here this is being pushed from my local system into the remote repository.

47
00:03:39,000 --> 00:03:45,000
After few seconds, my loans Docker image is also successfully pushed into the remote repository.

48
00:03:45,000 --> 00:03:49,000
As a next step, I can try to push my cards microservice.

49
00:03:49,000 --> 00:03:54,000
The command is going to be the same instead of loans, I'm going to mention the name cards.

50
00:03:54,000 --> 00:04:01,000
So you can see the command is Docker image push docker.io/eazybytes/cards and what is the tag name which

51
00:04:01,000 --> 00:04:02,000
is S4 here.

52
00:04:02,000 --> 00:04:04,000
So let me execute this command.

53
00:04:04,000 --> 00:04:10,000
This will also push my cards Docker image into my remote repository.

54
00:04:10,000 --> 00:04:14,000
So this is going to take few seconds, so let's wait for this to get completed.

55
00:04:14,000 --> 00:04:20,000
Now my Cards Docker image is also pushed into the remote repository. To validate if these images are

56
00:04:20,000 --> 00:04:23,000
really pushed into the remote repository or not.

57
00:04:23,000 --> 00:04:26,000
First, we can go to the Docker desktop.

58
00:04:26,000 --> 00:04:31,000
Here under these images you can see these are all the images available inside our local system.

59
00:04:31,000 --> 00:04:37,000
Very similarly, if you can click on this hub, this will show you all the images available inside your

60
00:04:37,000 --> 00:04:41,000
remote repository with the Docker account name eazybytes.

61
00:04:41,000 --> 00:04:47,000
So you can see there are three different Docker images with three different names along with the tag

62
00:04:47,000 --> 00:04:47,000
names.

63
00:04:47,000 --> 00:04:50,000
And when they are pushed, what is the size of them?

64
00:04:50,000 --> 00:04:53,000
All these details are available here.

65
00:04:53,000 --> 00:04:57,000
You can also validate these details by going into the Docker Hub website.

66
00:04:57,000 --> 00:05:00,000
So here I logged in into the Docker Hub website.

67
00:05:00,000 --> 00:05:02,000
And this is my username, which is eazybytes.

68
00:05:02,000 --> 00:05:08,000
You can see there are three different images pushed like this accounts is pushed nine minutes back and

69
00:05:08,000 --> 00:05:13,000
similarly loans pushed five minutes back and cards pushed two minutes back.

70
00:05:13,000 --> 00:05:17,000
If you can click any of these image, you will have all the details.

71
00:05:17,000 --> 00:05:20,000
Like this image has a tag with the name S4.

72
00:05:20,000 --> 00:05:24,000
You can also see this image can be viewed by anyone.

73
00:05:24,000 --> 00:05:26,000
Since this public view is available.

74
00:05:26,000 --> 00:05:33,000
This means I can push into my Docker hub repository and anyone can pull my Docker images into their

75
00:05:33,000 --> 00:05:37,000
local system and they can start using them without any credentials.

76
00:05:37,000 --> 00:05:39,000
That's the meaning of this public view here.

77
00:05:39,000 --> 00:05:45,000
This is very similar to GitHub private repository and public repository, so this works very similarly.

78
00:05:45,000 --> 00:05:50,000
If you want to change this Docker image from public view to private view, then you need to go to the

79
00:05:50,000 --> 00:05:52,000
settings.

80
00:05:52,000 --> 00:05:57,000
Here under the visibility settings, you can make this as private, but like I said, with a basic personal

81
00:05:57,000 --> 00:06:01,000
plan, we can only have one image as a private repository.

82
00:06:01,000 --> 00:06:07,000
But I'm not going to make this as a private because I want my Docker images to be visible for everyone.

83
00:06:07,000 --> 00:06:11,000
So this is the default behavior of my Docker images that I have pushed.

84
00:06:11,000 --> 00:06:16,000
And if you want to understand more details about the tags available inside my Docker image, you can

85
00:06:16,000 --> 00:06:20,000
see as of now I have only one tag, which is S4.

86
00:06:20,000 --> 00:06:27,000
If anyone want to use this Docker image with this tag, they can simply execute this command docker

87
00:06:27,000 --> 00:06:30,000
pull eazybytes/cards:S4.

88
00:06:30,000 --> 00:06:32,000
We can also try to validate the same.

89
00:06:32,000 --> 00:06:33,000
So let me copy this.

90
00:06:33,000 --> 00:06:35,000
I'll go to my Docker desktop.

91
00:06:35,000 --> 00:06:39,000
First I'll try to delete the cards Docker image from my mission.

92
00:06:39,000 --> 00:06:40,000
So I'm just selecting this cards.

93
00:06:40,000 --> 00:06:42,000
I'm clicking on this delete button.

94
00:06:42,000 --> 00:06:45,000
So let me click on this Delete forever.

95
00:06:45,000 --> 00:06:49,000
I'm not able to delete it because there is a container with this docker image created.

96
00:06:49,000 --> 00:06:53,000
So first we need to delete the cards related container.

97
00:06:53,000 --> 00:06:58,000
So let me delete that post that I'll go to images and delete these cards

98
00:06:58,000 --> 00:07:04,000
Image. So now there is no Docker image of cards inside my local system, so I can also confirm the same

99
00:07:04,000 --> 00:07:06,000
by running Docker images.

100
00:07:06,000 --> 00:07:10,000
So you can see there is no cards related Docker image inside my system.

101
00:07:10,000 --> 00:07:16,000
So we can run the command which is Docker pull easybytes/cards:S4.

102
00:07:16,000 --> 00:07:22,000
So this will download that image from the remote repository into my local system.

103
00:07:22,000 --> 00:07:24,000
I hope it is making sense to you.

104
00:07:24,000 --> 00:07:31,000
Docker Pull will do the exact opposite action of Docker push Docker push will take your Docker images

105
00:07:31,000 --> 00:07:33,000
from local system to the remote repository.

106
00:07:33,000 --> 00:07:39,000
Whereas if you want to fetch the images from remote repository into your local system, you need to

107
00:07:39,000 --> 00:07:43,000
use this docker pull command. So you can see it is being downloaded.

108
00:07:43,000 --> 00:07:45,000
Now the download is completed.

109
00:07:45,000 --> 00:07:51,000
If I try to run the Docker images again this time you should be able to see the cards inside my local

110
00:07:51,000 --> 00:07:52,000
system.

111
00:07:52,000 --> 00:07:59,000
This way we can push our store any number of Docker images inside the remote repository provided by

112
00:07:59,000 --> 00:07:59,000
the Docker hub.

113
00:07:59,000 --> 00:08:01,000
From this Docker hub.

114
00:08:01,000 --> 00:08:07,000
My teammates, they can pull the Docker images, they can use them, or we can have some CI/CD pipelines

115
00:08:07,000 --> 00:08:13,000
or tools to fetch the Docker images from my Docker hub and using the same Docker images, they are going

116
00:08:13,000 --> 00:08:19,000
to deploy my accounts microservice loans and cards, microservice in any of the cloud server or inside

117
00:08:19,000 --> 00:08:20,000
the virtual machines.

118
00:08:20,000 --> 00:08:24,000
I hope you are clear on how to push the images and pull the images.

119
00:08:24,000 --> 00:08:27,000
Thank you and I'll catch you in the next lecture bye.

