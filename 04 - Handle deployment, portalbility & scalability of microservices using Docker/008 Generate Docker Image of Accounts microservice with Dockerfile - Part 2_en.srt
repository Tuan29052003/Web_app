1
00:00:00,000 --> 00:00:06,000
Inside this lecture, let's try to write a Docker file for our accounts Microservice. Before we try to

2
00:00:06,000 --> 00:00:13,000
do that, let me stop this running instance of my Accounts Microservice by pressing Ctrl C. So this will

3
00:00:13,000 --> 00:00:15,000
shut down my Accounts Microservice application.

4
00:00:15,000 --> 00:00:18,000
Let me clean the console after stopping your Accounts

5
00:00:18,000 --> 00:00:21,000
Microservice, please make sure you also started the Docker.

6
00:00:21,000 --> 00:00:23,000
You can see my docker is already running.

7
00:00:23,000 --> 00:00:26,000
That's why I'm able to see this icon here.

8
00:00:26,000 --> 00:00:31,000
So inside Mac you'll be seeing in the top, whereas in windows you'll be able to see in the down right

9
00:00:31,000 --> 00:00:32,000
corner.

10
00:00:32,000 --> 00:00:38,000
If you click on this Docker icon and click on this dashboard, you should be able to see all these containers

11
00:00:38,000 --> 00:00:41,000
and images right now inside your Docker local.

12
00:00:41,000 --> 00:00:45,000
If there are no images, there are no containers, everything will be empty.

13
00:00:45,000 --> 00:00:49,000
This confirms that our Docker server is running inside our local.

14
00:00:49,000 --> 00:00:50,000
Now as a next step,

15
00:00:50,000 --> 00:00:53,000
like I said, first we need to create a Docker file.

16
00:00:53,000 --> 00:00:58,000
So right click on your Accounts Microservice folder and select the new file option.

17
00:00:59,000 --> 00:01:02,000
The file name has to be Docker file.

18
00:01:02,000 --> 00:01:08,000
Please make sure you are following the exact file name because Docker will look for the exact file with

19
00:01:08,000 --> 00:01:12,000
the name Docker file and this should not have any extension.

20
00:01:12,000 --> 00:01:16,000
That's why I don't give .txt or .xml or .yml.

21
00:01:16,000 --> 00:01:18,000
There is no need of any extension.

22
00:01:18,000 --> 00:01:23,000
You can simply create a docker file without any extension with a name docker file.

23
00:01:23,000 --> 00:01:30,000
So I'm just pressing enter now inside this docker file, we need to write instructions that can be used

24
00:01:30,000 --> 00:01:32,000
to generate a Docker image for my Accounts

25
00:01:32,000 --> 00:01:35,000
Microservice. In order to run my Accounts

26
00:01:35,000 --> 00:01:39,000
Microservice, any time whenever I want to run my Accounts

27
00:01:39,000 --> 00:01:47,000
Microservice, the very first basic requirement that I have is to install JRE or Java inside any system.

28
00:01:47,000 --> 00:01:54,000
That's why I should communicate the same to my docker, saying that my accounts docker image has a dependency

29
00:01:54,000 --> 00:01:56,000
on Java for the same,

30
00:01:56,000 --> 00:02:01,000
we are going to use a keyword from inside the docker using this from command,

31
00:02:01,000 --> 00:02:09,000
we are telling to Docker that my Docker image has a dependency on some other Docker image, so please

32
00:02:09,000 --> 00:02:12,000
import this base image into my Docker image.

33
00:02:12,000 --> 00:02:15,000
Whenever you are trying to generate a Docker image of my Accounts

34
00:02:15,000 --> 00:02:16,000
Microservice.

35
00:02:16,000 --> 00:02:19,000
So that's what we are trying to tell with this from command.

36
00:02:19,000 --> 00:02:23,000
So to this from command, we need to provide the base image inside this scenario,

37
00:02:23,000 --> 00:02:31,000
the base image is java for the same I'm going to mention openjdk: and post that

38
00:02:31,000 --> 00:02:34,000
I'm also going to tell what is the tag of that Docker image.

39
00:02:34,000 --> 00:02:41,000
So this is the image name like which is Open JDK and this is the tag name which is  17-jdk-slim.

40
00:02:41,000 --> 00:02:41,000
.

41
00:02:41,000 --> 00:02:48,000
Make sure there is a colon between Docker image name and the tag, tag is very similar to version.

42
00:02:48,000 --> 00:02:53,000
Since I want to use Java 17 version, I'm providing this 17-jdk-slim.

43
00:02:53,000 --> 00:02:53,000
.

44
00:02:53,000 --> 00:02:56,000
You can also search for these Docker image inside the Docker hub.

45
00:02:56,000 --> 00:02:58,000
So this is my Docker hub.

46
00:02:58,000 --> 00:03:04,000
If I try to search for open JDK, you can see there is an Docker official image with the name Open JDK.

47
00:03:04,000 --> 00:03:06,000
Let's try to click on that.

48
00:03:06,000 --> 00:03:13,000
So whenever I want to use this Docker image as a base image for my own microservice, then we need to

49
00:03:13,000 --> 00:03:17,000
make sure we are providing the same Docker image name, which is open JDK.

50
00:03:17,000 --> 00:03:24,000
And if you click on this tags, there are many versions of Open JDK available with different, different

51
00:03:24,000 --> 00:03:24,000
tag names.

52
00:03:24,000 --> 00:03:30,000
So if you use this 22-slim-bullseye, you are going to use Java 22 version.

53
00:03:30,000 --> 00:03:38,000
So since we decided to use 17 version, I'm going with a tag which is 17-jdk-slim.

54
00:03:38,000 --> 00:03:40,000
So let me also provide some comments here.

55
00:03:40,000 --> 00:03:46,000
So I just provided a comment saying that start with a base image containing Java runtime.

56
00:03:46,000 --> 00:03:53,000
So this is the base image for our accounts microservice. Post that I'm going to give a line space and

57
00:03:53,000 --> 00:03:56,000
this time I'm going to invoke a keyword which is maintainer.

58
00:03:56,000 --> 00:04:01,000
Using maintainer, we can provide the details of who is maintaining this docker image.

59
00:04:01,000 --> 00:04:07,000
So for now I'm just going to mention easybytes.com, so please make sure there is a space between maintainer

60
00:04:07,000 --> 00:04:09,000
and this easy bytes.com.

61
00:04:09,000 --> 00:04:14,000
So this tell to anyone who is trying to use my docker image that so and so person or so-and-so domain

62
00:04:14,000 --> 00:04:18,000
is the maintainer of the docker image that we are going to create.

63
00:04:18,000 --> 00:04:25,000
Now I'm going to provide a copy command post this copy command, I'm going to give a space and mention

64
00:04:25,000 --> 00:04:33,000
target folder and inside this target folder I have accounts-0 0.1-SNAPSHOT.jar. And I'll

65
00:04:33,000 --> 00:04:41,000
give a space and again I'm going to mention the same jar which is accounts-0.0.1-SNAPSHOT.jar

66
00:04:41,000 --> 00:04:41,000
.

67
00:04:41,000 --> 00:04:48,000
With this, what I'm trying to tell to my Docker server is, there is a jar inside my target folder with

68
00:04:48,000 --> 00:04:48,000
this name.

69
00:04:48,000 --> 00:04:54,000
So if you see this docker file is present inside my accounts project and inside the same accounts project,

70
00:04:54,000 --> 00:04:56,000
there is a target folder.

71
00:04:56,000 --> 00:04:58,000
Inside this target folder we have a jar.

72
00:04:58,000 --> 00:04:59,000
So this is the jar.

73
00:04:59,000 --> 00:05:01,000
So that's what I'm trying to say,

74
00:05:01,000 --> 00:05:08,000
please take the present inside my target folder and copy the same jar into my Docker image.

75
00:05:08,000 --> 00:05:13,000
When we generate a Docker image, it is going to have all the dependencies in a packaged form.

76
00:05:13,000 --> 00:05:19,000
So one dependency that we have is open JDK and the other dependencies that we have is accounts jar. Inside

77
00:05:19,000 --> 00:05:20,000
this account jar only,

78
00:05:20,000 --> 00:05:23,000
we have all the business code, all the boot related libraries.

79
00:05:23,000 --> 00:05:29,000
So we are trying to copy this from our local machine to the Docker image that is going to be generated.

80
00:05:29,000 --> 00:05:33,000
And at last we need to provide a command which is entry point.

81
00:05:33,000 --> 00:05:37,000
So please make sure you are also following these capital letters.

82
00:05:37,000 --> 00:05:43,000
So with these entry point, what we are telling is whenever someone is trying to generate a container

83
00:05:43,000 --> 00:05:45,000
from my docker image, please execute.

84
00:05:45,000 --> 00:05:46,000
So on, so command.

85
00:05:46,000 --> 00:05:48,000
So to this entry point.

86
00:05:48,000 --> 00:05:54,000
First I need to provide the square brackets and inside this square bracket I am going to provide multiple

87
00:05:54,000 --> 00:05:56,000
commands which is java

88
00:05:56,000 --> 00:06:03,000
again, double quotes hyphen jar post that comma and at last what is the jar name that I have, which

89
00:06:03,000 --> 00:06:07,000
is accounts-0.0.1-SNAPSHOT.jar.

90
00:06:07,000 --> 00:06:09,000
So this is I'm going to copy and mention here.

91
00:06:09,000 --> 00:06:14,000
If you see this is the same command that we have used to start our spring boot application with the

92
00:06:14,000 --> 00:06:15,000
Java Command.

93
00:06:15,000 --> 00:06:22,000
So this is a command that we have used like Java Hyphen Jar and previously Account Jar is present inside

94
00:06:22,000 --> 00:06:22,000
the target folder.

95
00:06:22,000 --> 00:06:24,000
That's why we have given target folder.

96
00:06:24,000 --> 00:06:29,000
But inside my Docker image it is present inside the root folder location only.

97
00:06:29,000 --> 00:06:31,000
That's why I don't need to provide target.

98
00:06:31,000 --> 00:06:36,000
And the reason why I have to provide all these commands separately in the double quotes comma separate

99
00:06:36,000 --> 00:06:42,000
is, since there is a space after each command, we need to follow this syntax whenever we are trying

100
00:06:42,000 --> 00:06:45,000
to give command instructions with the help of this entry point.

101
00:06:45,000 --> 00:06:51,000
So behind the scenes, whenever I try to generate a Docker container from my Docker image, my Docker

102
00:06:51,000 --> 00:06:56,000
server is going to execute this command, which is java-jar and it is going to use this jar.

103
00:06:56,000 --> 00:07:01,000
So this is the Docker file that we have written. With this Docker file,

104
00:07:01,000 --> 00:07:04,000
now we should be able to generate a Docker image successfully.

105
00:07:04,000 --> 00:07:09,000
Before I try to do that, let me try to mention comments for your reference here.

106
00:07:09,000 --> 00:07:14,000
So on top of my engineer , I'm going to mention comments saying that information around who maintains

107
00:07:14,000 --> 00:07:15,000
the image.

108
00:07:15,000 --> 00:07:22,000
Similarly, on top of this copy command I'm going to mention add the applications jar to the image our

109
00:07:22,000 --> 00:07:24,000
application jar, we are copying to the image.

110
00:07:24,000 --> 00:07:30,000
And at last, on top of this entry point I'm going to mention, which is execute the application.

111
00:07:30,000 --> 00:07:36,000
So now we have written successfully a Docker file in the next lecture using this Docker file, let's

112
00:07:36,000 --> 00:07:37,000
try to generate a Docker image.

113
00:07:37,000 --> 00:07:39,000
I hope this is clear.

114
00:07:39,000 --> 00:07:41,000
Thank you and I'll catch you in the next lecture bye.

