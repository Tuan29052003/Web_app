1
00:00:00,000 --> 00:00:07,000
As of now, we have our local Kubernetes cluster running successfully inside our system.

2
00:00:07,000 --> 00:00:14,000
As a next step, we should try to deploy all our microservices into this Kubernetes cluster. Post that

3
00:00:14,000 --> 00:00:20,000
we can also validate all the features provided by the Kubernetes to make our life easy during the deployment

4
00:00:20,000 --> 00:00:22,000
of microservices.

5
00:00:22,000 --> 00:00:28,000
So to get started with the deployment of our microservices, first, we need to give instructions to

6
00:00:28,000 --> 00:00:34,000
the Kubernetes on how we want to deploy our microservice and how we want to expose them.

7
00:00:34,000 --> 00:00:39,000
So all these information we need to provide them in a Yaml configuration.

8
00:00:39,000 --> 00:00:44,000
Whatever we have used with the help of Docker compose, we cannot simply give those to the Kubernetes

9
00:00:44,000 --> 00:00:50,000
because Kubernetes cannot understand the format or syntax of the Docker compose.

10
00:00:50,000 --> 00:00:52,000
Kubernetes has its own format.

11
00:00:52,000 --> 00:00:59,000
We need to follow the same format and syntax and define how we want to deploy our microservices and

12
00:00:59,000 --> 00:01:01,000
how we want to expose them.

13
00:01:01,000 --> 00:01:07,000
Inside this lecture, let's try to deploy the config server into the Kubernetes cluster. Because whenever

14
00:01:07,000 --> 00:01:14,000
I want to set up all my microservices into a Kubernetes cluster, the very first microservice are the

15
00:01:14,000 --> 00:01:19,000
application that I want to deploy is config server for that reason only.

16
00:01:19,000 --> 00:01:24,000
Inside this lecture I'm going to consider config server and in the same process we can also learn how

17
00:01:24,000 --> 00:01:31,000
to provide instructions to the Kubernetes cluster in the format of Yaml. To get started with the deployment

18
00:01:31,000 --> 00:01:33,000
of config server.

19
00:01:33,000 --> 00:01:40,000
First, I'm going to create a folder inside my workspace with the name section_15. Because

20
00:01:40,000 --> 00:01:46,000
right now we are into the section_15 where we are going to deploy all our microservices into a local

21
00:01:46,000 --> 00:01:47,000
Kubernetes cluster.

22
00:01:47,000 --> 00:01:54,000
Inside this section_15 folder, I'm going to create another folder with the name Kubernetes. As a next

23
00:01:54,000 --> 00:01:55,000
step,

24
00:01:55,000 --> 00:01:58,000
I will try to open my terminal at this folder location.

25
00:01:58,000 --> 00:02:00,000
So this is my terminal location.

26
00:02:00,000 --> 00:02:05,000
I'm going to run the command, which is cd and what is the path that I want to navigate?

27
00:02:05,000 --> 00:02:09,000
So inside my Section 15, we have a folder which is Kubernetes.

28
00:02:09,000 --> 00:02:11,000
I want to navigate into that.

29
00:02:11,000 --> 00:02:14,000
So right now my terminal is at the right location.

30
00:02:14,000 --> 00:02:21,000
So here I'm going to run the command, which is touch configserver.yaml because using this file

31
00:02:21,000 --> 00:02:26,000
I want to provide instructions to the Kubernetes cluster on how to deploy my config server.

32
00:02:26,000 --> 00:02:28,000
That's why I'm trying to give this name here.

33
00:02:28,000 --> 00:02:33,000
If you are using windows OS, this touch command may not work.

34
00:02:33,000 --> 00:02:37,000
You need to create these files manually inside your folder location.

35
00:02:37,000 --> 00:02:39,000
So let me create this yaml.

36
00:02:39,000 --> 00:02:45,000
Now if I go and check my folder I should have a new yaml file with the name configserver.yaml.

37
00:02:45,000 --> 00:02:49,000
So let me try to open this in a text editor.

38
00:02:49,000 --> 00:02:50,000
As of now it is empty.

39
00:02:50,000 --> 00:02:51,000
Inside this file,

40
00:02:51,000 --> 00:02:57,000
I'm going to paste a few Yaml configurations post that we can try to discuss all the configurations

41
00:02:57,000 --> 00:02:58,000
line by line.

42
00:02:58,000 --> 00:03:05,000
Please note that in real projects a developer is not responsible to write these Kubernetes configuration

43
00:03:05,000 --> 00:03:06,000
files.

44
00:03:06,000 --> 00:03:09,000
The DevOps team members are the platform team members.

45
00:03:09,000 --> 00:03:12,000
They are responsible to write these configurations.

46
00:03:12,000 --> 00:03:19,000
But as a developer you should always aware about the basic syntax of this Kubernetes configuration file.

47
00:03:19,000 --> 00:03:21,000
That's why inside this course I'm trying to explain them.

48
00:03:21,000 --> 00:03:26,000
Here let me paste configurations like you can see I have pasted the configurations.

49
00:03:26,000 --> 00:03:29,000
Now let's try to discuss about these configurations.

50
00:03:29,000 --> 00:03:38,000
Whenever we want to deploy our microservices into the Kubernetes cluster, we need to create a configuration

51
00:03:38,000 --> 00:03:39,000
of kind deployment.

52
00:03:39,000 --> 00:03:45,000
So this kind of deployment is a predefined object inside the Kubernetes.

53
00:03:45,000 --> 00:03:49,000
If you try to go deploy instead of deployment, it is not going to work.

54
00:03:49,000 --> 00:03:53,000
Your Kubernetes cluster is going to throw an error.

55
00:03:53,000 --> 00:03:59,000
That's why always make sure you are mentioning this kind as deployment. And before the kind deployment

56
00:03:59,000 --> 00:04:03,000
you should also make sure you are mentioning the API version as app/v1.

57
00:04:03,000 --> 00:04:10,000
You can always get the syntax of these files from the Kubernetes official documentation.

58
00:04:10,000 --> 00:04:11,000
Like you can see here.

59
00:04:11,000 --> 00:04:17,000
This is the Kubernetes website where we have instructions about deployments. Inside this page

60
00:04:17,000 --> 00:04:22,000
if you can scroll down, there is a syntax on how you can view the deployment instructions to your Kubernetes

61
00:04:22,000 --> 00:04:23,000
cluster.

62
00:04:23,000 --> 00:04:28,000
So the same kind of syntax we are trying to follow for our microservice as well.

63
00:04:28,000 --> 00:04:34,000
So don't worry if this syntax looking very complicated to you because if you try to practice deploying

64
00:04:34,000 --> 00:04:40,000
microservices multiple times into your Kubernetes cluster with the help of this Kubernetes config files,

65
00:04:40,000 --> 00:04:42,000
you are going to get used to this syntax.

66
00:04:42,000 --> 00:04:46,000
Just like how right now you are comfortable with the Docker compose format.

67
00:04:46,000 --> 00:04:52,000
Like I said, whenever we want to provide a deployment instructions to the Kubernetes, the first two

68
00:04:52,000 --> 00:04:57,000
lines are always static. After the kind we need to mention the metadata.

69
00:04:57,000 --> 00:04:59,000
Using the metadata, we are providing some

70
00:05:00,000 --> 00:05:05,000
metadata information about these deployment instructions and the metadata like you can see

71
00:05:05,000 --> 00:05:07,000
first, I have mentioned the name for this name,

72
00:05:07,000 --> 00:05:13,000
I'm trying to give a name saying that configserver-deployment, this name can be anything.

73
00:05:13,000 --> 00:05:17,000
So we are trying to give a name to our deployment. Using the same name,

74
00:05:17,000 --> 00:05:21,000
we can always try to search inside the Kubernetes cluster.

75
00:05:21,000 --> 00:05:27,000
So just to differentiate between multiple deployments, we should always make sure we are giving a unique

76
00:05:27,000 --> 00:05:30,000
name for your deployment instructions.

77
00:05:30,000 --> 00:05:35,000
So here, since I'm trying to deploy my config server, I have given this name which is going to be

78
00:05:35,000 --> 00:05:37,000
very apt for this scenario.

79
00:05:37,000 --> 00:05:41,000
Now, under the labels I need to mention app and what is an app name?

80
00:05:41,000 --> 00:05:46,000
So these labels are very important inside the Kubernetes configurations.

81
00:05:46,000 --> 00:05:49,000
I'm going to highlight the importance of them in few seconds.

82
00:05:49,000 --> 00:05:54,000
For now, you can see under this metadata for this deployment configserver-deployment, I have created

83
00:05:54,000 --> 00:05:57,000
a label which is app config server.

84
00:05:57,000 --> 00:06:02,000
After the metadata we need to provide the specs, spec indicates specification.

85
00:06:02,000 --> 00:06:09,000
Since we are trying to deploy our microservice into a Kubernetes cluster, we need to provide the specifications

86
00:06:09,000 --> 00:06:14,000
how many replicas we want to deploy, what are the container details, what are the docker image details?

87
00:06:14,000 --> 00:06:19,000
So all those details we are going to mention under this specification. Under the specification, the

88
00:06:19,000 --> 00:06:22,000
very first element that we have here is replicas.

89
00:06:22,000 --> 00:06:28,000
As of now you can see I'm trying to deploy only a single instance of my config server.

90
00:06:28,000 --> 00:06:31,000
That's why I have mentioned the replicas as one instead of one,

91
00:06:31,000 --> 00:06:37,000
if you mention three, then your Kubernetes cluster behind the scenes is going to deploy your config

92
00:06:37,000 --> 00:06:42,000
server in three different parts with three different instances.

93
00:06:42,000 --> 00:06:46,000
So based upon your traffic needs, you need to define the number of replicas.

94
00:06:46,000 --> 00:06:52,000
So let me revert back to one. After the replicas with the help of selector and match labels, we need

95
00:06:52,000 --> 00:06:57,000
to mention whatever label we have mentioned here, which is app as config server.

96
00:06:57,000 --> 00:07:03,000
So what we are trying to tell here is with this match labels, whatever specification that I'm trying

97
00:07:03,000 --> 00:07:10,000
to write here, I want them to be applicable for the deployment config server deployment, which has

98
00:07:10,000 --> 00:07:12,000
the same label, which is app config server.

99
00:07:12,000 --> 00:07:15,000
That's why we have mentioned the same here.

100
00:07:15,000 --> 00:07:21,000
So behind the scenes my Kubernetes is going to do the match labels with the labels that we have defined

101
00:07:21,000 --> 00:07:21,000
here.

102
00:07:21,000 --> 00:07:26,000
That's why please make sure you are mentioning the same config server name here under the match labels

103
00:07:26,000 --> 00:07:27,000
as well.

104
00:07:27,000 --> 00:07:33,000
Now for my specification, after the selector and match labels, we need to mention the template.

105
00:07:33,000 --> 00:07:39,000
So with this template we are trying to provide what is the template instructions on how we want to deploy

106
00:07:39,000 --> 00:07:42,000
our microservices.

107
00:07:42,000 --> 00:07:45,000
So under this template, again we have metadata information.

108
00:07:45,000 --> 00:07:51,000
So under this metadata, again we need to mention labels, app config server. After the metadata, again

109
00:07:51,000 --> 00:07:53,000
the specifications.

110
00:07:53,000 --> 00:07:58,000
So here these specifications are related to template, whereas these specifications are related to the

111
00:07:58,000 --> 00:07:58,000
deployment.

112
00:07:58,000 --> 00:08:05,000
So under that deployment specification we are going to create template under the template, we are going

113
00:08:05,000 --> 00:08:07,000
to provide specifications related to the template.

114
00:08:07,000 --> 00:08:11,000
So that's why this specification element is getting repeated multiple times.

115
00:08:11,000 --> 00:08:18,000
Now under this specification, which is under the template, we are going to provide the important information

116
00:08:18,000 --> 00:08:22,000
with the help of this containers. Under these containers,

117
00:08:22,000 --> 00:08:28,000
we need to mention what is the name of your container and what is the image name that Kubernetes cluster

118
00:08:28,000 --> 00:08:31,000
has to consider to deploy your microservices?

119
00:08:31,000 --> 00:08:36,000
So here I have mentioned the S14, which is related to the previous section.

120
00:08:36,000 --> 00:08:39,000
So we are going to deploy the previous section docker image.

121
00:08:39,000 --> 00:08:46,000
So this is my complete image name like eazybytes/configserver:s14. Here you may have a question like

122
00:08:46,000 --> 00:08:53,000
how my Kubernetes cluster will know whether my images are present inside the Docker hub or Amazon Container

123
00:08:53,000 --> 00:08:56,000
Registry or any other container registry.

124
00:08:56,000 --> 00:09:03,000
Like I said before, by default, whenever we don't mention the container registry information internally,

125
00:09:03,000 --> 00:09:07,000
it is going to consider as docker.io by default.

126
00:09:07,000 --> 00:09:13,000
But if you have your images in some other places, then you need to mention those container registry

127
00:09:13,000 --> 00:09:16,000
details just before your eazybytes.

128
00:09:16,000 --> 00:09:21,000
But since right now we stored them inside the Docker hub, we don't need to mention the complete name.

129
00:09:21,000 --> 00:09:22,000
After the image under the ports

130
00:09:22,000 --> 00:09:26,000
we need to mention what is the container port like at which port,

131
00:09:26,000 --> 00:09:28,000
we want our container to get started.

132
00:09:28,000 --> 00:09:33,000
Like we know the config server has to get started at the port 8071.

133
00:09:33,000 --> 00:09:34,000
That's why I have given the same.

134
00:09:34,000 --> 00:09:41,000
So if you see here under containers we have mentioned the list element with the help of this hyphen.

135
00:09:41,000 --> 00:09:44,000
So as of now we only define a single container.

136
00:09:44,000 --> 00:09:50,000
So with this single container information, my Kubernetes cluster will create deployment and as part

137
00:09:50,000 --> 00:09:56,000
of the deployment, a pod will be created inside one of the worker node and my pod is going to have

138
00:09:56,000 --> 00:09:57,000
a single container.

139
00:09:57,000 --> 00:09:59,000
What if your config server container

140
00:10:00,000 --> 00:10:01,000
need some helper container.

141
00:10:01,000 --> 00:10:07,000
In such scenarios, you need to repeat these container instructions with a new list element under these

142
00:10:07,000 --> 00:10:08,000
containers.

143
00:10:08,000 --> 00:10:13,000
But since as of now we don't need any helper container for our config server, we have mentioned only

144
00:10:13,000 --> 00:10:16,000
a single container specifications.

145
00:10:16,000 --> 00:10:22,000
So if you see here, the important information that I want you to consider is, so this app config server

146
00:10:22,000 --> 00:10:25,000
has to be same in all the places.

147
00:10:25,000 --> 00:10:32,000
Like initially we have given a label for our deployment with the name app configserver, the same label

148
00:10:32,000 --> 00:10:35,000
we need to mention under the specifications.

149
00:10:35,000 --> 00:10:41,000
That's how the Kubernetes is going to map these specifications to this config server deployment. Because

150
00:10:41,000 --> 00:10:46,000
both of them has the same label, which is app configserver. Very similarly and a template

151
00:10:46,000 --> 00:10:52,000
also we need to mention the same label and since this template also has the same label, these template

152
00:10:52,000 --> 00:10:58,000
instructions will be considered for the same deployment, which is configserver-deployment.

153
00:10:58,000 --> 00:11:05,000
So with these deployment instructions now my config server docker image will get deployed as an Docker

154
00:11:05,000 --> 00:11:11,000
container inside my Kubernetes cluster. But the story is not going to end there. With the deployment,

155
00:11:11,000 --> 00:11:15,000
we simply deploying our microservice into a Kubernetes cluster.

156
00:11:15,000 --> 00:11:19,000
But how about exposing that container to the outside world or

157
00:11:19,000 --> 00:11:23,000
restricting that container only for the internal communication.

158
00:11:23,000 --> 00:11:29,000
So to control on how we want to expose our microservice container to the outside world, we need to

159
00:11:29,000 --> 00:11:36,000
create one more object with the name service in between these two configurations, like deployment and

160
00:11:36,000 --> 00:11:36,000
service,

161
00:11:36,000 --> 00:11:38,000
I have mentioned three hyphens.

162
00:11:38,000 --> 00:11:42,000
So do you know what is the meaning of three hyphens inside a Yaml file?

163
00:11:42,000 --> 00:11:48,000
So whenever we mention these three hyphens inside yaml file it indicates to the yaml please treat these

164
00:11:48,000 --> 00:11:51,000
single yaml file as a two separate Yaml files.

165
00:11:51,000 --> 00:11:56,000
So whatever I have mentioned in the top, all these configurations will be treated as a single Yaml

166
00:11:56,000 --> 00:11:57,000
file.

167
00:11:57,000 --> 00:12:02,000
And very similarly whatever I have mentioned below, these will be treated as a second yaml file.

168
00:12:02,000 --> 00:12:08,000
I can define these service instructions in another yaml file, but that is going to be super difficult

169
00:12:08,000 --> 00:12:14,000
for me because whenever we want to provide some instructions we need to provide the file name to the

170
00:12:14,000 --> 00:12:15,000
Kubernetes cluster.

171
00:12:15,000 --> 00:12:20,000
So if I have so many files then I need to run the apply command with all these file names.

172
00:12:20,000 --> 00:12:27,000
So that's why wherever possible, I will try to define all the Kubernetes configurations to a single

173
00:12:27,000 --> 00:12:30,000
microservice in a single Yaml file. And behind the scenes,

174
00:12:30,000 --> 00:12:36,000
since this Yaml file has this feature like separating the configurations with these three hyphens,

175
00:12:36,000 --> 00:12:42,000
my Kubernetes cluster is going to execute them one by one by seeing this special character which is

176
00:12:42,000 --> 00:12:44,000
three hyphens. For some reason,

177
00:12:44,000 --> 00:12:50,000
if you want to define more configurations in the same file, you can mention the three hyphens after

178
00:12:50,000 --> 00:12:52,000
the end of this service configuration as well.

179
00:12:52,000 --> 00:12:58,000
This way you can define any number of Yaml configurations in a single Yaml file.

180
00:12:58,000 --> 00:13:02,000
So now let's try to understand what is there present inside this service configuration.

181
00:13:02,000 --> 00:13:07,000
Whenever we are trying to create the service configuration, we need to make sure we are mentioning

182
00:13:07,000 --> 00:13:10,000
the API version as v1 and the kind has to be service.

183
00:13:10,000 --> 00:13:13,000
Whereas for the deployment, the kind is deployment.

184
00:13:13,000 --> 00:13:15,000
Since right now we are giving service instructions.

185
00:13:15,000 --> 00:13:18,000
We need to make sure we are giving the kind as service.

186
00:13:18,000 --> 00:13:22,000
Now under the metadata we need to mention the name, which is config server.

187
00:13:22,000 --> 00:13:28,000
So with this metadata name, I'm trying to give a name to my service which is config server.

188
00:13:28,000 --> 00:13:33,000
So please note that you are following the same service name like config server.

189
00:13:33,000 --> 00:13:41,000
Because whatever you have mentioned at this line 26 using the same name only my other microservice inside

190
00:13:41,000 --> 00:13:44,000
the Kubernetes cluster, they are going to communicate with each other.

191
00:13:44,000 --> 00:13:48,000
So this is going to act as a host name inside your Kubernetes cluster.

192
00:13:48,000 --> 00:13:51,000
So please make sure this name you are giving config server.

193
00:13:51,000 --> 00:13:57,000
Otherwise you need to make changes in lot, many other places when we deploy other microservice.

194
00:13:57,000 --> 00:14:03,000
Now, after defining some name for the service with the help of this metadata name, we need to provide

195
00:14:03,000 --> 00:14:04,000
the specification.

196
00:14:04,000 --> 00:14:10,000
So whatever specification that we are trying to define here, we want to apply that for an app with

197
00:14:10,000 --> 00:14:12,000
the name config server.

198
00:14:12,000 --> 00:14:14,000
That's why we need to use this selector.

199
00:14:14,000 --> 00:14:21,000
So if you see here the same app config server I have mentioned under the deployment labels as well like

200
00:14:21,000 --> 00:14:25,000
under the deployment metadata labels, I have the same app config server.

201
00:14:25,000 --> 00:14:32,000
So this tells to my Kubernetes cluster, whatever service that I have defining here, please apply to

202
00:14:32,000 --> 00:14:38,000
the containers that I have created with the help of deployment instructions with the same label app

203
00:14:38,000 --> 00:14:40,000
name as config server.

204
00:14:40,000 --> 00:14:43,000
Like here at the line six, we have the same label app number.

205
00:14:43,000 --> 00:14:49,000
So that's how my Kubernetes cluster is going to establish a link between a deployment and service.

206
00:14:49,000 --> 00:14:54,000
So after defining the selector app config server, we need to mention type.

207
00:14:54,000 --> 00:14:56,000
So under type here we have load balancer.

208
00:14:56,000 --> 00:14:59,000
So whenever we mention load balancer, it is an

209
00:14:59,000 --> 00:15:05,000
indication to the Kubernetes cluster that we want to expose our microservice to the outside world,

210
00:15:05,000 --> 00:15:08,000
which means to the outside of the Kubernetes cluster as well.

211
00:15:08,000 --> 00:15:13,000
For now, please note that Load Balancer will expose the container to the outside of the cluster.

212
00:15:13,000 --> 00:15:16,000
Later on, I'll show you what are the other options that we have.

213
00:15:16,000 --> 00:15:22,000
So this type inside the service is going to be super, super important because based upon this type,

214
00:15:22,000 --> 00:15:27,000
only the behavior of exposing our container will be controlled.

215
00:15:27,000 --> 00:15:30,000
After type, we need to mention ports and our ports,

216
00:15:30,000 --> 00:15:31,000
we need to mention protocol as TCP.

217
00:15:31,000 --> 00:15:37,000
Since we want to communicate over web, we need to mention the protocol as TCP.

218
00:15:37,000 --> 00:15:43,000
Now, since we are trying to expose these config server to the outside world, we need to mention at

219
00:15:43,000 --> 00:15:45,000
which port it has to expose.

220
00:15:45,000 --> 00:15:51,000
So whatever I have mentioned here, which is port 8071, this is the port which will be exposed to the

221
00:15:51,000 --> 00:15:58,000
outside world. Whereas whatever you have mentioned at the target port, this is the port where my container

222
00:15:58,000 --> 00:16:02,000
is going to start internally inside the Kubernetes network.

223
00:16:02,000 --> 00:16:09,000
So here we need to make sure this container, port and target port are always same because if you try

224
00:16:09,000 --> 00:16:13,000
to define different values, the Kubernetes is going to throw an error.

225
00:16:13,000 --> 00:16:14,000
I hope this is clear.

226
00:16:14,000 --> 00:16:21,000
So with this, we have created the Kubernetes configuration files for deploying our config server into

227
00:16:21,000 --> 00:16:23,000
the Kubernetes cluster.

228
00:16:23,000 --> 00:16:29,000
In other words, people also call this Kubernetes configuration files as Kubernetes manifest files.

229
00:16:29,000 --> 00:16:31,000
So that's an industry standard.

230
00:16:31,000 --> 00:16:35,000
So we should always call them as Kubernetes manifest files.

231
00:16:35,000 --> 00:16:40,000
So with these manifest files only, we are going to deploy our containers into the Kubernetes cluster

232
00:16:40,000 --> 00:16:43,000
and expose them to the outside world.

233
00:16:43,000 --> 00:16:46,000
So I hope this is clear as a next step in the next lecture,

234
00:16:46,000 --> 00:16:52,000
let's try to use this configurations and try to deploy our config server microservice into the local

235
00:16:52,000 --> 00:16:54,000
Kubernetes cluster.

236
00:16:54,000 --> 00:16:54,000
Thank you.

237
00:16:54,000 --> 00:16:56,000
And I'll catch you in the next lecture bye.

