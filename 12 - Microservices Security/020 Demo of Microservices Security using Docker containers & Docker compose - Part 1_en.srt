1
00:00:00,000 --> 00:00:04,000
Now is the time to test our security related changes

2
00:00:04,000 --> 00:00:07,000
with the help of Docker Containers and Docker Compose.

3
00:00:07,000 --> 00:00:10,000
This discussion is going to be interesting.

4
00:00:10,000 --> 00:00:17,000
You're going to learn how to secure your internal microservices so that no one can access them directly.

5
00:00:17,000 --> 00:00:22,000
Always the client applications has to go through the edge server only.

6
00:00:22,000 --> 00:00:28,000
So to get started around testing with the help of Docker containers behind the scenes, I have generated

7
00:00:28,000 --> 00:00:33,000
all the images of the microservices with the tag name as s12.

8
00:00:33,000 --> 00:00:35,000
You can confirm the same inside my Docker desktop.

9
00:00:35,000 --> 00:00:39,000
So these are all the Docker images with the tag name as s12.

10
00:00:39,000 --> 00:00:42,000
I also pushed them into my Docker hub as well.

11
00:00:42,000 --> 00:00:49,000
You can see here if I can open any of my microservice now, you should be able to see a new tag with

12
00:00:49,000 --> 00:00:51,000
the name as s12. As a next step,

13
00:00:51,000 --> 00:00:56,000
I also updated the Docker compose file behind the scenes, but I'm going to quickly cover you,

14
00:00:56,000 --> 00:01:00,000
what are the changes that I have done inside the Docker compose file?

15
00:01:00,000 --> 00:01:03,000
For the same, I'm going to open any of the Docker compose file.

16
00:01:03,000 --> 00:01:08,000
For example, I'm going to open the file present inside the prod profile.

17
00:01:08,000 --> 00:01:13,000
The very first change that I have done is, I have changed the tag name from S11 to S12.

18
00:01:13,000 --> 00:01:18,000
Because when we copied the code from the previous section, the tag name will have S11.

19
00:01:18,000 --> 00:01:23,000
That's why I have updated the tag names from S11 to S12.

20
00:01:23,000 --> 00:01:29,000
After making these tag related changes, I went to the top of this docker-compose.yml file and I have

21
00:01:29,000 --> 00:01:35,000
created a new service with the name Keycloak, so the service name is going to be Keycloak.

22
00:01:35,000 --> 00:01:41,000
And this is the image name and I have given a container name and you can see I also gave a port mapping

23
00:01:41,000 --> 00:01:48,000
where my keycloak is going to start at the port 8080 inside the Docker network, whereas it is going

24
00:01:48,000 --> 00:01:53,000
to expose the traffic to the outside world at the port 7080.

25
00:01:53,000 --> 00:01:58,000
Under the environment variables, I have provided two environment variables related to Keycloak admin

26
00:01:58,000 --> 00:02:06,000
username and Keycloak admin password. And under the command I'm trying to pass a value which is start -dev.

27
00:02:06,000 --> 00:02:07,000
.

28
00:02:07,000 --> 00:02:13,000
So since I'm trying to use the keycloak inside my local system, I'm trying to use this command which

29
00:02:13,000 --> 00:02:18,000
is start -dev so that my keycloak will leverage the internal database.

30
00:02:18,000 --> 00:02:24,000
And after this command you can see with the help of these extends I'm trying to extend the service name

31
00:02:24,000 --> 00:02:26,000
which is network deploy service.

32
00:02:26,000 --> 00:02:32,000
So this will make sure that my keycloak service also is going to start inside the same easy bank network

33
00:02:32,000 --> 00:02:35,000
where all the remaining services are going to start.

34
00:02:35,000 --> 00:02:42,000
And after introducing this service, I didn't make any changes related to the observability and monitoring.

35
00:02:42,000 --> 00:02:49,000
So all these read, write, promptail, tell, Minio, Prometheus, tempo, Grafana, Gateway.

36
00:02:49,000 --> 00:02:53,000
So inside all these services I have not made any changes.

37
00:02:53,000 --> 00:02:55,000
Similarly under the config server

38
00:02:55,000 --> 00:02:58,000
also I didn't make any changes even under the Eureka server

39
00:02:59,000 --> 00:03:00,000
also I didn't make any changes.

40
00:03:00,000 --> 00:03:05,000
Now coming to the accounts microservice, you can see I have deleted the port mapping.

41
00:03:05,000 --> 00:03:11,000
Previously I used to expose my accounts microservice to the outside world at the port 8080.

42
00:03:11,000 --> 00:03:16,000
But since now I have deleted the port mapping inside my docker compose file,

43
00:03:16,000 --> 00:03:20,000
my account service is not going to be exposed to the outside world.

44
00:03:20,000 --> 00:03:24,000
Only the services which are deployed in the same Docker network.

45
00:03:24,000 --> 00:03:28,000
They should be able to communicate with the service name at the port 8080.

46
00:03:28,000 --> 00:03:31,000
So the same kind of changes I have done for loans under loans

47
00:03:31,000 --> 00:03:37,000
also, I have deleted the port mapping related changes and the same for cards microservice. Now coming

48
00:03:37,000 --> 00:03:39,000
to the gateway server.

49
00:03:39,000 --> 00:03:46,000
You can see here I have created a new environment variable which is spring security Oauth2 Resource

50
00:03:46,000 --> 00:03:49,000
server JWT, JWK-SET-URI.

51
00:03:50,000 --> 00:03:57,000
Here we need to provide the keycloak endpoint URL details from where my gateway server can fetch the

52
00:03:57,000 --> 00:03:58,000
public certificate.

53
00:03:58,000 --> 00:04:01,000
Here you can see instead of localhost

54
00:04:01,000 --> 00:04:06,000
I'm trying to mention what is the service name that we are trying to use inside the Docker network.

55
00:04:06,000 --> 00:04:08,000
The service name is keycloak. And the port name,

56
00:04:08,000 --> 00:04:12,000
here I'm using 8080 but not the 7080.

57
00:04:12,000 --> 00:04:19,000
Inside the applications.yml file we have mentioned localhost 7080 because 7080 is the port which

58
00:04:19,000 --> 00:04:20,000
is exposed to the outside world.

59
00:04:20,000 --> 00:04:27,000
Whereas since my gateway server is going to interact with the keycloak inside the Docker network directly

60
00:04:27,000 --> 00:04:32,000
with the help of this service name, we need to mention what is the port number where the keycloak

61
00:04:32,000 --> 00:04:34,000
server started inside the Docker network.

62
00:04:34,000 --> 00:04:41,000
That's why we need to make sure we are mentioning this port number as 8080, but not the 7080.

63
00:04:41,000 --> 00:04:46,000
So these are the changes that I have done inside that Docker compose file.

64
00:04:46,000 --> 00:04:54,000
So the same changes I have copied inside other profiles also like default and as well. Now as a next

65
00:04:54,000 --> 00:04:57,000
step, I can start all my containers with the help of docker

66
00:04:57,000 --> 00:05:00,000
compose up command. For the same,

67
00:05:00,000 --> 00:05:01,000
inside my terminal.

68
00:05:01,000 --> 00:05:08,000
I'm going to run the command which is Docker compose up -d, but before you try to run this command,

69
00:05:08,000 --> 00:05:16,000
please make sure you stopped all your local running instances inside your idea along with the keycloak

70
00:05:16,000 --> 00:05:18,000
container running inside your Docker desktop.

71
00:05:18,000 --> 00:05:24,000
I'm trying to confirm here there are no services running inside my local system under that Docker containers,

72
00:05:24,000 --> 00:05:29,000
as of now you can see the keycloak which we have started before as an individual container.

73
00:05:29,000 --> 00:05:34,000
It is in the running status. So I need to make sure I am stopping this.

74
00:05:34,000 --> 00:05:39,000
Otherwise the keycloak service that I'm trying to start with the help of Docker compose will not

75
00:05:39,000 --> 00:05:39,000
start.

76
00:05:39,000 --> 00:05:46,000
So now let me try to run this command, and this command is going to start all my containers, including

77
00:05:46,000 --> 00:05:46,000
keycloak.

78
00:05:46,000 --> 00:05:49,000
So this is going to take 2 to 3 minutes.

79
00:05:49,000 --> 00:05:53,000
I hope you are clear what changes we have done inside the Docker compose file.

80
00:05:53,000 --> 00:05:58,000
Let's continue the testing of the changes with the help of Docker containers in the next lecture.

81
00:05:58,000 --> 00:06:01,000
Thank you and I'll catch you in the next lecture bye.

