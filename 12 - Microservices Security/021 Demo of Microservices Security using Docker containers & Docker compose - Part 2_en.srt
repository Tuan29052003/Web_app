1
00:00:00,000 --> 00:00:04,000
In the previous lecture we ran the Docker compose up command.

2
00:00:04,000 --> 00:00:09,000
Like you can see here right now, the command started all my containers successfully.

3
00:00:09,000 --> 00:00:13,000
We can also confirm the same by checking inside the Docker desktop.

4
00:00:13,000 --> 00:00:15,000
So this is my Docker desktop.

5
00:00:15,000 --> 00:00:21,000
Inside the containers, you can see now all the containers that I have configured inside the Docker

6
00:00:21,000 --> 00:00:26,000
compose file are running without any issues. Especially the keycloak container.

7
00:00:26,000 --> 00:00:32,000
You can see it is running at the port 7080. Coming to the cards, accounts and loans.

8
00:00:32,000 --> 00:00:39,000
You will be able to see there is no port mapping here for these containers because we are not exposing

9
00:00:39,000 --> 00:00:42,000
any traffic to the outside world.

10
00:00:42,000 --> 00:00:48,000
So anyone who wants to communicate with these microservice, they has to be present inside the Docker

11
00:00:48,000 --> 00:00:48,000
network.

12
00:00:48,000 --> 00:00:56,000
We can also validate these by trying to invoke the direct urls of accounts, loans and cards microservice.

13
00:00:56,000 --> 00:01:04,000
So inside my postman I will go to the accounts folder under here we can open any of the get like 

14
00:01:04,000 --> 00:01:06,000
build-info and I'll try to invoke this API.

15
00:01:06,000 --> 00:01:13,000
You can see I'm trying to give my direct API path that is available inside the accounts microservice.

16
00:01:13,000 --> 00:01:18,000
So if I try to invoke you can see I'm getting connection refused error.

17
00:01:18,000 --> 00:01:23,000
That means there is no application running inside my local system at the port

18
00:01:23,000 --> 00:01:24,000
8080.

19
00:01:24,000 --> 00:01:29,000
So let me confirm the same by running one of the API inside the cards

20
00:01:29,000 --> 00:01:29,000
microservice also.

21
00:01:29,000 --> 00:01:35,000
The cards microservice usually starts at the port 9000, so I can try to invoke this.

22
00:01:35,000 --> 00:01:38,000
This also giving me connection refused error.

23
00:01:38,000 --> 00:01:43,000
Now let me go to loans and here also I'm going to invoke one of the get API

24
00:01:43,000 --> 00:01:46,000
maybe this time I'll try to invoke build-info API.

25
00:01:46,000 --> 00:01:52,000
You can see the port number is 8090, which usually used by my LoansApplication.

26
00:01:52,000 --> 00:01:58,000
So let me try to invoke this API and this one also giving me connection refused error.

27
00:01:58,000 --> 00:02:05,000
So with this it confirms that all our individual microservices like loans, cards and accounts, they

28
00:02:05,000 --> 00:02:11,000
are started within the Docker network, but they didn't expose themselves to the outside world.

29
00:02:11,000 --> 00:02:18,000
So now as a next step in order to test the changes related to the security, first I'll go to the folder

30
00:02:18,000 --> 00:02:23,000
which is Gateway Security, and here I will try to invoke few of the Get APIs.

31
00:02:23,000 --> 00:02:29,000
So this one I'm trying to invoke, you can see I am going to get a successful response after few seconds

32
00:02:29,000 --> 00:02:32,000
you can see I'm getting a successful response.

33
00:02:32,000 --> 00:02:35,000
I can try to invoke Cards API also For cards

34
00:02:35,000 --> 00:02:38,000
also, I'm going to get a successful response.

35
00:02:38,000 --> 00:02:39,000
So this is the response.

36
00:02:39,000 --> 00:02:46,000
Let me go to the Loans API and this one also is going to give me a successful response.

37
00:02:46,000 --> 00:02:48,000
So this confirms the permit All

38
00:02:48,000 --> 00:02:52,000
configurations that we have done inside the resource server are working fine.

39
00:02:52,000 --> 00:02:59,000
As a next step, let me try to invoke one of the secured API, which is create API available inside

40
00:02:59,000 --> 00:03:01,000
the accounts microservice.

41
00:03:01,000 --> 00:03:07,000
Here I'm not providing any authentication details without any authenticated related information,

42
00:03:07,000 --> 00:03:12,000
I'm trying to click on this send button and you can see I got an 401 error.

43
00:03:12,000 --> 00:03:14,000
So this confirms the security is working.

44
00:03:14,000 --> 00:03:21,000
Now as a next step, let me try to invoke the accounts create API with the help of client credentials,

45
00:03:21,000 --> 00:03:22,000
grant type flow.

46
00:03:22,000 --> 00:03:27,000
If I try to click on this get new access token, you can see we'll get an authentication failed error.

47
00:03:27,000 --> 00:03:33,000
Because when we try to create the keycloak service with the help of Docker compose, it is going to

48
00:03:33,000 --> 00:03:35,000
create a brand new container of the keycloak.

49
00:03:35,000 --> 00:03:42,000
That means my keycloak is not going to have any client details or end user details that we have created

50
00:03:42,000 --> 00:03:43,000
previously.

51
00:03:43,000 --> 00:03:45,000
So that's why we are getting these authentication errors.

52
00:03:45,000 --> 00:03:52,000
So so to resolve this issue, we need to register the clients again inside the keycloak server.

53
00:03:52,000 --> 00:03:59,000
Why we have to do this is because the new container is created and since we are using the internal database

54
00:03:59,000 --> 00:04:06,000
inside the dev environment, all my previously created client details will be lost whenever the container

55
00:04:06,000 --> 00:04:09,000
is deleted or whenever the new container is created.

56
00:04:09,000 --> 00:04:15,000
But in production environments, the keycloak is going to have a supporting database where it can store

57
00:04:15,000 --> 00:04:18,000
all the client details and end user details.

58
00:04:18,000 --> 00:04:22,000
I came to the browser and opened the URL, which is localhost 7080.

59
00:04:22,000 --> 00:04:28,000
Here, let me click on this administration console and enter the credentials of admin,

60
00:04:28,000 --> 00:04:30,000
so admin, admin I'm entering.

61
00:04:30,000 --> 00:04:34,000
So let me click on the sign in post that you can go to the clients.

62
00:04:34,000 --> 00:04:39,000
As of now you can see there are no clients that we have created previously because this is a brand new

63
00:04:39,000 --> 00:04:40,000
container.

64
00:04:40,000 --> 00:04:46,000
So let me click on this create client and I'm going to give the same client ID, inside the Postman

65
00:04:46,000 --> 00:04:52,000
we have the client ID configured as easybank-callcenter-cc the same I'm going to mention here.

66
00:04:52,000 --> 00:04:54,000
I will skip the name and description for now.

67
00:04:54,000 --> 00:04:59,000
Let me click on this next and post that I will enable this client authentication and

68
00:04:59,000 --> 00:05:05,000
disable the standard flow, direct access grants and enable the service account roles because we are

69
00:05:05,000 --> 00:05:08,000
trying to test the client credentials grant type flow.

70
00:05:08,000 --> 00:05:14,000
So let me click on this next post that I'm not going to enter any root URL and home URL.

71
00:05:14,000 --> 00:05:15,000
Let me click on the save button.

72
00:05:15,000 --> 00:05:21,000
I'll go to the credentials and I'll copy the credentials and I'll mention the same under the client

73
00:05:21,000 --> 00:05:22,000
secret.

74
00:05:22,000 --> 00:05:29,000
Now I will get an access token successfully, but if I use this access token, I will get 403 error.

75
00:05:29,000 --> 00:05:34,000
The reason is we have not configured the roles but the client that we have created.

76
00:05:34,000 --> 00:05:39,000
So let's try to create the roles and assign the same to the client that we have created.

77
00:05:39,000 --> 00:05:47,000
So here I'll go to the realm roles and I'm going to create the role accounts and save the same here and post

78
00:05:47,000 --> 00:05:47,000
that,

79
00:05:47,000 --> 00:05:50,000
I'll go to the roles again and click on this create role

80
00:05:51,000 --> 00:05:54,000
and this time I'm going to create the role with the name LOANS.

81
00:05:54,000 --> 00:05:58,000
Now I'll go back to the roles and click on this create role.

82
00:05:58,000 --> 00:06:01,000
And this time I'm going to create the role with the name CARDS.

83
00:06:01,000 --> 00:06:02,000
So let me save this,

84
00:06:02,000 --> 00:06:05,000
with this, I have all the required roles.

85
00:06:05,000 --> 00:06:09,000
Let me go to the clients and open the easybank-callcenter-cc.

86
00:06:09,000 --> 00:06:14,000
I'll go to the service account roles and here I will try to click on this assign role.

87
00:06:14,000 --> 00:06:19,000
Inside this page I'm going to select accounts, cards, loans and assign the same.

88
00:06:19,000 --> 00:06:20,000
Now inside the postman,

89
00:06:20,000 --> 00:06:25,000
I will try to get a new access token and I will try to use the same and post that

90
00:06:25,000 --> 00:06:27,000
I'll click on this send button.

91
00:06:27,000 --> 00:06:30,000
This time we should get a successful response.

92
00:06:30,000 --> 00:06:32,000
Like you can see we are getting a successful response.

93
00:06:32,000 --> 00:06:39,000
So let me take the client secret from this request and use the same inside the cards request as well.

94
00:06:39,000 --> 00:06:45,000
So inside this cards request, I'm going to mention these client secret and post that I'm going to save

95
00:06:45,000 --> 00:06:49,000
the same and click on this get new access token button.

96
00:06:49,000 --> 00:06:51,000
With that, I'll get a new access token.

97
00:06:51,000 --> 00:06:55,000
Let me use the same and post that I can click on the send button.

98
00:06:55,000 --> 00:07:00,000
Now I should get a successful response and you can see my card details are created successfully.

99
00:07:00,000 --> 00:07:03,000
Now let me go to the loans request.

100
00:07:03,000 --> 00:07:09,000
And here also I'm going to paste the new client secret that we have and post that I'm going to save

101
00:07:09,000 --> 00:07:12,000
it and try to get a new access token.

102
00:07:12,000 --> 00:07:18,000
Once the access token is populated inside my authorization tab, I'm going to click on this send button.

103
00:07:18,000 --> 00:07:21,000
Now, you should be able to see a successful response.

104
00:07:21,000 --> 00:07:23,000
So I'm getting a successful response.

105
00:07:23,000 --> 00:07:24,000
As a next step,

106
00:07:24,000 --> 00:07:31,000
I can go to the Accounts_GET_PermitAll requests, and here using this API, we are going to fetch

107
00:07:31,000 --> 00:07:33,000
all the accounts, loans and cards details.

108
00:07:33,000 --> 00:07:34,000
So let me invoke this.

109
00:07:34,000 --> 00:07:39,000
We should get a successful response since we have used a different mobile number there.

110
00:07:39,000 --> 00:07:46,000
Let me try to give a mobile number which is 688 and try to invoke this send button again.

111
00:07:46,000 --> 00:07:49,000
This time you can see I'm getting a successful response.

112
00:07:49,000 --> 00:07:53,000
So we have tested the client credentials grant type flow very quickly,

113
00:07:53,000 --> 00:07:57,000
let's try to test the authorization code grant type flow as well.

114
00:07:57,000 --> 00:08:03,000
For the same inside my Keycloak server, I'm going to create a new client with the same ID like we have

115
00:08:03,000 --> 00:08:04,000
created previously.

116
00:08:04,000 --> 00:08:10,000
If you can go to the any of the request of authorization code, you should be able to see a client ID.

117
00:08:10,000 --> 00:08:16,000
So let me copy this and mention the same here and post that I'm going to click on this next button.

118
00:08:16,000 --> 00:08:22,000
Enable the client authentication and uncheck these direct access grants and I'll make sure the standard

119
00:08:22,000 --> 00:08:24,000
flow is enabled.

120
00:08:24,000 --> 00:08:28,000
After this, I'm going to click on this next button inside this page

121
00:08:28,000 --> 00:08:31,000
under the redirect URLs, I'm going to give Asterisk.

122
00:08:31,000 --> 00:08:35,000
Let me give the same under the web origins as well.

123
00:08:35,000 --> 00:08:40,000
After entering these values, I'm going to click on the Save button and I'll go to the credentials post

124
00:08:40,000 --> 00:08:45,000
that I will try to copy these credentials and paste the same here under the client secret.

125
00:08:45,000 --> 00:08:50,000
Now, as a next step, we need to create the end user details as well inside the Keycloak server.

126
00:08:50,000 --> 00:08:52,000
So I'll go to the users.

127
00:08:52,000 --> 00:08:59,000
I'll create a new user with the same username like madan and email is going to be tutor@eazybank.com

128
00:09:00,000 --> 00:09:02,000
.

129
00:09:02,000 --> 00:09:04,000
And I'll enable this email verifier.

130
00:09:04,000 --> 00:09:06,000
I will skip the first name, last name.

131
00:09:06,000 --> 00:09:10,000
I'll directly click on this create button and post that,

132
00:09:10,000 --> 00:09:14,000
I'll go to the credentials and try to set a password with the value

133
00:09:14,000 --> 00:09:15,000
one, two three, four five.

134
00:09:15,000 --> 00:09:21,000
So let me confirm the same and disable this temporary switch and click on the save button.

135
00:09:21,000 --> 00:09:26,000
This will save a password for my username which is Madan.

136
00:09:26,000 --> 00:09:28,000
So now we have created an end user.

137
00:09:28,000 --> 00:09:34,000
As a next step we can go to the role mapping and try to assign the roles, accounts, cards and loans.

138
00:09:34,000 --> 00:09:36,000
So let me click on this assign button.

139
00:09:36,000 --> 00:09:38,000
I have made all the required changes.

140
00:09:38,000 --> 00:09:42,000
I can close this browser instance of Keycloak as a next step,

141
00:09:42,000 --> 00:09:45,000
I will try to get an access token.

142
00:09:45,000 --> 00:09:46,000
So let me click on this.

143
00:09:46,000 --> 00:09:51,000
This will open the browser where it will ask me my end user credentials.

144
00:09:51,000 --> 00:09:56,000
So let me enter my credentials which are Madan and the password is one, two, three, four, five.

145
00:09:56,000 --> 00:09:58,000
Now I'm trying to click on the sign in button.

146
00:09:58,000 --> 00:09:59,000
This will redirect

147
00:09:59,000 --> 00:10:01,000
back me to the postman.

148
00:10:01,000 --> 00:10:07,000
I'm going to click on this proceed and use this token, and now I'm going to submit this request.

149
00:10:07,000 --> 00:10:14,000
And you can see I'm getting a successful response now as a next step, I can also test the cards related

150
00:10:14,000 --> 00:10:17,000
APIs with the help of authorization code grant flow.

151
00:10:17,000 --> 00:10:23,000
So here we need to make sure we are mentioning the latest client secret value.

152
00:10:23,000 --> 00:10:29,000
Let me try to get the same from the accounts microservice. So I can try to copy the secret from this

153
00:10:29,000 --> 00:10:33,000
request and mention the same under the cards.

154
00:10:33,000 --> 00:10:37,000
And with this now I should be able to get an new access token.

155
00:10:37,000 --> 00:10:45,000
So let me use the same access token and invoke this API and I should get a successful response. So you

156
00:10:45,000 --> 00:10:47,000
can see I'm getting a successful response.

157
00:10:47,000 --> 00:10:49,000
So let me go to the loans as well.

158
00:10:49,000 --> 00:10:56,000
And here also I'm going to paste the new secret that we have created post that I can try to get an access

159
00:10:56,000 --> 00:10:58,000
token and use the same here.

160
00:10:58,000 --> 00:11:01,000
Now I'm going to click on this send button.

161
00:11:01,000 --> 00:11:03,000
Here also, you can see I got a successful response. With this,

162
00:11:03,000 --> 00:11:10,000
It is pretty clear that our security related changes are working fine without any issues inside the

163
00:11:10,000 --> 00:11:12,000
Docker containers as well.

164
00:11:12,000 --> 00:11:19,000
In fact, now our microservices are more secured because we didn't expose loans, cards and accounts

165
00:11:19,000 --> 00:11:22,000
microservices to the outside world.

166
00:11:22,000 --> 00:11:27,000
Only the Gateway server is authorized to connect with the accounts, loans and cards.

167
00:11:27,000 --> 00:11:33,000
I hope your super, super clear about all the changes that we have done inside this section.

168
00:11:33,000 --> 00:11:39,000
Before I try to close this section, let me confirm you that I have checked in all the changes that

169
00:11:39,000 --> 00:11:46,000
we have discussed inside the GitHub repo into this GitHub repo with the folder name section12.

170
00:11:46,000 --> 00:11:52,000
Inside this section12 folder, you should be able to see all the changes that we have discussed throughout

171
00:11:52,000 --> 00:11:53,000
this section.

172
00:11:53,000 --> 00:11:57,000
I hope you are super, super happy with the progress that we are making inside this course.

173
00:11:57,000 --> 00:12:02,000
Now we are pretty clear on how to handle security inside our microservices.

174
00:12:02,000 --> 00:12:04,000
This is a very big milestone.

175
00:12:04,000 --> 00:12:09,000
You are now one of the proud developer who knows on how to secure your microservices.

176
00:12:09,000 --> 00:12:13,000
So take a break, come back and we can continue in the next section.

177
00:12:13,000 --> 00:12:14,000
Thank you.

178
00:12:14,000 --> 00:12:16,000
And I'll catch you in the next section.

179
00:12:16,000 --> 00:12:16,000
Bye.

