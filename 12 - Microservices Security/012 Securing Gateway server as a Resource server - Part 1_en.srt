1
00:00:00,000 --> 00:00:03,000
We set up our own ad server and post that

2
00:00:03,000 --> 00:00:08,000
we also created client details inside the auth server and with the same details

3
00:00:08,000 --> 00:00:11,000
now we are able to get an access token.

4
00:00:11,000 --> 00:00:15,000
So everything set up on the client side and the auth server.

5
00:00:15,000 --> 00:00:18,000
The only pending part as of now is resource server.

6
00:00:18,000 --> 00:00:23,000
As an next step, we need to convert our gateway server as a resource server and post that we should

7
00:00:23,000 --> 00:00:29,000
try to send the access token to the resource server and see if everything is working like the way we

8
00:00:29,000 --> 00:00:30,000
expect.

9
00:00:30,000 --> 00:00:37,000
So to get started around these changes, I'm going to create a new folder inside my workspace location

10
00:00:37,000 --> 00:00:43,000
and this folder I'm going to create with the help of the previous code that we have created inside the

11
00:00:43,000 --> 00:00:44,000
Section 11.

12
00:00:44,000 --> 00:00:49,000
So let me copy this Section 11 related code and I'm trying to paste the same here.

13
00:00:49,000 --> 00:00:53,000
Post that I'm going to rename the same to the section 12.

14
00:00:53,000 --> 00:00:59,000
Inside this section 12, I'm going to look for any hidden files so there is some hidden file with

15
00:00:59,000 --> 00:01:00,000
the name .idea.

16
00:01:01,000 --> 00:01:02,000
So let me delete this.

17
00:01:02,000 --> 00:01:09,000
Now as a next step, I will go to the IntelliJ idea and try to open this section 12.

18
00:01:09,000 --> 00:01:17,000
Here let me click on this open button and go to the Storage, Workspaces Microservices section 12 and post

19
00:01:17,000 --> 00:01:19,000
that I'm going to click on this open button.

20
00:01:19,000 --> 00:01:26,000
So now you can see I'm trying to load all my Maven projects inside this section 12 folder and post that

21
00:01:26,000 --> 00:01:31,000
I'm also going to do the build, which will ask me to enable the annotation processing.

22
00:01:31,000 --> 00:01:34,000
So let me enable them. As a next step,

23
00:01:34,000 --> 00:01:38,000
let me open the pom.xml present inside the Gateway server.

24
00:01:38,000 --> 00:01:43,000
Here I'm going to add three dependencies which are related to the security.

25
00:01:43,000 --> 00:01:48,000
So just above that dev tools, I'm going to introduce three new dependencies.

26
00:01:48,000 --> 00:01:50,000
Let me paste these dependencies.

27
00:01:50,000 --> 00:01:52,000
You can also get them from the GitHub repo.

28
00:01:52,000 --> 00:01:56,000
So you can see the first dependency is spring boot stater security.

29
00:01:56,000 --> 00:02:01,000
With this, I'm trying to add the spring security project into my gateway server.

30
00:02:01,000 --> 00:02:08,000
After that, in order to convert my gateway server as an OAuth2 resource server, I need to use this

31
00:02:08,000 --> 00:02:12,000
dependency which is spring-security-oauth2-resource-server.

32
00:02:12,000 --> 00:02:18,000
And since we are using JWT related tokens, we need to make sure we are adding these spring security

33
00:02:18,000 --> 00:02:22,000
oauth2-jose dependency inside the pom.xml.

34
00:02:22,000 --> 00:02:28,000
So once you have added these three dependencies, please load the Maven changes which will download

35
00:02:28,000 --> 00:02:32,000
all the libraries related to these three dependencies.

36
00:02:32,000 --> 00:02:40,000
After this, I'm going to create a new package inside my gateway server and this new package name is

37
00:02:40,000 --> 00:02:47,000
going to be com.eazybytes.gatewayserver.config because inside this I'm going to create

38
00:02:47,000 --> 00:02:50,000
some security related configurations.

39
00:02:50,000 --> 00:02:54,000
Inside this config package, I'm going to create a new class.

40
00:02:54,000 --> 00:02:59,000
The class name is going to be SecurityConfig. Inside this SecurityConfig class,

41
00:02:59,000 --> 00:03:07,000
first I'm going to mention @Configuration annotation because I will try to create some beans

42
00:03:07,000 --> 00:03:08,000
inside this class.

43
00:03:08,000 --> 00:03:13,000
So to communicate the same to my spring framework to create these beans during the startup, I need

44
00:03:13,000 --> 00:03:16,000
to mention this annotation which is @Configuration.

45
00:03:16,000 --> 00:03:23,000
The next annotation that I want to use here is, @EnableWebFluxSecurity.

46
00:03:23,000 --> 00:03:28,000
Since Spring Cloud Gateway built based upon the spring reactive module, we need to make sure we are

47
00:03:28,000 --> 00:03:31,000
using these EnableWebFluxSecurity annotation.

48
00:03:31,000 --> 00:03:37,000
If it is a normal spring boot web application, then you should use the annotation, which is 

49
00:03:37,000 --> 00:03:39,000
@EnabledWebSecurity.

50
00:03:39,000 --> 00:03:47,000
I hope it is clear as a next step, I'm going to create a method inside this class and this method is

51
00:03:47,000 --> 00:03:49,000
going to create a bean.

52
00:03:49,000 --> 00:03:55,000
But that reason first I'm going to mention @Bean annotation and below this annotation, I'm

53
00:03:55,000 --> 00:04:02,000
going to create a method which is public, and the return type from this method is going to be SecurityWebFilterChain

54
00:04:02,000 --> 00:04:04,000
and the method name

55
00:04:04,000 --> 00:04:08,000
I'll just keep it as springSecurityFilterChain.

56
00:04:08,000 --> 00:04:11,000
This is the random method name that I'm trying to use.

57
00:04:11,000 --> 00:04:19,000
And to this method we need to accept an input parameter which is ServerHttpSecurity.

58
00:04:20,000 --> 00:04:22,000
Post that I'm going to mention curly braces.

59
00:04:22,000 --> 00:04:26,000
So as of now you can see we have an empty body here.

60
00:04:26,000 --> 00:04:32,000
Now inside this method using the input parameter, which is ServerHttpSecurity.

61
00:04:32,000 --> 00:04:37,000
I need to invoke a method which is authorizeExchange.

62
00:04:37,000 --> 00:04:39,000
So there are two types of methods.

63
00:04:39,000 --> 00:04:45,000
One is deprecated, the other one is authorizeExchange, which is going to accept some configurations.

64
00:04:45,000 --> 00:04:51,000
So let me invoke the non deprecated method to this authorizeExchange method.

65
00:04:51,000 --> 00:04:53,000
We need to pass the lambda configurations.

66
00:04:53,000 --> 00:04:56,000
So let me try to write some lambda configuration here.

67
00:04:56,000 --> 00:04:59,000
First, I'll try to give some random name to my lambda

68
00:05:00,000 --> 00:05:01,000
configuration variable.

69
00:05:01,000 --> 00:05:07,000
The variable name is going to be exchanges and post that, I'm going to use the lambda symbol, followed

70
00:05:07,000 --> 00:05:09,000
by what is a variable name, which is exchanges.

71
00:05:09,000 --> 00:05:17,000
Using these exchanges, you can mention any exchange that means any kind of requests you want to be

72
00:05:17,000 --> 00:05:18,000
authenticated.

73
00:05:18,000 --> 00:05:24,000
That means all the requests that are coming towards your gateway server has to be authenticated.

74
00:05:24,000 --> 00:05:27,000
That's what we are trying to achieve with the help of these authenticated.

75
00:05:27,000 --> 00:05:31,000
For some reason, if you want to permit everything you can use permitAll().

76
00:05:31,000 --> 00:05:37,000
But right now I don't want to go either like completely authenticated or with completely permitAll().

77
00:05:37,000 --> 00:05:42,000
I want to have some API's to be accessible without any security.

78
00:05:42,000 --> 00:05:50,000
Whereas for other type of API's I want them to be protected so that only authenticated users can access

79
00:05:50,000 --> 00:05:50,000
them.

80
00:05:50,000 --> 00:05:56,000
So to achieve the same first, let me delete all these dot authenticated and any exchange.

81
00:05:56,000 --> 00:05:59,000
So any exchange means all type of requests.

82
00:05:59,000 --> 00:06:04,000
So after this exchanges, I'm going to invoke a method which is pathMatches.

83
00:06:04,000 --> 00:06:09,000
So here pathMatches has three different overloaded methods.

84
00:06:09,000 --> 00:06:14,000
The very first method is, it is going to accept what is the Http method type.

85
00:06:14,000 --> 00:06:17,000
So I'm going to invoke the same to this pathMatches

86
00:06:17,000 --> 00:06:18,000
method.

87
00:06:18,000 --> 00:06:22,000
I'm going to mention HttpMethod.get().

88
00:06:22,000 --> 00:06:30,000
So for all the APIs inside my gateway server that supports Http get method, I want to permitAll() that

89
00:06:30,000 --> 00:06:35,000
means any client application they can invoke the get APIs inside my gateway server.

90
00:06:35,000 --> 00:06:40,000
Without any security, they can fetch the data and they can process on their side.

91
00:06:40,000 --> 00:06:46,000
So think like this is kind of one of the business requirement where your microservices network is fine

92
00:06:46,000 --> 00:06:48,000
to send the data in a read only mode.

93
00:06:48,000 --> 00:06:55,000
But if someone is trying to create or update or delete, then only you want to enforce some security.

94
00:06:55,000 --> 00:06:59,000
So like we know we followed a standard inside all the get api methods.

95
00:06:59,000 --> 00:07:01,000
We are simply reading the data.

96
00:07:01,000 --> 00:07:07,000
So that's why I'm trying to provide the permitAll() for all such get APIs if needed

97
00:07:07,000 --> 00:07:09,000
you can make them also authenticated.

98
00:07:09,000 --> 00:07:14,000
It's up to you since I want to show you the various flavors of permitAll() and authenticated

99
00:07:14,000 --> 00:07:17,000
I'm trying to go with this approach. Now as a next step,

100
00:07:17,000 --> 00:07:21,000
we need to enforce some security for the remaining APIs. For the same,

101
00:07:21,000 --> 00:07:28,000
let me go to the next line and here I'm going to again invoke the pathMatches() method, but this time

102
00:07:28,000 --> 00:07:34,000
I'm going to invoke the pathMatches() method that is going to accept the string representation of Antipatterns.

103
00:07:34,000 --> 00:07:35,000
So what are these

104
00:07:35,000 --> 00:07:36,000
antipatterns.

105
00:07:36,000 --> 00:07:40,000
So these are the API paths that I want to secure or I want to permit all.

106
00:07:40,000 --> 00:07:48,000
So here I'm going to mention a pattern which is any path which has a prefix of easybank/accounts.

107
00:07:48,000 --> 00:07:53,000
I want it to be authenticated. So that only authenticated users can access.

108
00:07:53,000 --> 00:08:01,000
And very similarly, I'm going to invoke pathMatches() multiple times and instead of accounts I'm going

109
00:08:01,000 --> 00:08:05,000
to mention as cards and postcards, I'm going to mention loans.

110
00:08:05,000 --> 00:08:12,000
With this, I have secured all my accounts, cards and loans related REST APIs inside my gateway server.

111
00:08:12,000 --> 00:08:18,000
But since we have mentioned these configuration, this first configuration will have the first priority.

112
00:08:18,000 --> 00:08:24,000
That means if someone is trying to invoke the get APIs inside these three patterns, it is going to

113
00:08:24,000 --> 00:08:30,000
permit all, even though I have mentioned authenticated, but I'm trying to give some first preference

114
00:08:30,000 --> 00:08:31,000
configurations in the top.

115
00:08:31,000 --> 00:08:37,000
That's why all the get  REST APIs in all these three microservices are going to be permit all.

116
00:08:37,000 --> 00:08:40,000
But apart from that, get APIs remaining

117
00:08:40,000 --> 00:08:44,000
all APIs are going to be authenticated due to these configurations.

118
00:08:44,000 --> 00:08:45,000
And here you may have a question,

119
00:08:45,000 --> 00:08:50,000
can't we mention these patterns with the help of comma separated values?

120
00:08:50,000 --> 00:08:55,000
Off course you can mention all of them using comma separated. But there is a reason on why I'm trying

121
00:08:55,000 --> 00:08:59,000
to mention in separate path matches you will get to know in the coming lectures.

122
00:08:59,000 --> 00:09:06,000
After we have defined these details, we need to invoke a method which is oauth2ResourceServer().

123
00:09:06,000 --> 00:09:12,000
So with this we are trying to convert our gateway server as an Oauth2 resource server. To this resource

124
00:09:12,000 --> 00:09:12,000
server

125
00:09:12,000 --> 00:09:16,000
also, we need to pass the configurations in a lambda style.

126
00:09:16,000 --> 00:09:22,000
So let me try to create a lambda expression variable and post that I'm going to mention what is a lambda

127
00:09:22,000 --> 00:09:26,000
symbol followed by the same lambda expression variable.

128
00:09:26,000 --> 00:09:33,000
And using this lambda expression variable, I'm going to invoke a method JWT. Because we are trying to

129
00:09:33,000 --> 00:09:35,000
use that JWT tokens.

130
00:09:35,000 --> 00:09:38,000
So that's why I need to use the same. To this JWT method

131
00:09:38,000 --> 00:09:41,000
we need to pass Customizer.withDefaults().

132
00:09:41,000 --> 00:09:45,000
With this I'm trying to tell to the spring security framework,

133
00:09:45,000 --> 00:09:51,000
please use the default configurations related to the JWT tokens.

134
00:09:51,000 --> 00:09:56,000
Once we have defined all those details, we can try to mention a colon here with with this, we have

135
00:09:56,000 --> 00:09:59,000
mentioned all the required custom configurations with the help of 

136
00:09:59,000 --> 00:10:02,000
this serverHttpSecurity.

137
00:10:02,000 --> 00:10:09,000
Now using the same serverHttpSecurity, I need to invoke the csrf() method.

138
00:10:09,000 --> 00:10:16,000
Using the csrf method, I need to disable the csrf protection provided by the spring security framework

139
00:10:16,000 --> 00:10:22,000
because csrf protection is only needed when browsers are involved.

140
00:10:22,000 --> 00:10:26,000
Since in our scenario there are no browsers involved, we can disable this protection.

141
00:10:26,000 --> 00:10:30,000
Otherwise all your post(), put(), delete().

142
00:10:30,000 --> 00:10:34,000
They are going to fail because you have not handled the csrf attack.

143
00:10:34,000 --> 00:10:39,000
I talked about the csrf in detail inside my spring security course.

144
00:10:39,000 --> 00:10:41,000
If you are interested please enroll into the same.

145
00:10:41,000 --> 00:10:48,000
So now, like I said to the csrf method, I'm going to pass a lambda expression with the lambda variable

146
00:10:48,000 --> 00:10:50,000
saying that csrf specification.

147
00:10:50,000 --> 00:10:55,000
Now using the same lambda variable, I'm going to invoke the method disable(). With this,

148
00:10:55,000 --> 00:11:02,000
I'm trying to disable the csrf protection and at last we need to build a return statement and using

149
00:11:02,000 --> 00:11:10,000
the same variable which is serverHttpSecurity, I need to invoke the build() method and this build method

150
00:11:10,000 --> 00:11:16,000
is going to return the object of SecurityWebFilterChain which will be converted as a bean with the

151
00:11:16,000 --> 00:11:19,000
help of this bean annotation. As a next step,

152
00:11:19,000 --> 00:11:25,000
we should also tell to the resource server on how to validate the access token that it is going to receive

153
00:11:25,000 --> 00:11:26,000
from the client application.

154
00:11:26,000 --> 00:11:32,000
As of now, my resource server does not have any clue about what is the auth server, what is the endpoint

155
00:11:32,000 --> 00:11:37,000
URL of the auth server, what is the process that it needs to follow to validate the access token.

156
00:11:37,000 --> 00:11:43,000
So to provide all these details to the resource server, we need to make an configuration inside the

157
00:11:43,000 --> 00:11:46,000
application.yaml file.

158
00:11:46,000 --> 00:11:50,000
Here under the spring elements, we are going to create a new property.

159
00:11:50,000 --> 00:12:00,000
This property is spring.security.oauth2.resourceserver.jwt.jwk.- set - url and

160
00:12:00,000 --> 00:12:08,000
what is the auth server url using which my resource server can download the certificates during the startup

161
00:12:08,000 --> 00:12:10,000
of this resource server application.

162
00:12:10,000 --> 00:12:12,000
So from where did I get this URL?

163
00:12:12,000 --> 00:12:18,000
Like I said before, inside this list of configurations, if you can search for a path that ends with

164
00:12:18,000 --> 00:12:20,000
certs, you will be able to see a path.

165
00:12:20,000 --> 00:12:25,000
And the same path I'm trying to mention inside the application.yml.

166
00:12:25,000 --> 00:12:27,000
So what is the purpose of this path?

167
00:12:27,000 --> 00:12:29,000
During the startup of the resource server,

168
00:12:29,000 --> 00:12:35,000
it is going to connect with the resource server and it is going to download a public certificate from

169
00:12:35,000 --> 00:12:36,000
the Keycloak server.

170
00:12:36,000 --> 00:12:38,000
So what is the purpose of this public certificate?

171
00:12:38,000 --> 00:12:45,000
Using this public certificate, my resource server can validate if a given access token is really issued

172
00:12:45,000 --> 00:12:46,000
by the Keycloak server.

173
00:12:46,000 --> 00:12:50,000
If yes, is it a valid access token or an invalid access token?

174
00:12:50,000 --> 00:12:56,000
So all those checks on the access token, it can perform with the help of this public certificate.

175
00:12:56,000 --> 00:13:00,000
The keycloak is going to have private certificates. Using the private certificates,

176
00:13:00,000 --> 00:13:06,000
the keycloak can only issue the new tokens, whereas with the help of this public certificate, any

177
00:13:06,000 --> 00:13:11,000
server like resource server can validate if a given access token is valid or not.

178
00:13:11,000 --> 00:13:17,000
They cannot really produce new tokens, but they should be able to validate if the given access token

179
00:13:17,000 --> 00:13:18,000
is valid or not.

180
00:13:18,000 --> 00:13:20,000
In total, we have made three changes.

181
00:13:20,000 --> 00:13:26,000
First, we have added the dependency inside the pom.xml post that we have created this class and after

182
00:13:26,000 --> 00:13:32,000
that we have mentioned these property inside the application.yml. With this now our gateway server

183
00:13:32,000 --> 00:13:38,000
should be protected and will act as a resource server inside the client credentials grant flow.

184
00:13:38,000 --> 00:13:40,000
So let me save these changes.

185
00:13:40,000 --> 00:13:42,000
Do a build. In the next lecture,

186
00:13:42,000 --> 00:13:44,000
we can try to test these changes.

187
00:13:44,000 --> 00:13:46,000
Thank you and I'll catch you in the next lecture bye.

