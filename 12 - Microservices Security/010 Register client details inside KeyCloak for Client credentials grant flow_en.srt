1
00:00:00,000 --> 00:00:06,000
As of now, we have the auth server set up inside our Easy Bank microservices network.

2
00:00:06,000 --> 00:00:12,000
As a next step, we need to register a external client application with this auth server.

3
00:00:12,000 --> 00:00:18,000
Let's assume we are the external client applications who are trying to communicate with the auth server

4
00:00:18,000 --> 00:00:24,000
to get an access token. So that using the same access token, I can try to invoke the gateway server,

5
00:00:24,000 --> 00:00:25,000
which is the resource server.

6
00:00:25,000 --> 00:00:32,000
So as the developer or as the lead of these external client application, who is trying to communicate

7
00:00:32,000 --> 00:00:35,000
with the auth server using backend APIs.

8
00:00:35,000 --> 00:00:40,000
First, I need to approach to the admin of the keycloak and make sure I'm registering myself and I'm

9
00:00:40,000 --> 00:00:46,000
getting enough approval from the keycloak admin and from the leaders of the Easy Bank microservices

10
00:00:46,000 --> 00:00:47,000
network.

11
00:00:47,000 --> 00:00:53,000
Let's assume the keycloak admin received all approvals required to register the client details of this

12
00:00:53,000 --> 00:00:55,000
external application.

13
00:00:55,000 --> 00:01:00,000
So what keycloak admin will do now is going to register a client with the auth server by coming to this

14
00:01:00,000 --> 00:01:01,000
admin console.

15
00:01:01,000 --> 00:01:04,000
So first we need to make sure he is under the right realm.

16
00:01:04,000 --> 00:01:08,000
As of now we have only one realm, so we should be good with this default realm.

17
00:01:08,000 --> 00:01:11,000
So now if you see here there is a client's option.

18
00:01:11,000 --> 00:01:12,000
So let me click on this.

19
00:01:12,000 --> 00:01:18,000
And here there are certain default clients which are created by keycloak internally. As a next step

20
00:01:19,000 --> 00:01:24,000
inside this page, I have import client option or I can also create the client by using this button.

21
00:01:24,000 --> 00:01:26,000
So let me click on the same.

22
00:01:26,000 --> 00:01:31,000
So here under the client type, we need to make sure we are selecting the OpenID Connect because we

23
00:01:31,000 --> 00:01:34,000
are planning to use the Oauth2 framework.

24
00:01:34,000 --> 00:01:40,000
Like you can see, there is no separate option for OAuth2 and OpenID. Because when we select OpenID Connect

25
00:01:40,000 --> 00:01:44,000
internally, we are also going to use OAuth2 framework as well.

26
00:01:44,000 --> 00:01:49,000
The reason is OpenID Connect is a wrapper that is built on top of OAuth2 framework.

27
00:01:49,000 --> 00:01:52,000
So first we need to give what is a client ID?

28
00:01:52,000 --> 00:01:56,000
So this is like username of my client application.

29
00:01:56,000 --> 00:02:00,000
Think like there is an call center application inside the easy bank.

30
00:02:00,000 --> 00:02:07,000
So this EasyBankCallCenterApplication, they want to interact with the microservices network that

31
00:02:07,000 --> 00:02:10,000
we have built using backend APIs.

32
00:02:10,000 --> 00:02:16,000
So that's why I want to give the client ID name as easybank-callcenter-CC.

33
00:02:16,000 --> 00:02:22,000
The CC indicates this is the client ID that I have created for client credentials grant type flow.

34
00:02:22,000 --> 00:02:25,000
So the CC indicates client credentials.

35
00:02:25,000 --> 00:02:27,000
After that we can try to give some name.

36
00:02:27,000 --> 00:02:33,000
I'll try to give something like EasyBank Call Center App. The same

37
00:02:33,000 --> 00:02:35,000
I will try to mention inside the description as well.

38
00:02:35,000 --> 00:02:40,000
Once we have given these details, we can click on this next button under this client authentication

39
00:02:40,000 --> 00:02:47,000
we need to make sure we are enabling this because we want our client to be authenticated itself with

40
00:02:47,000 --> 00:02:50,000
the auth server by providing its own credentials.

41
00:02:50,000 --> 00:02:54,000
Then only my auth server has to issue the access token.

42
00:02:54,000 --> 00:02:59,000
If we disable this, then any client can come and they can try to invoke our auth server.

43
00:02:59,000 --> 00:03:01,000
That's why I'm trying to enable this client authentication.

44
00:03:01,000 --> 00:03:08,000
Now under this authentication flow, please disable the standard flow and direct access grants because

45
00:03:08,000 --> 00:03:14,000
as of now we are trying to leverage client credentials, grant type flow where two different applications

46
00:03:14,000 --> 00:03:19,000
that are trying to communicate with each other through REST APIs or through backend logic.

47
00:03:19,000 --> 00:03:23,000
So for the same, we need to make sure we are selecting these service account roles.

48
00:03:23,000 --> 00:03:28,000
If you can click on this help button, you will be able to see that this supports client credentials,

49
00:03:28,000 --> 00:03:29,000
grant type flow.

50
00:03:29,000 --> 00:03:36,000
So please make sure service account roles is selected and all other flows are disabled or unselected.

51
00:03:36,000 --> 00:03:41,000
Like I said before, we have various flows inside the OAuth2 framework which we need to use based upon the

52
00:03:41,000 --> 00:03:43,000
scenario we are into.

53
00:03:43,000 --> 00:03:47,000
So based upon the current scenario, we should select service account roles.

54
00:03:47,000 --> 00:03:49,000
Now I'm clicking on this next button.

55
00:03:49,000 --> 00:03:52,000
Please leave the route URL and home URL empty.

56
00:03:52,000 --> 00:03:58,000
Now you can click on the save button. As soon as you click on the save button, you can see a new client

57
00:03:58,000 --> 00:04:04,000
is created based upon the client ID that we have created and this client is going to support OpenID

58
00:04:04,000 --> 00:04:05,000
connect.

59
00:04:05,000 --> 00:04:10,000
Now, coming to the credentials of this client, we have not given any credentials.

60
00:04:10,000 --> 00:04:15,000
The credentials are going to be auto generated by the keycloak to understand what are these credentials.

61
00:04:15,000 --> 00:04:22,000
My keycloak admin can click on these credentials and here you can see there is a client secret.

62
00:04:22,000 --> 00:04:27,000
If you can press on these eye symbol, you should be able to see what is the client secret.

63
00:04:27,000 --> 00:04:33,000
So this is the client ID, which is easy bank call center hyphen CC And this is the client secret.

64
00:04:33,000 --> 00:04:39,000
So every time my client application wants to get an access token from the keycloak, which is an auth

65
00:04:39,000 --> 00:04:45,000
server, it needs to make sure it is providing this client ID and client secret because you can see

66
00:04:45,000 --> 00:04:46,000
the client authenticator

67
00:04:46,000 --> 00:04:50,000
as of now, the keycloak admin selected as client ID and secret.

68
00:04:50,000 --> 00:04:56,000
There are other options also like Signed Jwt or using certificate, so there are many other options.

69
00:04:56,000 --> 00:04:59,000
But we'll go with the default option, which is Client Id and Secret .

70
00:05:00,000 --> 00:05:06,000
So with this we have successfully resisted and client application with the auth server.

71
00:05:06,000 --> 00:05:12,000
Inside the next lecture, I'm going to show you a demo of how to get an access token from the auth server

72
00:05:12,000 --> 00:05:14,000
by using these client details.

73
00:05:14,000 --> 00:05:17,000
Thank you and I'll catch you in the next lecture bye.

