1
00:00:00,000 --> 00:00:06,000
Now, inside this lecture, let me show you how a client application can connect with the auth server

2
00:00:06,000 --> 00:00:09,000
to get an access token. For the same,

3
00:00:09,000 --> 00:00:15,000
first, my client application should know what is the endpoint URL that it has to invoke to get an access

4
00:00:15,000 --> 00:00:16,000
token.

5
00:00:16,000 --> 00:00:19,000
So to understand the same, we can click on this realm settings.

6
00:00:19,000 --> 00:00:21,000
So let me click on the same.

7
00:00:21,000 --> 00:00:25,000
Since my session is expired, let me try to enter the credentials one more time.

8
00:00:25,000 --> 00:00:27,000
Like admin, admin.

9
00:00:27,000 --> 00:00:29,000
I'm trying to click on the sign in button.

10
00:00:29,000 --> 00:00:33,000
Now you can see I'm on to the Realm Settings page. Inside this page,

11
00:00:33,000 --> 00:00:40,000
if you can scroll down at the end, you will have an endpoint section and here you can click on this

12
00:00:40,000 --> 00:00:48,000
OpenID endpoint configuration and this will give you the list of endpoint URL supported by your auth

13
00:00:48,000 --> 00:00:48,000
server.

14
00:00:48,000 --> 00:00:55,000
Now since we are trying to get an access token, we need to look for an endpoint with the name token

15
00:00:55,000 --> 00:00:56,000
endpoint.

16
00:00:56,000 --> 00:01:03,000
So this is the endpoint URL that my client application has to invoke to get an access token.

17
00:01:03,000 --> 00:01:04,000
So let me take the same.

18
00:01:04,000 --> 00:01:10,000
I'll go to the postman. Inside the Postman Under the Microservices collection, I have created a folder

19
00:01:10,000 --> 00:01:11,000
with the name Keycloak.

20
00:01:11,000 --> 00:01:18,000
And inside this folder there is an request with the name Client Credentials Access Token.

21
00:01:18,000 --> 00:01:23,000
If you have imported the collection that I have provided inside the GitHub repo, you will be able to

22
00:01:23,000 --> 00:01:27,000
see the same folder and the request inside your postman as well.

23
00:01:27,000 --> 00:01:29,000
So let me click on the same.

24
00:01:29,000 --> 00:01:37,000
So here you can see I'm trying to mention the same URL, which is localhost:7080/realms/master/protocol/openid-connect/token.

25
00:01:37,000 --> 00:01:41,000
To this endpoint,

26
00:01:41,000 --> 00:01:44,000
my client application who ever is trying to get an access token

27
00:01:44,000 --> 00:01:46,000
they need to make a post request.

28
00:01:46,000 --> 00:01:53,000
That's why I have selected the post request and at the body we need to select these form URL encoded

29
00:01:53,000 --> 00:01:54,000
option.

30
00:01:54,000 --> 00:01:57,000
After that, we need to send certain details.

31
00:01:57,000 --> 00:02:03,000
The very first information is what is the grant type that right now my client application is trying

32
00:02:03,000 --> 00:02:04,000
to follow.

33
00:02:04,000 --> 00:02:08,000
So the grant type that we are right now focusing is client credentials grant type flow.

34
00:02:08,000 --> 00:02:14,000
That's why we need to make sure we are mentioning the exact value client and our credentials.

35
00:02:14,000 --> 00:02:15,000
Inside this web page

36
00:02:15,000 --> 00:02:20,000
also, you should be able to see the value like these are all the grant type supported by the auth server.

37
00:02:20,000 --> 00:02:23,000
And right now we are trying to follow the client credentials.

38
00:02:23,000 --> 00:02:27,000
You can copy the same value and try to mention the same here.

39
00:02:27,000 --> 00:02:30,000
After that, we need to mention what is the client Id.

40
00:02:30,000 --> 00:02:35,000
So this is the same username that we have created in the previous lecture and after the client_id we

41
00:02:35,000 --> 00:02:39,000
need to mention what is the client_secret and this is the client secret.

42
00:02:39,000 --> 00:02:45,000
Now coming to the scope, we need to mention openid space email space profile.

43
00:02:45,000 --> 00:02:51,000
So these are the three scopes that my client application want the auth server to consider while issuing

44
00:02:51,000 --> 00:02:52,000
an access token.

45
00:02:52,000 --> 00:02:58,000
So here you may have a question like we didn't assign any scopes to the client that we have created.

46
00:02:58,000 --> 00:02:59,000
So that's a great question.

47
00:02:59,000 --> 00:03:03,000
So let me try to explain the same. Inside the Keycloak admin

48
00:03:03,000 --> 00:03:08,000
you can try to open the client that we have created and you will be able to see a tab with the name

49
00:03:08,000 --> 00:03:09,000
client scopes.

50
00:03:09,000 --> 00:03:17,000
So you can see there are some default scopes that are assigned to your client, like address, email,

51
00:03:17,000 --> 00:03:18,000
phone, profile, roles.

52
00:03:18,000 --> 00:03:23,000
So these are all the default roles provided by the Keycloak server.

53
00:03:23,000 --> 00:03:25,000
We don't need to create them.

54
00:03:25,000 --> 00:03:26,000
We don't need to assign them.

55
00:03:26,000 --> 00:03:32,000
If we need something specific to your client, then we need to create a client scope here with the help

56
00:03:32,000 --> 00:03:35,000
of this client scope and assign the same to your clients.

57
00:03:35,000 --> 00:03:41,000
We are going to explore these in the coming lectures, but here you may not see a OpenID scope.

58
00:03:41,000 --> 00:03:42,000
The reason is by default

59
00:03:42,000 --> 00:03:48,000
since we are following the OpenID Connect, you can see here the OpenID Connect is mentioned, which

60
00:03:48,000 --> 00:03:53,000
means by default, the OpenID scope will be provided for all the clients.

61
00:03:53,000 --> 00:03:58,000
That's why here I have mentioned the same OpenID and post that email and profile.

62
00:03:58,000 --> 00:04:01,000
So once we have given the scope details, we should be good.

63
00:04:01,000 --> 00:04:08,000
Let me try to click on the send button and in the response you are going to receive access token and

64
00:04:08,000 --> 00:04:12,000
it is going to expire in 60s and the token type is Bearer.

65
00:04:12,000 --> 00:04:16,000
And you can also see there is an ID token issued along with the access token.

66
00:04:16,000 --> 00:04:21,000
So by default your access token is going to expire in 60s. If needed

67
00:04:21,000 --> 00:04:25,000
you can try to change that inside your admin console of the keycloak.

68
00:04:25,000 --> 00:04:26,000
So here there is a wrap option also here,

69
00:04:26,000 --> 00:04:32,000
if you can click on this wrap option, your access token, you should be able to see completely

70
00:04:32,000 --> 00:04:35,000
and similarly, this is the complete ID token.

71
00:04:35,000 --> 00:04:39,000
I can also show you what happens if we don't mention these open ID scope.

72
00:04:39,000 --> 00:04:41,000
So let me try to remove this.

73
00:04:41,000 --> 00:04:46,000
Now I'm trying to send the request again, so this time I'll get a new access token.

74
00:04:46,000 --> 00:04:52,000
But this time you can see I got only access token and there is no ID token.

75
00:04:52,000 --> 00:04:58,000
So some clients, if they don't want the ID token, then they can simply invoke only email and profile.

76
00:04:58,000 --> 00:05:00,000
But it's always

77
00:05:00,000 --> 00:05:06,000
recommended to use the scope which is open ID, you will get to know more details about your client

78
00:05:06,000 --> 00:05:08,000
or your end user.

79
00:05:08,000 --> 00:05:10,000
So let me try to click on this send button.

80
00:05:10,000 --> 00:05:14,000
So now we have again a new access token and ID token.

81
00:05:14,000 --> 00:05:16,000
So this is a JWT token.

82
00:05:16,000 --> 00:05:21,000
So there is lot of history about JWT tokens if you are not aware about them.

83
00:05:21,000 --> 00:05:26,000
Like I said, please enroll into my spring security course and with that you should be able to learn

84
00:05:26,000 --> 00:05:28,000
everything about JWT tokens.

85
00:05:28,000 --> 00:05:33,000
So for now, I'm going to select this JWT token and I'm going to show you what is present inside this

86
00:05:33,000 --> 00:05:35,000
JWT token.

87
00:05:35,000 --> 00:05:40,000
Because as a humans, we cannot really understand what is this because this is all base64 encoded.

88
00:05:40,000 --> 00:05:49,000
So to understand more details about my JWT token, I can go to a website with the name jwt.io.

89
00:05:49,000 --> 00:05:50,000
Inside this Google result,

90
00:05:50,000 --> 00:05:54,000
I'm going to open the very first one which is jwt.io.

91
00:05:54,000 --> 00:06:01,000
And inside this web page I'm going to paste my encoded JWT token that I have received from the Access

92
00:06:01,000 --> 00:06:01,000
Token.

93
00:06:01,000 --> 00:06:06,000
With that, you will be able to see the decoded details of your access token.

94
00:06:06,000 --> 00:06:11,000
Like what is the algorithm used by your auth server to generate this token,

95
00:06:11,000 --> 00:06:13,000
what is the type of token

96
00:06:13,000 --> 00:06:18,000
like I said, auth server is going to follow the JWT token format after the type we have

97
00:06:18,000 --> 00:06:24,000
kid, kid means key ID this we have under the header of the token and now coming to the payload of the

98
00:06:24,000 --> 00:06:27,000
token you will be able to see when the token is going to expired.

99
00:06:27,000 --> 00:06:32,000
When the token is issued, who is the issuer and what is the client ID like

100
00:06:32,000 --> 00:06:33,000
you can see these are the client ID.

101
00:06:34,000 --> 00:06:38,000
After the client ID, you should be able to see what are the roles that these client application has

102
00:06:38,000 --> 00:06:39,000
inside.

103
00:06:39,000 --> 00:06:41,000
So these are all the roles.

104
00:06:41,000 --> 00:06:42,000
What is a scope,

105
00:06:42,000 --> 00:06:43,000
what is a client host,

106
00:06:43,000 --> 00:06:44,000
is the email verified,

107
00:06:44,000 --> 00:06:46,000
what is the preferred username,

108
00:06:46,000 --> 00:06:47,000
what is the client ID.

109
00:06:48,000 --> 00:06:52,000
So we will be having basic details about your client application.

110
00:06:52,000 --> 00:06:55,000
Now let me try to analyze what is there inside the ID token.

111
00:06:55,000 --> 00:07:02,000
So I'm trying to copy these ID token value and the same I'm going to paste it here and here you will

112
00:07:02,000 --> 00:07:07,000
be able to see under the payload we have some details like what is the client ID, what is the client

113
00:07:08,000 --> 00:07:09,000
host, what is the preferred username.

114
00:07:09,000 --> 00:07:16,000
So most of these details are also present inside the access token, but if needed, you can try to enhance

115
00:07:16,000 --> 00:07:23,000
this ID token by trying to send more details about your client application inside the ID token.

116
00:07:23,000 --> 00:07:29,000
With this, I'm assuming you are super clear about how to get an access token by connecting to the Keycloak

117
00:07:29,000 --> 00:07:30,000
server.

118
00:07:30,000 --> 00:07:34,000
Whenever we are trying to follow the client credentials grant type flow.

119
00:07:34,000 --> 00:07:39,000
Here I tried to mimic the scenario like client application is trying to invoke the auth server with the help

120
00:07:39,000 --> 00:07:40,000
of Postman.

121
00:07:40,000 --> 00:07:48,000
But in real projects the client application will try to invoke this API with this body from their Java

122
00:07:48,000 --> 00:07:50,000
code or from their backend code.

123
00:07:50,000 --> 00:07:55,000
And with that they will be able to successfully get an access token and using the same access token

124
00:07:55,000 --> 00:07:57,000
they are going to invoke the resource server.

125
00:07:57,000 --> 00:07:59,000
I hope this is clear.

126
00:07:59,000 --> 00:08:02,000
Thank you and I'll catch you in the next lecture bye.

