1
00:00:01,000 --> 00:00:04,000
I waited for ten minutes behind the scenes post ten minutes only,

2
00:00:04,000 --> 00:00:10,000
I came to my Kubernetes cluster to validate if all the installations are successful or not.

3
00:00:10,000 --> 00:00:14,000
I would also recommend you to wait for at least ten minutes.

4
00:00:14,000 --> 00:00:19,000
Sometimes it may complete even within five minutes also, but at least make sure you are waiting ten

5
00:00:19,000 --> 00:00:22,000
minutes before you try to assume that something is not working.

6
00:00:22,000 --> 00:00:29,000
So to understand if the installation of our helm charts and our applications is completed or not, you

7
00:00:29,000 --> 00:00:35,000
can click on your cluster inside this page, you can go to the nodes and here you will be able to see

8
00:00:35,000 --> 00:00:37,000
all the list of nodes like one, two, three.

9
00:00:37,000 --> 00:00:39,000
Let me click on any of the node.

10
00:00:39,000 --> 00:00:44,000
If I go to into a particular node, you will be able to see all the running pods inside that node.

11
00:00:44,000 --> 00:00:51,000
So if I try to change these rows per page to 30, I will be able to see all the pods running inside

12
00:00:51,000 --> 00:00:52,000
a particular node.

13
00:00:52,000 --> 00:00:54,000
So there are Prometheus related pods

14
00:00:54,000 --> 00:00:58,000
inside this node, there are Loki related pods, there is Kafka related pod.

15
00:00:58,000 --> 00:01:04,000
So this way we can understand under which node a particular pod is running.

16
00:01:04,000 --> 00:01:09,000
If you are able to see this green tick marks for all your pods, that means all your containers are

17
00:01:09,000 --> 00:01:13,000
deployed into the pods successfully without any issues.

18
00:01:13,000 --> 00:01:19,000
But to make sure everything is going to work like we expected, we should make sure Gateway server container

19
00:01:19,000 --> 00:01:21,000
is deployed successfully or not.

20
00:01:21,000 --> 00:01:25,000
Because without Gateway server we cannot test any of the microservices.

21
00:01:25,000 --> 00:01:33,000
So to understand under which node my gateway server pod is installed, I can manually go into the all

22
00:01:33,000 --> 00:01:36,000
the nodes and look for the gateway server pod.

23
00:01:36,000 --> 00:01:40,000
Or I can also try to run few commands inside my terminal.

24
00:01:40,000 --> 00:01:47,000
So inside my terminal I'm going to run a command which is kubectl get pods and this will give me list

25
00:01:47,000 --> 00:01:51,000
of all pods that got created inside my Kubernetes cluster.

26
00:01:51,000 --> 00:01:54,000
So you need to look for the pod with the name Gateway Server.

27
00:01:54,000 --> 00:01:56,000
So this is the gateway server related pod.

28
00:01:56,000 --> 00:02:03,000
So let me copy this entire pod name post that you need to run the command, which is kubectl

29
00:02:03,000 --> 00:02:06,000
describe pod and what is the pod name.

30
00:02:06,000 --> 00:02:09,000
And this will give you more details about your pod.

31
00:02:09,000 --> 00:02:14,000
Inside this output, you should be able to see information about the node where it has installed.

32
00:02:14,000 --> 00:02:19,000
So here you can see this is the node where my gateway server pod is installed.

33
00:02:19,000 --> 00:02:22,000
The node ID is ending with w6cb.

34
00:02:22,000 --> 00:02:25,000
So let's remember that and go back to the Kubernetes cluster.

35
00:02:25,000 --> 00:02:29,000
So here I'll go back to the page where I can see all the nodes.

36
00:02:29,000 --> 00:02:34,000
Inside these three nodes I will look for the node which is ending with the values w6b.

37
00:02:34,000 --> 00:02:38,000
So the last node is the node where our gateway server is installed.

38
00:02:38,000 --> 00:02:42,000
So here I can look for the pod with the name Gateway Server.

39
00:02:42,000 --> 00:02:49,000
So let me select the 50 option in this rows per page post that I should be able to search for gateway.

40
00:02:49,000 --> 00:02:51,000
And you can see here I have a gateway server pod.

41
00:02:51,000 --> 00:02:56,000
I can click on this and this will show me the status of my gateway server pod.

42
00:02:56,000 --> 00:03:00,000
And inside this only the gateway server related container deployed.

43
00:03:00,000 --> 00:03:04,000
We can click on these events to understand the list of events happen.

44
00:03:04,000 --> 00:03:10,000
So here it is clearly highlighted that it use so-and-so image to set up a container.

45
00:03:10,000 --> 00:03:16,000
Inside this pod, we can go to the logs here, we can see all the logs related to the gateway server

46
00:03:16,000 --> 00:03:16,000
container.

47
00:03:16,000 --> 00:03:22,000
So with this I got a confidence that my gateway server is successfully installed. As a next step,

48
00:03:22,000 --> 00:03:25,000
we can also click on this workloads.

49
00:03:25,000 --> 00:03:27,000
Workloads means your deployments and this page,

50
00:03:27,000 --> 00:03:32,000
you can see all the deployments happens based upon your instructions.

51
00:03:32,000 --> 00:03:35,000
So these are all the deployments using these deployments

52
00:03:35,000 --> 00:03:41,000
only the replicas and the pods and the containers will be deployed into the Kubernetes cluster.

53
00:03:41,000 --> 00:03:47,000
Once we confirm that most of the deployments are successful, we can go to the service and ingress.

54
00:03:47,000 --> 00:03:54,000
And at these services we can see all the services that are created based upon our deployment instructions.

55
00:03:54,000 --> 00:04:01,000
So most of the services, we expose them as a cluster IP except a keycloak and a gateway server.

56
00:04:01,000 --> 00:04:06,000
Beacause we want to create some credentials with the help of keycloak admin server and post that

57
00:04:06,000 --> 00:04:09,000
we also want to send all the traffic to the gateway server.

58
00:04:09,000 --> 00:04:13,000
That's why we need to expose the gateway server to the outside of the Kubernetes cluster.

59
00:04:13,000 --> 00:04:19,000
So whenever we use a service type as LoadBalancer in the cloud environment, it is going to create

60
00:04:19,000 --> 00:04:25,000
a public IP using which you can access your microservice. If needed,

61
00:04:25,000 --> 00:04:31,000
your Kubernetes admins, they can map these public IP to a domain name or to a DNS name.

62
00:04:31,000 --> 00:04:34,000
So all my services are also deployed successfully.

63
00:04:34,000 --> 00:04:38,000
I'm able to see the green status here with the symbol.

64
00:04:38,000 --> 00:04:42,000
We can also check if all the secrets and config maps are created.

65
00:04:42,000 --> 00:04:45,000
So these are all the secrets and config maps created.

66
00:04:45,000 --> 00:04:51,000
So as a next step we can go to the services and here first I will try to access the keycloak server.

67
00:04:51,000 --> 00:04:53,000
To access the keycloak

68
00:04:53,000 --> 00:04:56,000
we can copy this URL.

69
00:04:56,000 --> 00:05:00,000
So let me copy this URL, post that inside an 

70
00:05:00,000 --> 00:05:01,000
inognito tab,

71
00:05:01,000 --> 00:05:06,000
I'm going to access the same and that will show me the keycloak administration console.

72
00:05:06,000 --> 00:05:08,000
So let me click on this option.

73
00:05:08,000 --> 00:05:10,000
Here I need to enter my admin credentials.

74
00:05:10,000 --> 00:05:16,000
The admin credentials are user and the password is password itself based upon our settings inside the

75
00:05:16,000 --> 00:05:18,000
helm chart of keycloak.

76
00:05:18,000 --> 00:05:22,000
So as soon as I click sign in I should be able to log in into my administration console.

77
00:05:22,000 --> 00:05:26,000
So here I'm going to click on this clients and post that

78
00:05:26,000 --> 00:05:30,000
I'll try to create a client with the name easybank-callcenter-cc

79
00:05:30,000 --> 00:05:31,000
.

80
00:05:31,000 --> 00:05:37,000
Let me click on this next and post that I will enable the client authentication and disable all these

81
00:05:37,000 --> 00:05:37,000
options.

82
00:05:37,000 --> 00:05:43,000
Once I disable the options, I'm going to enable the service account roles I'm going to click on next,

83
00:05:43,000 --> 00:05:47,000
save post that I'll go to the credentials.

84
00:05:47,000 --> 00:05:53,000
Inside these credentials, I'm going to copy the secret and mention the same inside my postman and here

85
00:05:53,000 --> 00:05:54,000
inside my postman,

86
00:05:54,000 --> 00:05:57,000
I should also update the access token URL.

87
00:05:57,000 --> 00:06:03,000
As of now we have the localhost, but instead of localhost we need to mention the public IP of keycloak.

88
00:06:03,000 --> 00:06:08,000
So the public IP is 34.68.159.112.

89
00:06:08,000 --> 00:06:11,000
So let me try to mention the same here.

90
00:06:11,000 --> 00:06:14,000
After creating a client, we need to create the roles also.

91
00:06:14,000 --> 00:06:19,000
So I'm going to create a new role with the name accounts followed by I'm going to create one more role

92
00:06:19,000 --> 00:06:20,000
with the name cards.

93
00:06:20,000 --> 00:06:26,000
Once the cards is successfully created, I'll create the last role that we need, which is loans.

94
00:06:26,000 --> 00:06:33,000
Once all the roles are created, we can go to the clients and open the easybank-callcenter-cc client

95
00:06:33,000 --> 00:06:35,000
and go to service account roles.

96
00:06:35,000 --> 00:06:39,000
And here we need to assign all the roles like accounts, cards and loans.

97
00:06:39,000 --> 00:06:43,000
And with this, the role mapping is updated. As a next step,

98
00:06:43,000 --> 00:06:45,000
let's go and test the APIs. Inside the Postman,

99
00:06:45,000 --> 00:06:49,000
first, I'll try to invoke some get APIs.

100
00:06:49,000 --> 00:06:55,000
So here I'm trying to invoke the contact-info API inside my accounts microservice, but don't try to

101
00:06:55,000 --> 00:06:57,000
send the request to the localhost.

102
00:06:57,000 --> 00:07:02,000
We should mention the public IP of the gateway server. For the same here

103
00:07:02,000 --> 00:07:04,000
we need to look for the public IP.

104
00:07:04,000 --> 00:07:07,000
So this is the public IP details.

105
00:07:07,000 --> 00:07:12,000
So let me copy this values and mention the same here inside the keycloak.

106
00:07:12,000 --> 00:07:14,000
Post that I'm going to click on the send button.

107
00:07:14,000 --> 00:07:16,000
You can see I'm getting an output.

108
00:07:16,000 --> 00:07:18,000
Let me go and invoke the cards API also.

109
00:07:18,000 --> 00:07:22,000
But before that, let me update the public IP,

110
00:07:22,000 --> 00:07:23,000
here also, I'm getting an output.

111
00:07:23,000 --> 00:07:25,000
Let me invoke the loans API .

112
00:07:25,000 --> 00:07:28,000
Here also, I should get a successful response.

113
00:07:28,000 --> 00:07:33,000
Now as an next step, I'll go to the post request here before I try to create an account.

114
00:07:33,000 --> 00:07:37,000
I need to get an access token. For the same,

115
00:07:37,000 --> 00:07:39,000
let me click on this get new access token.

116
00:07:39,000 --> 00:07:45,000
Once the Access Token is received, I'm going to click on the proceed and use the token.

117
00:07:45,000 --> 00:07:50,000
Once the token is added, I will replace the localhost with the public IP and send the request and I

118
00:07:50,000 --> 00:07:55,000
should get a successful response, which is 201 account created successfully.

119
00:07:55,000 --> 00:07:59,000
As a next step, we can try to create card details as well.

120
00:07:59,000 --> 00:08:04,000
Here first, please make sure you have mentioned the correct client secret and updated the access token url with

121
00:08:04,000 --> 00:08:10,000
the public IP of Keycloak. Post that you can click on this Get new Access token.

122
00:08:10,000 --> 00:08:16,000
Once you receive the access token, you can update the localhost details with the public IP address

123
00:08:16,000 --> 00:08:19,000
of Gateway Server and click on the send button.

124
00:08:19,000 --> 00:08:23,000
With that, you will get a successful response saying that card created successfully.

125
00:08:23,000 --> 00:08:26,000
Now let me do the same for loans microservice.

126
00:08:26,000 --> 00:08:32,000
First, I need to get the access token post that I'll use the access token and update the localhost

127
00:08:32,000 --> 00:08:34,000
with the public IP of Gateway server.

128
00:08:34,000 --> 00:08:39,000
Once the IP details are updated, I'm going to click on the send button and this will give me a response

129
00:08:39,000 --> 00:08:43,000
saying that my loan details are also created successfully.

130
00:08:43,000 --> 00:08:49,000
At last we can go to the get API inside the accounts microservice, which is fetchCustomerDetails.

131
00:08:49,000 --> 00:08:55,000
So here I'm going to click on the send button, but before that we need to make sure we are updating

132
00:08:55,000 --> 00:08:57,000
the localhost with the public IP.

133
00:08:58,000 --> 00:09:00,000
Now we should get a successful response.

134
00:09:00,000 --> 00:09:06,000
So here I'm getting a successful response of my accounts, loans and cards and this confirms all

135
00:09:06,000 --> 00:09:08,000
our setup is working fine.

136
00:09:08,000 --> 00:09:14,000
I hope this is all clear to you and your super happy that all the things are working like we expected

137
00:09:14,000 --> 00:09:15,000
even inside the cloud.

138
00:09:15,000 --> 00:09:20,000
Also in the next lecture, let's try to validate the Grafana components as well.

139
00:09:20,000 --> 00:09:23,000
Thank you and I'll catch you in the next lecture bye.

