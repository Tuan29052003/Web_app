1
00:00:00,000 --> 00:00:05,000
Now is the time to leverage spring cloud stream inside our microservices.

2
00:00:05,000 --> 00:00:12,000
First, I'm going to make few changes inside the message microservice to integrate my functions with

3
00:00:12,000 --> 00:00:14,000
the Rabbitmq. For the same,

4
00:00:14,000 --> 00:00:21,000
first, let me stop my running message microservice post that I will go to my pom.xml and here I'm going

5
00:00:21,000 --> 00:00:27,000
to delete all the dependencies that we have, including spring cloud function context and in the same

6
00:00:27,000 --> 00:00:30,000
place I'm going to add few dependencies.

7
00:00:30,000 --> 00:00:31,000
So let me first delete them.

8
00:00:31,000 --> 00:00:37,000
And now you can see the dependencies are empty and I'm going to paste few dependencies here.

9
00:00:37,000 --> 00:00:42,000
The dependencies that I have added is spring cloud stream and this is the main dependency.

10
00:00:42,000 --> 00:00:47,000
Whenever you want to enable spring cloud stream inside your microservice.

11
00:00:47,000 --> 00:00:51,000
And the next dependency is spring cloud stream binder rabbit.

12
00:00:51,000 --> 00:00:58,000
This I need to add because I want to use Rabbitmq as my event broker or message broker.

13
00:00:58,000 --> 00:01:03,000
And at last these two dependencies are related to spring boot start test and spring cloud stream test

14
00:01:03,000 --> 00:01:04,000
binder.

15
00:01:04,000 --> 00:01:06,000
These are related to unit testing.

16
00:01:06,000 --> 00:01:11,000
If you are going to write some unit testing logic, then these dependencies are going to be helpful

17
00:01:11,000 --> 00:01:11,000
for you.

18
00:01:11,000 --> 00:01:17,000
Now here if you see the main dependencies that we have here is only spring cloud stream and spring cloud

19
00:01:17,000 --> 00:01:23,000
stream binder rabbit. Here you may have a question like why I have removed the spring cloud function

20
00:01:23,000 --> 00:01:24,000
related dependency.

21
00:01:24,000 --> 00:01:31,000
The reason is whenever we add the spring cloud stream dependency inside our project internally, it

22
00:01:31,000 --> 00:01:35,000
is also going to add spring cloud function related dependencies.

23
00:01:35,000 --> 00:01:40,000
So just to avoid that redundancy, I have deleted the dependency of spring cloud function.

24
00:01:40,000 --> 00:01:44,000
So with this we are good from dependencies perspective.

25
00:01:44,000 --> 00:01:48,000
As a next step, I will go to the end of this pom.xml.

26
00:01:48,000 --> 00:01:53,000
As of now you can see we don't have plugin details related to the Google jib. Since in coming lectures

27
00:01:53,000 --> 00:01:57,000
we are going to generate the Docker image for message microservice.

28
00:01:57,000 --> 00:02:01,000
It's better to add the plugin details related to the Google jib.

29
00:02:01,000 --> 00:02:06,000
So let me add this here you can see the image name is going to be eazybytes and the artifact ID, which

30
00:02:06,000 --> 00:02:10,000
is message and the tag name is going to be S13.

31
00:02:10,000 --> 00:02:13,000
With these changes, I should be good from pom.xml perspective.

32
00:02:13,000 --> 00:02:17,000
Let me load the maven changes and close this file. As a next step,

33
00:02:17,000 --> 00:02:23,000
I need to add few properties inside my application.yml, so let me add the same.

34
00:02:23,000 --> 00:02:24,000
To add these properties,

35
00:02:24,000 --> 00:02:28,000
I'm going to put my cursor at the same position where the function is present.

36
00:02:28,000 --> 00:02:34,000
With this, I'm going to define some properties with the parent element as spring.cloud.

37
00:02:34,000 --> 00:02:36,000
So let me add these properties.

38
00:02:36,000 --> 00:02:41,000
You can see the property is going to be spring.cloud.stream.bindings.

39
00:02:41,000 --> 00:02:44,000
And what is the binding name that I want to give?

40
00:02:44,000 --> 00:02:49,000
Like I said before, Spring cloud stream bindings, they are going to establish a integration between

41
00:02:49,000 --> 00:02:52,000
the message broker with your functions.

42
00:02:52,000 --> 00:02:55,000
So this is the binding name that I want to give.

43
00:02:55,000 --> 00:02:58,000
Like based upon my function name, like emailsms.

44
00:02:58,000 --> 00:03:05,000
I have chosen this name and post that in indicates this is going to act as an input binding and followed

45
00:03:05,000 --> 00:03:06,000
by -0.

46
00:03:06,000 --> 00:03:12,000
If you don't define these binding names, this is the default naming convention that your spring cloud

47
00:03:12,000 --> 00:03:19,000
stream is going to follow. Because since you have defined the definition as emailsms by composing them,

48
00:03:19,000 --> 00:03:26,000
it is going to take the name as emailsms since it is going to create the input binding, it is going

49
00:03:26,000 --> 00:03:32,000
to mention the value as in and the next value is zero, which is the starting index value.

50
00:03:32,000 --> 00:03:38,000
So I'm trying to follow the same default naming convention and provide the name here. After the stream

51
00:03:38,000 --> 00:03:41,000
binding name, we need to provide the destination.

52
00:03:41,000 --> 00:03:49,000
So with the binding name, my spring cloud stream is going to have my function details like email and

53
00:03:49,000 --> 00:03:53,000
sms, whereas right now it does not have what is the queue

54
00:03:53,000 --> 00:03:58,000
it has to connect or monitor so that any messages comes to that queue,

55
00:03:58,000 --> 00:04:01,000
It is going to redirect those messages to these functions.

56
00:04:01,000 --> 00:04:07,000
So to provide the same information to the spring cloud stream, we need to mention the destination and

57
00:04:07,000 --> 00:04:13,000
we need to give a random name, which is send a communication. With this inside my rabbitmq there has

58
00:04:13,000 --> 00:04:16,000
to be a queue with the name send communication.

59
00:04:16,000 --> 00:04:22,000
If you try to see the diagram here, whenever we are using input destination binding, your functions

60
00:04:22,000 --> 00:04:25,000
are going to be binded to the queues.

61
00:04:25,000 --> 00:04:31,000
Since here also we are using input binding because we have mentioned -in inside the name this

62
00:04:31,000 --> 00:04:38,000
destination is going to be considered as a queue name by your spring cloud stream. After the destination,

63
00:04:38,000 --> 00:04:44,000
I also mentioned the group property and to this group property we are trying to pass the application

64
00:04:44,000 --> 00:04:45,000
name.

65
00:04:45,000 --> 00:04:51,000
The purpose of this group property is, if I don't mention this group property, then my rabbitmq is going

66
00:04:51,000 --> 00:04:59,000
to append some randomly generated value to my destination names to my channel names and queue names.

67
00:04:59,000 --> 00:05:00,000
So to avoid that

68
00:05:00,000 --> 00:05:02,000
and to have some consistency behavior.

69
00:05:02,000 --> 00:05:04,000
I'm trying to give a group name.

70
00:05:04,000 --> 00:05:09,000
When we try to check our Rabbitmq console, then it is going to make more sense to you.

71
00:05:09,000 --> 00:05:16,000
Once we have defined these stream binding details, we need to define the rabbitmq details.

72
00:05:16,000 --> 00:05:21,000
Since we are trying to use the Rabbitmq message broker, we need to provide the connection details.

73
00:05:21,000 --> 00:05:24,000
For the same just under the spring property,

74
00:05:24,000 --> 00:05:28,000
we need to make sure we are defining the properties with the elements

75
00:05:28,000 --> 00:05:29,000
Rabbitmq.

76
00:05:29,000 --> 00:05:35,000
So please make sure this rabbitmq is just under the spring under this rabbitmq element we need to pass,

77
00:05:35,000 --> 00:05:36,000
what is the host name,

78
00:05:36,000 --> 00:05:37,000
what is the port number,

79
00:05:37,000 --> 00:05:40,000
what is the username, password and connection timeout.

80
00:05:40,000 --> 00:05:46,000
So all these are default values like inside my local system the host is going to be localhost and we

81
00:05:46,000 --> 00:05:48,000
are going to start our rabbitmq at the port

82
00:05:48,000 --> 00:05:53,000
5672 default username is guest and the password is guest.

83
00:05:53,000 --> 00:06:00,000
So with this we have made all the changes to convert our message microservice as an event driven microservice.

84
00:06:00,000 --> 00:06:07,000
Now it is capable of receiving the messages from a queue with the name sent communication available

85
00:06:07,000 --> 00:06:09,000
inside the Rabbitmq.

86
00:06:09,000 --> 00:06:16,000
As a next step, we need to update the accounts microservice to send the messages and push them into

87
00:06:16,000 --> 00:06:18,000
the rabbitmq. For the same,

88
00:06:18,000 --> 00:06:21,000
let me go to the accounts Microservice, inside my accounts

89
00:06:21,000 --> 00:06:28,000
microservice I'll open my pom.xml. Inside the pom.xml I'm going to add dependencies related to spring

90
00:06:28,000 --> 00:06:30,000
cloud stream and Rabbitmq binder.

91
00:06:30,000 --> 00:06:39,000
Let me go to the end of this pom.xml and I'm going to add the dependencies just after these Openapi

92
00:06:39,000 --> 00:06:41,000
specification related dependency.

93
00:06:41,000 --> 00:06:42,000
So let me add the two dependencies.

94
00:06:42,000 --> 00:06:47,000
The two dependencies are spring cloud stream and spring cloud stream binder rabbit.

95
00:06:47,000 --> 00:06:51,000
The same dependencies we have added inside the message microservice as well.

96
00:06:51,000 --> 00:06:57,000
So let me save these changes and I'll also update the tag name from S12 to S13.

97
00:06:57,000 --> 00:06:59,000
Since we are into the new section, let me load

98
00:06:59,000 --> 00:07:07,000
the maven changes. After making these changes inside the pom.xml, I'm going to create a class for the

99
00:07:07,000 --> 00:07:07,000
same.

100
00:07:07,000 --> 00:07:13,000
Let me go to the dto package and here I'm going to create a new record class very similar to what we

101
00:07:13,000 --> 00:07:16,000
have created on the message Microservice.

102
00:07:16,000 --> 00:07:23,000
The record class name is going to be AccountsMessageDto. Inside this record class, we are going to

103
00:07:23,000 --> 00:07:28,000
mention the same fields like we have mentioned inside the message microservice.

104
00:07:28,000 --> 00:07:31,000
So let me try to make those changes here very quickly.

105
00:07:31,000 --> 00:07:36,000
Like you can see here right now, we have four fields supported by this record class, which is account

106
00:07:36,000 --> 00:07:40,000
number, name, email, mobile number. As a next step,

107
00:07:40,000 --> 00:07:46,000
whenever we are trying to create a new account inside accounts microservice, we need to make sure we

108
00:07:46,000 --> 00:07:50,000
are triggering an event into the message broker. For the same,

109
00:07:50,000 --> 00:07:54,000
let's try to add the properties inside the application.yml.

110
00:07:54,000 --> 00:07:59,000
So inside my application.yml of accounts microservice

111
00:07:59,000 --> 00:08:03,000
I'm going to define new properties. For the same,

112
00:08:03,000 --> 00:08:07,000
let me go to the same position where we have spring.cloud

113
00:08:07,000 --> 00:08:08,000
as parent.

114
00:08:08,000 --> 00:08:14,000
I'll move to the same position where we have openfeign because this openfeign present under the 

115
00:08:14,000 --> 00:08:21,000
spring.cloud. Here I'm going to create new properties and with the name spring.cloud.stream.bindings

116
00:08:21,000 --> 00:08:24,000
and what is a binding name that you want to give.

117
00:08:24,000 --> 00:08:31,000
So here we don't have any functions as of now defined inside our accounts microservice. So we can give

118
00:08:31,000 --> 00:08:32,000
any binding name.

119
00:08:32,000 --> 00:08:35,000
So the binding name that I'm trying to give here is sendCommunication.

120
00:08:35,000 --> 00:08:38,000
This is an output binding type.

121
00:08:38,000 --> 00:08:42,000
That's why we need to go -out followed by hyphen and zero.

122
00:08:42,000 --> 00:08:47,000
For these binding, the destination is going to be the send-communication.

123
00:08:47,000 --> 00:08:55,000
So with this destination name my rabbitmq is going to bind my output destination binding to an exchange

124
00:08:55,000 --> 00:08:57,000
available inside the rabbitmq.

125
00:08:57,000 --> 00:08:59,000
And what is the exchange name?

126
00:08:59,000 --> 00:09:02,000
The exchange name is going to be the send- communication.

127
00:09:02,000 --> 00:09:08,000
So whenever we are using output binding, the destination is going to be the exchange.

128
00:09:08,000 --> 00:09:14,000
Whereas whenever we are using input binding like we did inside the accounts microservice, the destination

129
00:09:14,000 --> 00:09:16,000
is going to be the queue name.

130
00:09:16,000 --> 00:09:22,000
So after defining these stream binding related information, we should also define the Rabbitmq connection

131
00:09:22,000 --> 00:09:23,000
details.

132
00:09:23,000 --> 00:09:24,000
For the same,

133
00:09:24,000 --> 00:09:30,000
I'm going to go to the portion where we are going to have an spring as an parent element.

134
00:09:30,000 --> 00:09:32,000
So let me go up, here

135
00:09:32,000 --> 00:09:34,000
you can see the parent is spring.

136
00:09:34,000 --> 00:09:37,000
I can navigate into the same position.

137
00:09:37,000 --> 00:09:41,000
So let me go down, down, down, down, down.

138
00:09:41,000 --> 00:09:45,000
And here I'm going to paste Rabbitmq related properties.

139
00:09:45,000 --> 00:09:52,000
So spring.rabbitmq.host, hostname is localhost port username, password and connection timeout.

140
00:09:52,000 --> 00:09:56,000
So these are very similar to what we have mentioned inside the message microservice.

141
00:09:56,000 --> 00:09:59,000
So now we are done with the properties inside the application.yml.

142
00:10:00,000 --> 00:10:06,000
Now let me go to the ServiceImpl class where we are trying to create the account details.

143
00:10:06,000 --> 00:10:12,000
So inside my account service there is a method with the name create account.

144
00:10:12,000 --> 00:10:19,000
From this method only I need to trigger an event or message whenever I successfully create a new account

145
00:10:19,000 --> 00:10:21,000
before I try to write some logic here.

146
00:10:21,000 --> 00:10:28,000
First, let me try to create a logging variable with the name log because I want to perform some logging.

147
00:10:28,000 --> 00:10:33,000
Post that I'm going to autowire a bean of type stream bridge.

148
00:10:33,000 --> 00:10:37,000
So let me try to mention the variable name, which is Stream Bridge.

149
00:10:37,000 --> 00:10:42,000
Since I have mentioned this as an variable inside this class and I have mentioned the AllArgsConstructor,

150
00:10:42,000 --> 00:10:47,000
the autowiring is going to happen automatically with all these three properties.

151
00:10:47,000 --> 00:10:52,000
That means behind the scenes, my spring cloud stream is going to create a bean of stream bridge and

152
00:10:52,000 --> 00:10:55,000
the same is going to be injected into this class.

153
00:10:55,000 --> 00:10:58,000
Now let me go to the Create account method.

154
00:10:58,000 --> 00:11:01,000
Here first, I'm trying to save the customer details and post that,

155
00:11:01,000 --> 00:11:04,000
I'm also trying to save the account details.

156
00:11:04,000 --> 00:11:10,000
So whatever account details I've saved, I will try to catch them again so that I can try to refer them

157
00:11:10,000 --> 00:11:11,000
in my logic.

158
00:11:11,000 --> 00:11:16,000
So I have created a new variable with the name saved account which we are going to receive as a return

159
00:11:16,000 --> 00:11:18,000
type from this save method.

160
00:11:18,000 --> 00:11:23,000
Now, just after this create account method, I'm going to create a private method with the name

161
00:11:23,000 --> 00:11:25,000
sendCommunication() to save some time.

162
00:11:25,000 --> 00:11:26,000
I pasted this logic.

163
00:11:26,000 --> 00:11:29,000
Don't worry, we are going to discuss each line by line.

164
00:11:29,000 --> 00:11:35,000
You can also get this code from the GitHub repo. The same sendCommunication() method I'm going to invoke

165
00:11:35,000 --> 00:11:39,000
from the create account method to this sendCommunication() method.

166
00:11:39,000 --> 00:11:41,000
I'm going to pass two input parameters.

167
00:11:41,000 --> 00:11:44,000
The very first one is savedAccount() and the other one is 

168
00:11:44,000 --> 00:11:49,000
savedCustomer. So now let's try to see what is there inside the sendCommunication().

169
00:11:49,000 --> 00:11:54,000
So first I'm trying to create an object of AccountsMessageDto record class.

170
00:11:54,000 --> 00:11:59,000
So to create a new object I need to pass all the required fields to the constructor of 

171
00:11:59,000 --> 00:12:05,000
AccountsMessageDto. The fields are first account number, followed by name and email and mobile number.

172
00:12:05,000 --> 00:12:09,000
So these data we want to send to the message microservice.

173
00:12:09,000 --> 00:12:16,000
After that I have some logger statements saying that sending communication request for the details present

174
00:12:16,000 --> 00:12:18,000
inside the object message.

175
00:12:18,000 --> 00:12:24,000
So this is a logger statement we are going to print just before sending the message details.

176
00:12:24,000 --> 00:12:29,000
Now, if you see here, with the help of Stream Bridge being that we have injected into this class,

177
00:12:29,000 --> 00:12:33,000
we are going to invoke the send method. To this send method,

178
00:12:33,000 --> 00:12:39,000
we need to mention what is the output destination binding that we have defined inside the application.yml.

179
00:12:40,000 --> 00:12:47,000
So this is the destination binding that we have created. The same name we need to pass as an first parameter

180
00:12:47,000 --> 00:12:48,000
to the send method.

181
00:12:48,000 --> 00:12:54,000
Since we are invoking the send, it is obvious for the spring cloud stream that this name belongs to

182
00:12:54,000 --> 00:13:00,000
an output binding. And whenever we are using this output binding name it also knows what is the exchange

183
00:13:00,000 --> 00:13:02,000
that it has to forward the message.

184
00:13:02,000 --> 00:13:04,000
So the exchange name is present here.

185
00:13:04,000 --> 00:13:08,000
The exchange name is going to be send communication, which we have mentioned with the help of this

186
00:13:08,000 --> 00:13:09,000
destination.

187
00:13:09,000 --> 00:13:15,000
Now, after this first parameter, we should also mention what is the message that we are trying to

188
00:13:15,000 --> 00:13:15,000
send.

189
00:13:15,000 --> 00:13:20,000
Obviously, we want to send the object of AccountsMessageDto.

190
00:13:20,000 --> 00:13:26,000
With this the message will be received by the exchange that is available inside the Rabbitmq.

191
00:13:26,000 --> 00:13:33,000
I hope you are able to establish the link between accounts microservice, Rabbitmq and message microservice.

192
00:13:33,000 --> 00:13:34,000
.

193
00:13:34,000 --> 00:13:37,000
When we are also going to see the demo, it is going to be super clear for you.

194
00:13:37,000 --> 00:13:44,000
Now, if you go back to the AccountServiceImpl, we are going to return a boolean value, whether the message

195
00:13:44,000 --> 00:13:48,000
is successfully sent to the Rabbitmq or not.

196
00:13:48,000 --> 00:13:54,000
So the same boolean value, I'm trying to print it with this log statement, which is is the communication

197
00:13:54,000 --> 00:13:55,000
request successfully processed.

198
00:13:55,000 --> 00:13:58,000
The result is going to be true or false.

199
00:13:58,000 --> 00:14:04,000
When I say process, the meaning is whether the request to send the communication is triggered or not.

200
00:14:04,000 --> 00:14:08,000
So this is what I'm trying to convey with these log statement.

201
00:14:08,000 --> 00:14:14,000
So now with this, we have made all the changes inside accounts and messages micro service.

202
00:14:14,000 --> 00:14:19,000
We have added all the dependencies related to spring cloud stream and Rabbitmq.

203
00:14:20,000 --> 00:14:26,000
As a next step, we can try to start our microservices along with the Rabbitmq and try to see the demo.

204
00:14:26,000 --> 00:14:29,000
Thank you and I'll catch you in the next lecture bye.

