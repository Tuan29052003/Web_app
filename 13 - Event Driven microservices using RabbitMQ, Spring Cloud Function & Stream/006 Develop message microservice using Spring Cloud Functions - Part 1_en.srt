1
00:00:00,000 --> 00:00:07,000
Inside this lecture, let's try to generate a base skeleton project for our message microservice by

2
00:00:07,000 --> 00:00:11,000
adding dependencies related to the spring cloud functions.

3
00:00:11,000 --> 00:00:16,000
For the same, I came to the website start.spring.io here, please make sure you are selecting project

4
00:00:16,000 --> 00:00:19,000
as Maven language as Java and Spring boot version,

5
00:00:19,000 --> 00:00:21,000
whatever stable default version.

6
00:00:21,000 --> 00:00:28,000
Right now it is 3.1.2 and post that under the project metadata the group is going to be com.easybytes

7
00:00:28,000 --> 00:00:33,000
and the artifact and name is going to be message and description

8
00:00:33,000 --> 00:00:40,000
like you can see Microservice to support messaging in EazyBank and the package name will automatically

9
00:00:40,000 --> 00:00:45,000
populate packaging has to be jar and the Java version is going to be Java 17.

10
00:00:45,000 --> 00:00:50,000
Now under that dependencies, I'm going to search for function.

11
00:00:50,000 --> 00:00:54,000
Here first, let's try to see what is a brief description about this function dependency.

12
00:00:54,000 --> 00:01:02,000
It is going to promote the implementation of business logic via functions and supports a uniform programming

13
00:01:02,000 --> 00:01:09,000
model across serverless providers as well as ability to run standalone, locally or in a pass.

14
00:01:09,000 --> 00:01:12,000
So what is this uniform programming model?

15
00:01:12,000 --> 00:01:17,000
It is the business logic that you are going to write with the help of functions.

16
00:01:17,000 --> 00:01:23,000
So the same business logic you can deploy across various serverless providers or you can also use it

17
00:01:23,000 --> 00:01:25,000
as a standalone application.

18
00:01:25,000 --> 00:01:31,000
So there are many possibilities if you write your business logic with the help of spring cloud functions.

19
00:01:31,000 --> 00:01:35,000
So the same they are trying to convey here with the help of this brief description.

20
00:01:35,000 --> 00:01:40,000
So now let me select this dependency and this is the only dependency that I need for now.

21
00:01:40,000 --> 00:01:47,000
If I go and click on this explore button, you can see under the dependencies we have spring boot stater

22
00:01:47,000 --> 00:01:49,000
and spring cloud function context.

23
00:01:49,000 --> 00:01:55,000
So this is a very important dependency that we need to add whenever we are trying to use spring cloud

24
00:01:55,000 --> 00:01:56,000
functions.

25
00:01:56,000 --> 00:01:59,000
And apart from that we also have some test related dependencies.

26
00:01:59,000 --> 00:02:01,000
So now I'm good with these dependencies.

27
00:02:01,000 --> 00:02:09,000
I can click on this download button which will download a maven project with a name message. As a next

28
00:02:09,000 --> 00:02:10,000
step inside my workspace,

29
00:02:10,000 --> 00:02:17,000
I'm going to create a new folder where I'm going to develop all the business logic related to this section.

30
00:02:17,000 --> 00:02:19,000
So right now we are into the section13.

31
00:02:19,000 --> 00:02:24,000
That's why I'm going to copy this section12 where we have the code from the previous section and the

32
00:02:24,000 --> 00:02:32,000
same I'm going to paste it here, post that, I'm going to rename it to section13. Inside this section13.

33
00:02:32,000 --> 00:02:39,000
First, I will delete the .idea folder and post that I'm going to paste the new Maven project that we

34
00:02:39,000 --> 00:02:41,000
downloaded. Behind the scenes,

35
00:02:41,000 --> 00:02:47,000
I extracted the messages project and I'm trying to paste the here. So you can see message

36
00:02:47,000 --> 00:02:53,000
is the new Maven project. As a next step, I'll go to my IntelliJ idea and try to open this section13.

37
00:02:53,000 --> 00:02:54,000
.

38
00:02:54,000 --> 00:02:56,000
Here let me click on this open button and post that

39
00:02:56,000 --> 00:03:04,000
I'll go to storage, workspaces, microservices and I'm going to select the folder, which is section13.

40
00:03:04,000 --> 00:03:07,000
So let me click on this open button.

41
00:03:07,000 --> 00:03:13,000
Here I'm going to load all the Maven projects with that, all the projects present inside this section13

42
00:03:13,000 --> 00:03:16,000
are right now detected as Maven projects.

43
00:03:16,000 --> 00:03:16,000
As a next step,

44
00:03:16,000 --> 00:03:21,000
let me go to the messages microservice. Here under the source folder,

45
00:03:21,000 --> 00:03:25,000
first, I'm going to create a new package.

46
00:03:25,000 --> 00:03:32,000
The package name is going to be com.eazybytes.message.dto. Because inside this package I'm

47
00:03:32,000 --> 00:03:40,000
going to create a class using which I can always accept the message that I'm going to receive from the

48
00:03:40,000 --> 00:03:41,000
message broker.

49
00:03:41,000 --> 00:03:47,000
So my accounts microservice, is going to send a message to the message broker in the format of this

50
00:03:47,000 --> 00:03:52,000
DTO and the same I'm going to receive inside this message service and process the same.

51
00:03:52,000 --> 00:03:55,000
Here I'm going to right click and select new Java class.

52
00:03:55,000 --> 00:03:59,000
And this time instead of class, I'm going to create a record.

53
00:03:59,000 --> 00:04:06,000
And the record name is going to be AccountsMessageDto. Like we discussed at the starting of the course.

54
00:04:06,000 --> 00:04:08,000
We can use record instead of class.

55
00:04:08,000 --> 00:04:15,000
Whenever we use this record, automatically the container is going to generate the getters for your

56
00:04:15,000 --> 00:04:21,000
fields and it is going to make the fields also final, which means once the object of this record is

57
00:04:21,000 --> 00:04:25,000
created, all the data inside it, it is going to be final.

58
00:04:25,000 --> 00:04:31,000
So here I'm going to mention few fields that I want to receive from the accounts microservice.

59
00:04:31,000 --> 00:04:37,000
Whenever we want to mention fields inside a record class, we just need to mention inside these brackets

60
00:04:37,000 --> 00:04:39,000
which which is present next to the class name.

61
00:04:39,000 --> 00:04:41,000
So here I'm going to mention the fields.

62
00:04:41,000 --> 00:04:47,000
Like you can see I want to first receive what is the account number, then what is the name of the customer,

63
00:04:47,000 --> 00:04:48,000
what is the email,

64
00:04:48,000 --> 00:04:49,000
what is the mobile number.

65
00:04:49,000 --> 00:04:56,000
So that using this information my message microservice can send communication in the form of email and

66
00:04:56,000 --> 00:04:56,000
SMS.

67
00:04:56,000 --> 00:04:59,000
So to send an email we need email address and

68
00:04:59,000 --> 00:05:02,000
to send an SMS, we need mobile number.

69
00:05:02,000 --> 00:05:03,000
So let me resolve this warning.

70
00:05:03,000 --> 00:05:07,000
So it is asking me to write some Javadoc comment.

71
00:05:07,000 --> 00:05:11,000
I can try to add some Javadoc here so that we will not have that one.

72
00:05:11,000 --> 00:05:13,000
So now we have some Javadoc.

73
00:05:13,000 --> 00:05:19,000
As a next step, I'm going to create a new package under com.eazybytes.message.

74
00:05:19,000 --> 00:05:26,000
And this package name is going to be functions com.eazybytes.message.functions.

75
00:05:26,000 --> 00:05:32,000
Because inside this package only I'm going to create all the functions that are needed for my business

76
00:05:32,000 --> 00:05:32,000
logic.

77
00:05:32,000 --> 00:05:39,000
So here let me try to create a new class and the class name is going to be message functions because

78
00:05:39,000 --> 00:05:44,000
all the functions that I'm going to write inside this class, they are going to handle the messaging

79
00:05:44,000 --> 00:05:45,000
to the end user.

80
00:05:45,000 --> 00:05:53,000
So let me create this class and post that I'm going to mention @Configuration annotation

81
00:05:53,000 --> 00:05:55,000
on top of this class.

82
00:05:55,000 --> 00:06:00,000
As a next step, we need to write business logic inside this class with the help of functions.

83
00:06:00,000 --> 00:06:03,000
So let's try to continue this discussion in the next lecture.

84
00:06:03,000 --> 00:06:04,000
Thank you.

85
00:06:04,000 --> 00:06:04,000
Bye.

